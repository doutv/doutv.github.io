<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>number-of-sub-arrays-with-odd-sum</title>
      <link href="/2020/07/27/2020/number-of-sub-arrays-with-odd-sum/"/>
      <url>/2020/07/27/2020/number-of-sub-arrays-with-odd-sum/</url>
      
        <content type="html"><![CDATA[<h1 id="1524-和为奇数的子数组数目"><a href="#1524-和为奇数的子数组数目" class="headerlink" title="1524.和为奇数的子数组数目"></a><a href="https://leetcode-cn.com/problems/number-of-sub-arrays-with-odd-sum/" target="_blank" rel="noopener">1524.和为奇数的子数组数目</a></h1><p>题目看起来很简单，但是做起来可就不简单了</p><p>我的思路是：奇数+偶数=奇数，奇数=奇数，根据这个规律来找dp方程，想了两个dp方程都不对……</p><p>一看题解，阔然开朗。</p><ol><li>利用前缀和的性质：$sum[i..j]=sum[j]-sum[i-1]$。</li><li>奇数-偶数=奇数，偶数-奇数=奇数。</li><li>所以我们只需要记录$[0…i-1]$的前缀和中有多少个奇数$odd$和偶数$even$。如果$sum[i]$是奇数，那么以$arr[i]$为结尾的子数组和为奇数的数目为$even$；如果$sum[i]$是偶数，则为$odd$。</li></ol><p><a href="https://leetcode-cn.com/problems/number-of-sub-arrays-with-odd-sum/comments/" target="_blank" rel="noopener">代码来源于评论区</a></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numOfSubarrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> even <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 前缀和奇偶个数</span>        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 利用前缀和，将之前的前缀和的奇偶数量记录下来，根据当前子数组的奇偶，</span>        <span class="token comment" spellcheck="true">//再使用之前的更小子数组奇偶个数算出以当前数为尾的子数组的奇和个数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> odd<span class="token punctuation">;</span>                res <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>                even<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> even<span class="token punctuation">;</span>                res <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>                odd<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>number-of-good-leaf-nodes-pairs</title>
      <link href="/2020/07/26/2020/number-of-good-leaf-nodes-pairs/"/>
      <url>/2020/07/26/2020/number-of-good-leaf-nodes-pairs/</url>
      
        <content type="html"><![CDATA[<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">2050</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> leaves<span class="token punctuation">;</span>    <span class="token keyword">bool</span> isleaf<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> visited<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> idx<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">predfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> cur<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">++</span>idx<span class="token punctuation">;</span>        <span class="token keyword">int</span> curidx<span class="token operator">=</span>idx<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            leaves<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>curidx<span class="token punctuation">)</span><span class="token punctuation">;</span>            isleaf<span class="token punctuation">[</span>curidx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">addedge</span><span class="token punctuation">(</span>curidx<span class="token punctuation">,</span> <span class="token function">predfs</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">addedge</span><span class="token punctuation">(</span>curidx<span class="token punctuation">,</span> <span class="token function">predfs</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> curidx<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">countPairs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">predfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> leaf<span class="token operator">:</span>leaves<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leaf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>d<span class="token operator">&lt;=</span>distance<span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> qsize<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>qsize<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> cur<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    visited<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span>leaf <span class="token operator">&amp;&amp;</span> isleaf<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token operator">++</span>ans<span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span>e<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Find a Value of a Mysterious Function Closest to Target</title>
      <link href="/2020/07/20/2020/find-a-value-of-a-mysterious-function-closest-to-target/"/>
      <url>/2020/07/20/2020/find-a-value-of-a-mysterious-function-closest-to-target/</url>
      
        <content type="html"><![CDATA[<h1 id="1521-找到最接近目标值的函数值"><a href="#1521-找到最接近目标值的函数值" class="headerlink" title="1521. 找到最接近目标值的函数值"></a><a href="https://leetcode-cn.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/" target="_blank" rel="noopener">1521. 找到最接近目标值的函数值</a></h1><p>当时卡在第三题了，第四题还没看过😓</p><p>后面看了一下题目，感觉跟前缀和相关，然后懒懒的我就去看题解了~</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p><a href="https://leetcode-cn.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/solution/10-xing-dai-ma-an-wei-yu-yun-suan-de-xing-zhi-by-2/" target="_blank" rel="noopener">这个题解</a>讲得很好，建议认真吸收。</p><p>根据按位与的两个性质，尤其是第二个性质，使得我们可以轻松地遍历每一个<code>func(arr,l,r)</code>的值，从而得到答案。</p><p>代码直接看上面题解就好，我基本照抄的。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">closestToTarget</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> valid<span class="token punctuation">{</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> new_valid<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span>valid<span class="token punctuation">)</span>                new_valid<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            new_valid<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   new_valid<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>new_valid<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>new_valid<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>new_valid<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span>new_valid<span class="token punctuation">)</span>                ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>v<span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="st表-二分"><a href="#st表-二分" class="headerlink" title="st表+二分"></a>st表+二分</h2><p>这里同样需要用到按位与&amp;的一个性质：$x&amp;y \geq x$ and $x&amp;y \geq y$。所以有单调性$func(arr,l,r)\geq func(arr,l,r+1)$。</p><p>题目要找的最小值$ans$就是最接近$target$的$func(arr,l,r)$，显然这个最小值$ans$一定出现在比$target$小的第一个$func$或比$target$大的第一个$func$。因此我们可以二分查找出比$target$小的第一个$func(arr,l,r)$，再选出$|func(arr,l,r-1)-target|$和$|func(arr,l,r)-target|$两者中的最小值。</p><p>复习一下关于st表的知识：  </p><ul><li><a href="https://oi-wiki.org/ds/sparse-table/" target="_blank" rel="noopener">https://oi-wiki.org/ds/sparse-table/</a></li><li>st表是用于解决可重复贡献问题的数据结构。</li><li>可重复贡献问题指对于运算$opt$，满足$x opt x = x$，$opt$还需要满足结合律才可用st表求解。</li><li>能用st表解决的可重复贡献问题有：最大值$\max(x,x)=x$，GCD，按位与。</li><li>st表可以让我们在$O(1)$内求出某个区间$[L,R]$内的最大$func(arr,l,r)$ $L\leq l \leq r \leq R$。</li></ul><p>再根据$func$的单调性，固定左端点$l$，二分查找$r$使$|func(arr,l,r)-target|$最小。枚举$l$需要$O(N)$，二分查找需要$O(\log N)$，st表查找一次需要$O(1)$,所以总的复杂度是$O(N)<em>O(\log N)</em>O(1)=O(N\log N)$。</p><p><a href="https://leetcode-cn.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/solution/mei-ju-qi-dian-rmq-er-fen-by-acw_wangdh15/" target="_blank" rel="noopener">参考题解</a></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">closestToTarget</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">int</span> Logn<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span>INT32_MAX<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">st</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        Logn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Logn<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             Logn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Logn<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> st<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 现学的lambda function </span>        <span class="token keyword">auto</span> ask <span class="token operator">=</span> <span class="token punctuation">[</span>st<span class="token punctuation">,</span>Logn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span>                <span class="token keyword">return</span> INT32_MAX<span class="token punctuation">;</span>            <span class="token keyword">int</span> tmp<span class="token operator">=</span>Logn<span class="token punctuation">[</span>y<span class="token operator">-</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">&amp;</span> st<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>tmp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> r_left<span class="token operator">=</span>l<span class="token punctuation">;</span>            <span class="token keyword">int</span> r_right<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>r_left<span class="token operator">&lt;</span>r_right<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>r_left<span class="token operator">+</span>r_right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ask</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">>=</span>target<span class="token punctuation">)</span>                    r_left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    r_right<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> r<span class="token operator">=</span>r_right<span class="token punctuation">;</span>            ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token function">ask</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token function">ask</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maximum Number of Non-Overlapping Substrings</title>
      <link href="/2020/07/20/2020/maximum-number-of-non-overlapping-substrings/"/>
      <url>/2020/07/20/2020/maximum-number-of-non-overlapping-substrings/</url>
      
        <content type="html"><![CDATA[<h1 id="5466-Maximum-Number-of-Non-Overlapping-Substrings"><a href="#5466-Maximum-Number-of-Non-Overlapping-Substrings" class="headerlink" title="5466. Maximum Number of Non-Overlapping Substrings"></a><a href="https://leetcode-cn.com/problems/maximum-number-of-non-overlapping-substrings/" target="_blank" rel="noopener">5466. Maximum Number of Non-Overlapping Substrings</a></h1><p>Leetcode周赛P3，才一百多人做出来，题目很新颖，并不需要用到很高深的算法，但是对思维要求高。</p><ol><li>一开始我是想着贪心的，我的想法是子串只包含一种字符，这样构造得到的子串应该是最多的。算法大概是枚举每一个出现的字符的右端点<code>last[ch]</code>，向左扩展到左端点，要求这段字符串满足条件2。交上去之后发现<code>&quot;abab&quot;</code>的答案是<code>[&quot;abab&quot;]</code>，我的贪心是过不了这个样例的。</li><li>于是我就去想dp的做法了，<code>dp[i]</code>表示前$[0,i]$中的最多子串数目，$dp[i]=\max{dp[j]+1}$ 如果子串$[j+1,i]$所有出现的字符都只出现在子串中，对于所有的$i$, $dp[i]=dp[i-1]$. 可以用一个优先队列来保存之前的<code>dp[j]</code>，每次只取$\geq dp[i-1]$的出来，检查$[j+1,i]$区间是否符合条件。然而，这样做连第一个样例都过不去😓。首先，复杂度可能会达到$O(N^2)$，其次，要得到最优解的字符串比较难。把代码放这纪念吧…<pre class=" language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">maxNumOfSubstrings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span> <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">fromdp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token keyword">int</span> first<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> last<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memset</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">memset</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     first<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     last<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">?</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>     queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> tmpq<span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">auto</span> <span class="token punctuation">[</span>pre<span class="token punctuation">,</span> le<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">bool</span> bo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>le<span class="token punctuation">,</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> le <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">int</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">></span> le <span class="token operator">&amp;&amp;</span> last<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span>                 <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token keyword">else</span>             <span class="token punctuation">{</span>                 bo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         tmpq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>pre<span class="token punctuation">,</span> le<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>bo<span class="token punctuation">)</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>             fromdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">;</span>             q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmpq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmpq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         tmpq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> fromdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>fromdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> fromdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>评论区的贪心解法$O(N)$:<ol><li>预处理出<code>l[ch]</code>表示字符<code>ch</code>最左侧的出现位置, <code>r[ch]</code>表示最右侧的出现位置。</li><li><code>get</code>函数固定子串的左端点<code>start</code>，求至少包含左端点的字符<code>s[start]</code>的合法子串的右端点。</li><li>遍历字符串，只找以当前字符<code>s[i]</code>在字符串第一次出现的字符开始的字符串，用一个神奇的变量<code>right</code>来记录当前答案中最右侧字符串的右端点位置。如果<code>i&gt;right</code>说明已经走出了上一个字符串的范围了，可以开始下一个字符串了。</li><li>贪心的正确性证明：我不知道怎么证明😂<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">maxNumOfSubstrings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//记录每个字符第一次和最后一次出现的位置</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>          l<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>      r<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">auto</span> get <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span>   <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//求start开始符合条件2的子字符串</span>      <span class="token keyword">int</span> end <span class="token operator">=</span> r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> start<span class="token punctuation">)</span>              <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          end <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> end<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> right <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> l<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//只找以当前字符在字符串第一次出现的字符开始的子字符串，所以最多找26次</span>          <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> right<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              right <span class="token operator">=</span> r<span class="token punctuation">;</span>              res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          right <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>          res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Competition </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对计算机专业的思考</title>
      <link href="/2020/07/16/2020/introduction-to-cs/"/>
      <url>/2020/07/16/2020/introduction-to-cs/</url>
      
        <content type="html"><![CDATA[<h1 id="对计算机专业的思考"><a href="#对计算机专业的思考" class="headerlink" title="对计算机专业的思考"></a>对计算机专业的思考</h1><p>虽然我现在刚升上大二，但是我接触计算机专业已经快四年了。我对这个专业以及行业还是有自己的理解的。以下均为个人见解，仅供参考。</p><p>先说结论吧：计算机专业很好找工作，工资水平在各行业中也是数一数二的，我特别推荐自学能力强的同学来读。</p><h2 id="计算机专业学的到底是什么？"><a href="#计算机专业学的到底是什么？" class="headerlink" title="计算机专业学的到底是什么？"></a>计算机专业学的到底是什么？</h2><p>我的理解：学的是一种操控计算机的思维模式。</p><p>本科核心课程：C/C++语言，算法与数据结构，计算机组成与结构，数据库，计算机网络，编译原理等等。<br>各个大学的计算机专业修读计划都差不多的，大家感兴趣的话可以在大学的官网上面找，这里展示港中深的核心课程：<br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/introduction-to-CS-2020-07-16-21-09-13" alt="CS Major Required Course"></p><p>想必核心课程的名字大家看得云里雾里的，上网搜一搜也不太清楚究竟学的是什么，这里我用大白话解释一下吧：</p><ul><li>C/C++语言：跟学英语类似，需要掌握一些语法，更重要的是要理解计算机组成与结构（类比通过学英语来了解西方文化）。</li><li>算法与数据结构：与数学联系紧密，培养逻辑思维与推理能力，需要多刷算法题。</li><li>计算机组成与结构：像一门文科，知识点很多，要记/理解很多东西。</li><li>数据库：也挺像文科的，根据一些理论来设计数据库。</li><li>计算机网络：文科，没怎么了解过……</li><li>编译原理：这个了解就更少了，需要对算法与数据结构和计算机组成与结构有一定的了解。</li></ul><p>如果按照文理科的分类方式，计算机专业处在文科和理科的中间吧。</p><h2 id="读计算机专业需要什么条件？"><a href="#读计算机专业需要什么条件？" class="headerlink" title="读计算机专业需要什么条件？"></a>读计算机专业需要什么条件？</h2><p>有小伙伴可能会想：我的电脑水平很一般啊，之前也从未接触过编程，那我学起来会不会很吃力？</p><p>其实不会的，从零开始学，大学四年足够了。我个人觉得学计算机专业不太需要天赋，更多是靠后天的勤奋。编程能力不行，就多写代码；理论知识不过关，就多看书。而且这个专业特别公平，你会就是会，不会就是不会，很容易测试出一个人专业水平的高低。</p><p>接触过编程的同学就更好啦，能更快地上手。没有接触过也没关系的，大一多写点代码，不要满足于课内的东西（出来找工作不够用），很快就能追上来了。</p><p>P.S. 程序员最好的语言是英语，因为要经常查google。</p><h2 id="我了解过的大学"><a href="#我了解过的大学" class="headerlink" title="我了解过的大学"></a>我了解过的大学</h2><p>当时我是先选专业，再选大学的，一定要读计算机专业。据我所知，以下大学的计算机专业都不错的：</p><ul><li>电子科技大学：性价比极高，省排名10000开外都有机会考上，培养了很多互联网人才，技术氛围浓厚。</li><li>北京邮电大学：优势是在北京，分数要求不太高。</li><li>武汉大学：信息安全专业了解一下，也算是计算机专业的一个分支了。</li><li>华中科技大学：跟武大差不多吧，我当时的第二志愿。</li><li>南京大学：听说人工智能很强（不过跟本科生关系不大）</li><li>北京航空航天大学：分数要求和学科排名都很高。</li><li>清华大学：考的上的都不用我多说了吧…</li></ul><p>然而，我去了香港中文大学（深圳）。<br>一年后再看嘛，这学校的缺点是学费贵（四年无奖学金，所有费用50w+）和不能保研；优点是容易申请国外学校和国际化教育。如果同学们家里条件允许还是可以考虑一下的~</p><h2 id="就读一年的个人体验"><a href="#就读一年的个人体验" class="headerlink" title="就读一年的个人体验"></a>就读一年的个人体验</h2><p>由于我第二年才分专业，第一年我上的计算机专业课程并不多：python语言，程序设计基础，算法与数据结构，数据库，其中后面两个核心课程都是我提前上的。</p><p>相比于课内学到的知识，我课外学的知识要多得多。很多需要用到的知识/技能是没有对应的课程的，比如：开发一个完整的网站，为了通过面试刷算法题，用markdown语言写文档等等。</p><p>我喜欢这个专业的一个重要原因就是学习资源实在太多了，无论你想学哪个方面的知识，一搜就有了。而且有很多程序员都是非计算机科班毕业的，他们靠自学也能进入行业，由此可见自学的重要性。</p><h2 id="就业需要掌握什么技能？"><a href="#就业需要掌握什么技能？" class="headerlink" title="就业需要掌握什么技能？"></a>就业需要掌握什么技能？</h2><p>本科就业多数是去开发岗，开发岗可分为前端和后端，其中前端是用户直接能看到的界面，后端则是处理数据。  </p><p>如今的入职面试多是技术面试：现场做算法题+知识点问答。</p><ul><li>在面试中解算法题，解释自己的思路，甚至将完整代码写出。</li><li>知识点问答则考验你对于一些语言/知识的理解。</li></ul><p>据我了解，具备以下条件：熟练掌握一门语言，平时多刷算法题，有实习经历，有项目经历，基本就能进大公司（阿里，腾讯，字节跳动等等）。</p><p>算法岗（人工智能）的话，在本科应该只有少数大佬能去吧，毕竟这需要科研成果或者竞赛获奖。</p><h2 id="行业状况如何？"><a href="#行业状况如何？" class="headerlink" title="行业状况如何？"></a>行业状况如何？</h2><p>整个互联网行业从目前来看，发展空间还是不小的，如果能找准一家正处于上升期的公司，实现财务自由也不是不可能（当然这个很看运气）。进入互联网大公司当然也不错，国内互联网大厂应届生年薪20w起步，就是加班有点多而已……</p><p>很多人觉得程序员竞争很大，三十多岁的程序员很容易被裁员，然后就找不到工作了。的确，互联网行业竞争很大，如果不能持续学习新技术/知识，就很容易被淘汰。但如果你能保持对技术的热情，那到哪里都是香饽饽。国外的程序员大牛五六十岁仍在持续输出，更证明了程序员并不是一个吃青春饭的职业。</p><p>互联网行业加班多，程序员容易秃头，这些都是现实。996也基本是国内很多互联网公司的常态了。只能说国内竞争太激烈了吧，相比于国内，美国/加拿大的程序员加班还是很少的。如果不想让工作占据生活，可以选择在国内的外企或者出国工作，选择工作负担相对轻一些的国内企业也可以。</p><h2 id="本科毕业是就业还是读研？"><a href="#本科毕业是就业还是读研？" class="headerlink" title="本科毕业是就业还是读研？"></a>本科毕业是就业还是读研？</h2><p>现在读研的人越来越多咯，我现在是打算就业，不过以后可能会改啦。</p><p>我现在对读研的理解：</p><ul><li>推迟就业，延缓大四的就业压力。</li><li>提高学历，更容易找到工作。</li><li>走科研路线：读研/读博-&gt;研究员/大学教授。</li></ul><p>如果是打算做开发岗的话，那应该就不需要读研了，感觉有点浪费时间了，读研学到的东西对工作帮助不大。</p><p>如果是想做人工智能方面的工作，可以说是一定要读研了，不管是就业还是进一步科研，都需要一定的学术成果。</p><h2 id="专业，城市，学校三者的优先级如何？"><a href="#专业，城市，学校三者的优先级如何？" class="headerlink" title="专业，城市，学校三者的优先级如何？"></a>专业，城市，学校三者的优先级如何？</h2><p>我个人认为：专业&gt;城市&gt;学校，当然这跟我专业目标明确也有很大关系。</p><p>很多同学应该是没有明确自己想读的专业的，那城市&gt;学校&gt;=专业也可。</p><p>报志愿这件事嘛，父母长辈的意见都是参考而已，最后还是得靠自己做决定。其实就算选了一个不合适自己的也没太大关系，大二转专业就行了。从这个角度来看，专业的优先级是最低的，应该先选城市和学校。其实出成绩后你会发现，学校也没有几家可以选的，选分数高的很难被录取，选分数低的又觉得浪费了自己的分数，所以一般都是选自己分数段上下的几间学校。这几间分数相差不多的学校实力也差不多，最后就变成了选城市。</p><p>前几天看到一个讲的不错的视频，推荐大家去看一看，还可以去评论区看看对各专业的吐槽：<a href="https://www.bilibili.com/video/BV1hK411H7bY" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1hK411H7bY</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本人意见仅供参考，大家还是要多了解专业，城市，学校的信息，毕竟报志愿和高考同样重要噢。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google-Kick-Start-RoundD</title>
      <link href="/2020/07/13/2020/googlekickstartroundd/"/>
      <url>/2020/07/13/2020/googlekickstartroundd/</url>
      
        <content type="html"><![CDATA[<h1 id="Google-Kick-Start-Round-D"><a href="#Google-Kick-Start-Round-D" class="headerlink" title="Google Kick Start Round D"></a>Google Kick Start Round D</h1><p>这次成绩是三次以来最好的啦，1332名，虽然我只做出了第一题，后面三题都是暴力过第一个数据点~</p><h2 id="Record-Breaker"><a href="#Record-Breaker" class="headerlink" title="Record Breaker"></a>Record Breaker</h2><p>送分模拟题，注意一下边界条件即可。<br><code>a[n+1],premax</code>都初始化为<code>-1</code>，这样就不需要特判边界了。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> premax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> premax <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">++</span>ans<span class="token punctuation">;</span>        premax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>premax<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Alien-Piano"><a href="#Alien-Piano" class="headerlink" title="Alien Piano"></a>Alien Piano</h2><p>比赛时看这题觉得很复杂，不知道用什么方法来构造这个序列。于是就跳过去了，后面回来把暴力$O(4^N)$写了：</p><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">></span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> k<span class="token punctuation">;</span>    ans <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看完题解觉得还好，有两种方法：</p><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><ul><li>直接找长度大于$4$的连续上升/下降子序列，每有一个这样的子序列，就要打破一次规则</li><li>我当时怎么没想到呢？</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    cin<span class="token operator">>></span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>cnt1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>cnt2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt1<span class="token operator">++</span><span class="token punctuation">;</span>            cnt2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt2<span class="token operator">++</span><span class="token punctuation">;</span>            cnt1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt1 <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">||</span> cnt2 <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt1 <span class="token operator">=</span> cnt2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><ul><li>$dp(i,j)$表示前$i$个note，其中第$i$个note用$j$来表示的最小规则打破数。</li><li>$$ dp(i,j)=\min{dp(i-1,j’)+P(i,j’,j)|1 \leq j’ \leq 4} $$</li><li>$P(i,j’,j)$表示：第$i-1$个note用$j’$来表示，第$i$个note用$j$来表示，需要打破的规则数。</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> p<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">></span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Beauty-of-tree"><a href="#Beauty-of-tree" class="headerlink" title="Beauty of tree"></a>Beauty of tree</h2><p>这题一开始没审清楚题目，<code>travels up the tree</code>应该是向上找父节点，我以为是向上找第<code>A</code>层的随便一个节点都行，白做了大半个小时😓，后来只能用暴力咯。</p><h3 id="暴力-1"><a href="#暴力-1" class="headerlink" title="暴力"></a>暴力</h3><ul><li>要用<code>printf(&quot;%f&quot;)</code>来输出<code>double</code>类型，用<code>cout</code>似乎精度有点问题，过不了第一个测试集。</li><li>遍历每一对选择的节点<code>(i,j)</code>时，<code>i</code>和<code>j</code>都要<code>1 to n</code></li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// choose node i,j</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>tot<span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                visited<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span>                <span class="token operator">++</span>ans<span class="token punctuation">;</span>            <span class="token keyword">else</span>                ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                x <span class="token operator">=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">%</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>ans<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                y <span class="token operator">=</span> f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    visited<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>ans<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ans <span class="token operator">/</span> tot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><p>原来dfs还有这个用处啊，学到了学到了。</p><ul><li><code>P(being visited by either Amadea or Bilva) = P(visited by Amadea) + P(visited by Bilva) - (P(visited by Amadea)*P(visited by Bilva))</code></li><li><code>P(visited by Amadea) = visited times / total number of nodes</code></li><li>所以只需要算每个节点访问过的次数即可。</li><li>首先，每个节点至少访问过一次，因为至少会被选到一次。</li><li>其次，越靠近叶子节点，访问次数会越多。</li><li>每遍历到一个点，就给它的第<code>A</code>/<code>B</code>个父节点加上它自己的访问次数。</li><li>用一个辅助数组<code>path</code>来记录从根节点<code>1</code>到当前节点<code>u</code>经过的所有节点</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a_visit<span class="token punctuation">,</span> b_visit<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> children<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        a_visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        b_visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> children<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> a<span class="token punctuation">)</span>            a_visit<span class="token punctuation">[</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> a_visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> b<span class="token punctuation">)</span>            b_visit<span class="token punctuation">[</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> b_visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        children <span class="token operator">=</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_visit <span class="token operator">=</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b_visit <span class="token operator">=</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            children<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a_visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> n<span class="token punctuation">;</span>            <span class="token keyword">double</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>b_visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> n<span class="token punctuation">;</span>            ans <span class="token operator">+</span><span class="token operator">=</span> pa <span class="token operator">+</span> pb <span class="token operator">-</span> pa <span class="token operator">*</span> pb<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Locked-Doors"><a href="#Locked-Doors" class="headerlink" title="Locked Doors"></a>Locked Doors</h2><p>做到这题的时候没时间了，只剩下半小时不到，在最后一分钟的时候才过了第一个样例😄。</p><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>该题的模拟并不难想，只需用两个指针<code>l</code>和<code>r</code>来维护左右锁住的门的下标即可，复杂度为$O(NQ)$</p><ul><li>$N$个房间只有$N-1$个门，注意数组大小。</li><li>边界条件：<code>a[0],a[n]=INT_MAX</code>，当一侧的门全部打开后，只能打开另一侧的门。</li><li>画图来帮助理解门和房间的对应关系</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> INT32_MAX<span class="token punctuation">,</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> s<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token operator">--</span>l<span class="token punctuation">;</span>                s <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token operator">++</span>r<span class="token punctuation">;</span>                s <span class="token operator">=</span> r<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做了几次Google的比赛了，题风跟别处还是有很大不同的：</p><ul><li>注重边界条件的考察</li><li>不会告诉你哪个数据点错了，只能自己想程序中不完善的地方</li><li>分析题目的能力 &gt; 积累算法的多少</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>path-with-maximum-probability</title>
      <link href="/2020/07/13/2020/path-with-maximum-probability/"/>
      <url>/2020/07/13/2020/path-with-maximum-probability/</url>
      
        <content type="html"><![CDATA[<h1 id="5211-概率最大的路径"><a href="#5211-概率最大的路径" class="headerlink" title="5211. 概率最大的路径"></a>5211. 概率最大的路径</h1><h2 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h2><p>我第一反应是用dfs，无奈dfs怎么优化都超时，后来看了评论区才知道，加上<code>if (curp&lt;1e-4) return;</code>就可以过了，原理也很简单：只要答案与标准答案的误差不超过 <code>1e-5</code> ，就会被视作正确答案，所以如果当前已经走过的路径的成功概率太小的话，可以直接不要这条路径。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">>></span> e<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ans<span class="token punctuation">;</span>    <span class="token keyword">double</span> laste<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">,</span><span class="token keyword">double</span> curp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token operator">==</span>end<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>curp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curp<span class="token operator">&lt;</span><span class="token number">1e-5</span><span class="token operator">||</span>curp<span class="token operator">*</span>laste<span class="token operator">&lt;</span>ans<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token operator">=</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> p<span class="token operator">=</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>end<span class="token punctuation">,</span>curp<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">maxProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> edges<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>            e<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>e<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            laste<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>laste<span class="token punctuation">,</span>e<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h2><p>dfs算法超时后，我立刻就想到了最短路算法：dijkstra。</p><p>这题与最短路本质上是一样的，最短路是将每条边加起来，求最小边权和；而这题是将每条边乘起来，求最大边权乘积。<br>证明方法：</p><ul><li><a href="https://leetcode-cn.com/problems/path-with-maximum-probability/solution/zui-duan-lu-suan-fa-ji-zheng-que-xing-de-yan-jin-z/" target="_blank" rel="noopener">证明贪心是正确的</a>，每个点一旦被加入集合，之后就不能出现一条更短的路径了。</li></ul><p>但是我一开始的dijkstra写错了，优先队列中的节点按照外部数组<code>dis</code>从大到小排列，这样会导致一个问题：</p><ul><li>队列里的元素的优先级是由外界的<code>dis</code>变化决定的，priority_queue就无法实时保证队列里的元素满足堆性质了。我只要在外面随便改一改<code>dis</code>的值，priority_queue就废了。</li><li><a href="https://www.luogu.com.cn/discuss/show/51361" target="_blank" rel="noopener">https://www.luogu.com.cn/discuss/show/51361</a></li></ul><p>所以priority_queue中存储的应该是<code>pair&lt;double,int&gt; {p,u}</code>，优先队列中的元素优先级不依赖于外部元素。</p><p>此处不需要重载运算符：</p><ul><li>优先队列默认的比较类型是：<code>class Compare = std::less&lt;typename Container::value_type&gt;</code>。</li><li><code>less</code>会调用类型 T 上的 <code>operator&lt;</code> ，除非特化。</li><li><code>pair&lt;class T1, class T2&gt;</code>的小于号<code>&lt;</code>会先比较第一个元素<code>.first</code>，再比较第二个元素<code>.second</code>。</li><li>所以<code>priority_queue&lt;pair&lt;double,int&gt;&gt; q</code>是按<code>p</code>从大到小排列。</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> e<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">maxProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> edges<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">dis</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>        dis<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span>start<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> <span class="token punctuation">[</span>p<span class="token punctuation">,</span>u<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>p<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token operator">:</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dis<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> shortest path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校迎新网站设计</title>
      <link href="/2020/07/10/2020/developciwk/"/>
      <url>/2020/07/10/2020/developciwk/</url>
      
        <content type="html"><![CDATA[<h1 id="学校迎新网站设计"><a href="#学校迎新网站设计" class="headerlink" title="学校迎新网站设计"></a>学校迎新网站设计</h1><p>又是一天早上，我坐在电脑前摸鱼。突然，杨同学发来了消息，邀请我参与学校迎新网站（CUHKSZ Welcome Wall）的设计。<br>其实我一直都想做一个网站，就是懒而已，需要一个项目来驱动。既然他都主动邀请我了，那肯定上啊。</p><p>我负责的是网站的后端，框架是<code>django</code>。我之前从未用过<code>django</code>，那就现学呗。<br>把<a href="https://docs.djangoproject.com/zh-hans/3.0/intro/tutorial01/" target="_blank" rel="noopener">django tutorial</a>过一遍，了解了里面的一些概念和整个开发的流程。</p><h2 id="设计数据库"><a href="#设计数据库" class="headerlink" title="设计数据库"></a>设计数据库</h2><ul><li>目标是做一个类知乎的问答网站</li><li>先画ER Diagram，设计了<code>user</code>,<code>question</code>,<code>answer</code>,<code>comment</code>这几个表</li><li>那评论别人的评论该怎么做呢？</li><li>我上知乎查了一下这个问题，<a href="https://www.zhihu.com/question/38959595" target="_blank" rel="noopener">发现了解决方案</a>，只要在<code>comment</code>中加一个外键<code>reply_comment_id</code>就好了</li><li>在这个问题下面，我发现了另外一个问题：如何设计数据库使每个用户只能点赞/踩同一个回答/评论一次呢？</li><li>参考了别人的回答，添加<code>answer_vote</code>来存储某个用户对某条回答的投票信息，<code>comment_vote</code>来存储某个用户对某条评论的投票信息。</li><li>初步的数据库设计：</li><li><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/DevelopCiwk-2020-07-10-09-05-06" alt="ER Diagram"></li></ul><h2 id="django中建立ORM模型"><a href="#django中建立ORM模型" class="headerlink" title="django中建立ORM模型"></a>django中建立ORM模型</h2><p>django中的数据库在<code>models.py</code>中定义，用的是ORM。</p><p>遇到的一些问题及解决方案：</p><ul><li>用于分类的字段，如<code>gender</code>只有两个取值，该如何表示？可以使用<a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#choices" target="_blank" rel="noopener">Choices</a>来显式定义:<pre class=" language-python"><code class="language-python">  <span class="token keyword">class</span> <span class="token class-name">Gender</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>TextChoices<span class="token punctuation">)</span><span class="token punctuation">:</span>      MAN <span class="token operator">=</span> <span class="token string">'M'</span>      WOMAN <span class="token operator">=</span> <span class="token string">'W'</span>  gender <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>Gender<span class="token punctuation">.</span>choices<span class="token punctuation">)</span></code></pre>  Choices此处在纯后端的django中其实只起到了代码注释的作用，在生成的数据库语句中不会产生任何不同。也就是说，<code>gender=&quot;A&quot;</code>也是可以的。</li><li>外键（foreign key）中的<code>on_delete</code>该如何设置？<ul><li>这是一个有关设计哲学的问题</li><li>对于<code>on_delete</code>的6种模式介绍，<a href="https://stackoverflow.com/questions/38388423/what-does-on-delete-do-on-django-models" target="_blank" rel="noopener">stackoverflow</a>上面有精彩的回答</li><li><code>CASCADE</code>是最严谨的模式，例如一个用户被删除了，那么他所有的回答和评论都会被删除，这样能最好地保证数据库的完整性（integrity）</li><li><code>SET_NULL</code>能最好地保护数据不丢失，哪怕误操作删掉了一个用户，他所有的回答和评论都保存在数据库中，不会丢失。知乎上有时会看到“已注销用户”就是这个道理，虽然他的个人信息可能被永久删除了，但是他的回答和评论都保存在数据库中。（当然我不确定知乎是否采用了这种模式）</li><li>我最后选择了<code>SET_NULL</code>：<pre class=" language-python"><code class="language-python">user_id <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> db_column<span class="token operator">=</span><span class="token string">"user_id"</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h2 id="API-Document"><a href="#API-Document" class="headerlink" title="API Document"></a>API Document</h2><ul><li><a href="https://github.com/apiaryio/api-blueprint" target="_blank" rel="noopener">API Blueprint 一门类markdown的api设计语言</a></li><li><a href="https://apiary.io/" target="_blank" rel="noopener">一个在线编辑，预览，测试API的网站</a></li></ul><p>生成出的API文档十分美观<br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/DevelopCiwk-2020-07-10-10-17-33" alt="API Document Example"></p><h2 id="django前后端分离实践"><a href="#django前后端分离实践" class="headerlink" title="django前后端分离实践"></a>django前后端分离实践</h2><p>django是自带前端界面的，但在我们的项目中，django只负责后端部分，前端用react完成。</p><p>由于我们项目较小，核心开发人员只有三人，我负责后端部分，另外两位同学负责前端，所以我们是一边完善API文档一边写程序的。后端只需要提供API，根据相应的请求返回对应的json。下面讲一些常用的函数/功能：</p><ul><li><code>body_dict = json.loads(request.body.decode(&#39;utf-8&#39;))</code> 读取POST中的字段</li><li><code>dict.get</code> python字典的get方法</li><li><code>models.save()</code> 更改某个model后保存</li><li><code>get_object_or_404</code> 获取单个符合条件的model</li><li><code>models.objects.filter</code> 返回一个<code>queryset</code>包含符合条件的所有model</li></ul><h3 id="Convert-Django-Model-object-to-dict"><a href="#Convert-Django-Model-object-to-dict" class="headerlink" title="Convert Django Model object to dict"></a>Convert Django Model object to dict</h3><p><a href="https://stackoverflow.com/questions/21925671/convert-django-model-object-to-dict-with-all-of-the-fields-intact" target="_blank" rel="noopener">StackOverflow上面对这个问题的解答</a></p><p>我在项目中主要采用了2种方法：</p><ol><li><code>model_to_dict</code>：返回特定列且不需要返回外键的场景中。</li><li>StackOverflow上的custom function<code>to_dict</code>：返回model的所有字段。</li></ol><p><code>to_dict</code>也可以只返回model的特定列，写法如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">to_dict</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> except_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    opts <span class="token operator">=</span> instance<span class="token punctuation">.</span>_meta    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> chain<span class="token punctuation">(</span>opts<span class="token punctuation">.</span>concrete_fields<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>private_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> f<span class="token punctuation">.</span>name <span class="token keyword">in</span> except_fields<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        d<span class="token punctuation">[</span>f<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>value_from_object<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> opts<span class="token punctuation">.</span>many_to_many<span class="token punctuation">:</span>        <span class="token keyword">if</span> f<span class="token punctuation">.</span>name <span class="token keyword">in</span> except_fields<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        d<span class="token punctuation">[</span>f<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>id <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">.</span>value_from_object<span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> d</code></pre><h2 id="用户登录系统设计"><a href="#用户登录系统设计" class="headerlink" title="用户登录系统设计"></a>用户登录系统设计</h2><p>用户成功登录后，用<code>set_cookie</code>方法将<code>token</code>（一串随机生成的字符串作为用户身份标识）放在用户的cookie中。在需要验证用户身份的场景中，只需要验证用户cookie中的token与数据库中该user_id对应的token是否相等即可，省去了每次登录的麻烦。token有过期时间，如果token过期了就相当于无效，用户需要重新登录获取新生成的token。</p><p>由于我并没有采用django中的身份验证模块，因此以下操作都需手动进行：生成token和过期日期expired_date，存储到数据库中，进行token比对。为了减少重复代码，我使用了装饰器来进行token比对：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">post_token_auth_decorator</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps<span class="token punctuation">(</span>api<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">token_auth</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        body_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>User<span class="token punctuation">,</span> user_id<span class="token operator">=</span>body_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> user<span class="token punctuation">.</span>token<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"token incorrect"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user<span class="token punctuation">.</span>expired_date <span class="token operator">&lt;</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"token expire"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> api<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> token_auth</code></pre><p>在需要验证用户身份的场景中，如所有的POST操作，只需要在API前加上<code>@post_token_auth_decorator</code>即可。事实上，POST的API使用了2个装饰器（注意先后顺序）：</p><pre class=" language-python"><code class="language-python">@require_http_methods<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>@post_token_auth_decorator<span class="token keyword">def</span> <span class="token function">alter_user_info</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>P.S. <a href="https://www.runoob.com/w3cnote/python-func-decorators.html" target="_blank" rel="noopener">装饰器教程，注意看下面的第一篇笔记</a></p><p>使用secrets库中的<code>token_urlsafe</code>方法生成token并<code>set_cookie</code>：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> secrets <span class="token keyword">import</span> token_urlsafeuser<span class="token punctuation">.</span>token <span class="token operator">=</span> token_urlsafe<span class="token punctuation">(</span>TOKEN_LENGTH<span class="token punctuation">)</span>user<span class="token punctuation">.</span>expired_date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span>TOKEN_DURING_DAYS<span class="token punctuation">)</span>response <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"User register successfully"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">'application/json'</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>token<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Backend </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客折腾日记</title>
      <link href="/2020/07/10/2020/blogconfigure/"/>
      <url>/2020/07/10/2020/blogconfigure/</url>
      
        <content type="html"><![CDATA[<h1 id="博客折腾日记"><a href="#博客折腾日记" class="headerlink" title="博客折腾日记"></a>博客折腾日记</h1><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>一次偶然的机会打开了别人的博客，它的界面很好看，于是我自己也想做一个。<br>他用的是<code>hexo+next</code>，我一开始用的主题是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>，这个主题配置简单，就是有点丑，而且很久没更新了。<br>配置好后发现：文章预览有问题，主页展示了整篇文章，这个地方折腾了好久，有一天突然又能自动截断了……  </p><p>但是后来我上Github找到一个非常好看的主题<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，这个的配置教程超级好，基本都覆盖到了。<br>有一些没覆盖到的内容可以去Issues找或者搜索代码，比如：</p><ol><li><code>mathjax</code>默认全局打开:<code>/layout/post.ejs</code>的最后一个<code>if(xxx)</code>改成<code>if(1)</code>即可</li></ol><p>其实博客关键还是内容，内容为王，外观再漂亮也只是衬托罢了。</p><h2 id="搜索引擎收录"><a href="#搜索引擎收录" class="headerlink" title="搜索引擎收录"></a>搜索引擎收录</h2><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>上<a href="https://search.google.com/search-console/welcome" target="_blank" rel="noopener">Google Search Console</a>，有多种验证方式来确认网站是归属你所有的。<br>我用了最简单的那种方式：在<code>/public</code>下加一个<code>.html</code>文件，但是每次部署网站<code>hexo clean</code> <code>hexo d</code>都要手动把这个文件加进去</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>submatrices</title>
      <link href="/2020/07/05/2020/submatrices/"/>
      <url>/2020/07/05/2020/submatrices/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/count-submatrices-with-all-ones/" target="_blank" rel="noopener">5454. 统计全 1 子矩形</a></p><p>给你一个只包含 0 和 1 的 rows * columns 矩阵 mat ，请你返回有多少个 子矩形 的元素全部都是 1 。</p><a id="more"></a><ol><li>这题比较像dp（直觉），矩形这类问题挺套路的，基本状态定义都是以当前坐标为右下角</li><li>二维的情况不好入手，那我就先从一维的情况开始想：<code>dp[i]</code>表示以<code>mat[i]</code>为最右侧矩形的全为1的子矩形个数，$dp[i]=\sum_{i=1}^{dp[i-1]} if \quad mat[i]=1,dp[i]=0 \quad if \quad mat[i]=0$</li><li>但是这个结论似乎无法推广到二维，于是我又想到了另一种方法：<ol><li>先从宽为1的矩形出发，$rowdp[i][j]$表示以$(i,j)$为最右侧的矩形的最大长度（最大矩形为$1 \times rowdp[i][j]$，$coldp[i][j]$表示以$(i,j)$为底部的矩形的最大高度（最大矩形为$coldp[i][j] \times 1$）。基本的框架是这样的：<pre><code>for range(rowdp[i][j]):  using coldp to update ans</code></pre><ol><li>最好画下图来理解整个过程。想象有一条线从第$j$列出发，一直向左扫，扫到第$rowdp[i][j]$列结束。实际上是扫过了所有可能的子矩形的左上角，而通过$coldp[i][k]$我们可以得到位于第$k$列的左上角。$mincol$代表到第$k$列为止的最小高度，且最大矩形的高度为$mincol$</li></ol></li></ol></li><li>代码：<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">155</span><span class="token punctuation">;</span> <span class="token keyword">int</span> rowdp<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> coldp<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">numSubmat</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>mat<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> n <span class="token operator">=</span> mat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> m <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 rowdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                 coldp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                 <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">int</span> prerowdp <span class="token operator">=</span> j <span class="token operator">?</span> rowdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> precoldp <span class="token operator">=</span> i <span class="token operator">?</span> coldp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>             rowdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> prerowdp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>             coldp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> precoldp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> mincol <span class="token operator">=</span> M<span class="token punctuation">;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> rowdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 mincol <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mincol<span class="token punctuation">,</span> coldp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 ans <span class="token operator">+</span><span class="token operator">=</span> mincol<span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> ans<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><p>我看到评论区推荐了两道相似题目：</p><ul><li><a href="https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/" target="_blank" rel="noopener">1277. 统计全为 1 的正方形子矩阵</a><ul><li>这题小改一下代码就AC了<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> rowdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mincol <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mincol<span class="token punctuation">,</span> coldp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mincol<span class="token operator">>=</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">++</span>ans<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/" target="_blank" rel="noopener">1074. 元素和为目标值的子矩阵数量</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>number-of-submatrices-that-sum-to-target</title>
      <link href="/2020/07/05/2020/number-of-submatrices-that-sum-to-target/"/>
      <url>/2020/07/05/2020/number-of-submatrices-that-sum-to-target/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/" target="_blank" rel="noopener">5455. 最多 K 次交换相邻数位后得到的最小整数</a></p><p>给你一个字符串 num 和一个整数 k 。其中，num 表示一个很大的整数，字符串中的每个字符依次对应整数上的各个数位 。<br>你可以交换这个整数相邻数位的数字 最多 k 次。<br>请你返回你能得到的最小整数，并以字符串形式返回。</p><a id="more"></a><ol><li>我第一反应是冒泡排序，因为只能交换相邻元素。</li><li>敲完冒泡排序发现样例1过不去，手推了一会，发现是因为冒泡排序可能会在某一轮中断。</li><li>然后我想到了先贪心后冒泡排序，冒泡排序的交换次数$\sum_{i=n-1}^x i&lt;k$（后来发现这个交换次数是错误的，这只是交换次数的上界），先找到满足不等式最大的$x$，贪心交换$k-\sum_{i=n-1}^x i$ 轮后再进行冒泡排序。</li><li>上面那个方案当然过不了样例5啦，比赛快结束的时候，想到了要在每一轮冒泡排序前，计算出该轮所需的交换次数，离AC很近了。</li><li>比赛结束前还是没做出来，后来看到<a href="https://leetcode-cn.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/solution/5455qi-shi-jiu-shi-huo-yong-yi-dian-mou-pao-pai-xu/" target="_blank" rel="noopener">其实就是活用一点冒泡排序</a>这个题解，阔然开朗，只要每一轮的冒泡排序只考虑$k$满足的区间$[i,i+k]$即可，</li><li>代码：<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> string <span class="token function">minInteger</span><span class="token punctuation">(</span>string num<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> n <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">sort</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> num<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">int</span> minx <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minx<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 minx <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                 idx <span class="token operator">=</span> j<span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> idx<span class="token punctuation">;</span> j <span class="token operator">>=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token operator">--</span>k<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> num<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><p>以上解法是$O(n^2)$的，事实上这题有$O(n\log n)$的解法：贪心地填每一位数，用线段树/树状数组维护置换次数，坑待填~，可参考：</p><ul><li><a href="https://leetcode-cn.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/solution/java-rmqfenwich-tree-onlgn-by-henrylee4/" target="_blank" rel="noopener">线段树</a></li><li><a href="https://www.bilibili.com/video/BV1tD4y1Q7Mb?p=5" target="_blank" rel="noopener">树状数组</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> greedy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> greedy </tag>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>convert-sorted-array-to-binary-search-tree</title>
      <link href="/2020/07/04/2020/convert-sorted-array-to-binary-search-tree/"/>
      <url>/2020/07/04/2020/convert-sorted-array-to-binary-search-tree/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener">108. 将有序数组转换为二叉搜索树</a>，这是一道有趣的树上递归题</p><ol><li>乍一看，这题不很简单嘛，直接递推就好了，<code>nums[mid]</code>的左边是左子树，右边是右子树，最终树的形状是一个人字形</li><li>原来这个条件<code>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</code>每个节点都要满足，那应该要用上递归了。</li><li>递归算法的设计：<ol><li>其实蛮套路的，树上递归的题目代码都很短，基本就是处理左子树–&gt;处理右子树–&gt;合并左右子树</li><li>我是先用直觉写出递归，然后手推一下样例看看对不对，发现问题后再修改递归</li><li>每个$[L,R]$区间的处理方式与$[0,nums.size()-1]$是一样的，容易想到是以<code>mid=(l+r)/2</code>为分界，将当前树分成左右两棵子树，最后再考虑边界情况即可</li></ol></li><li>代码：<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> TreeNode <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>     TreeNode <span class="token operator">*</span>cur<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> cur<span class="token punctuation">;</span> <span class="token punctuation">}</span> TreeNode<span class="token operator">*</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>递归的代码看起来真的爽👍</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vertical-order-traversal-of-a-binary-tree</title>
      <link href="/2020/07/04/2020/vertical-order-traversal-of-a-binary-tree/"/>
      <url>/2020/07/04/2020/vertical-order-traversal-of-a-binary-tree/</url>
      
        <content type="html"><![CDATA[<p>偶然打开<a href="https://leetcode-cn.com/interview/" target="_blank" rel="noopener">面试页面</a>发现的一道好题：<a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/" target="_blank" rel="noopener">二叉树的垂序遍历</a></p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>一开始看题，很简单嘛，dfs走起，算出每个点的X，加到数组里面就完事了，而且树的结点数介于 1 和 1000 之间，开个<code>vector&lt;int&gt; res[2005]</code>即可</li><li>提交后发现不对劲，原来还有一个条件：如果两个结点位置相同，则首先报告的结点值较小。</li><li>想了一想，直觉判断一波，同一层（Y相等）最多存在2个点的X相等，那改成bfs就好了啊，层序遍历<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>     <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token keyword">auto</span> <span class="token punctuation">[</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span>nxt<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nxt<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">==</span>nx<span class="token operator">&amp;&amp;</span>y<span class="token operator">==</span>ny<span class="token punctuation">)</span> <span class="token punctuation">{</span>     q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ans<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">,</span>nxt<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ans<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">,</span>nxt<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nxt<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nxt<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> ans<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>交上去还是不对，想了想，原来是bfs有点小问题，同一层两个X相等的点并不一定相邻，中间可能隔了空节点。所以要保证队列中的节点不是空节点</li><li>加完特判之后还是不对，再看了看错了的那组数据，原来同一层可以存在多个（&gt;2）点的X相等，于是滚去看题解了~</li><li>最后在评论区发现一种比较简洁的<a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/comments/364408" target="_blank" rel="noopener">解法</a>，<code>map</code>里面套一个<code>set</code>，当然<code>map</code>也可以换成<code>array</code>。关键是<code>set</code>中存储的元素是由<code>node-&gt;val</code>与<code>y</code>拼接而成的，起到了先按<code>y</code>升序排序，再按<code>val</code>升序排序的作用，十分巧妙且运行速度很快。</li><li>最终代码：<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> m<span class="token punctuation">;</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">verticalTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>     queue<span class="token operator">&lt;</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span>TreeNode<span class="token operator">*</span><span class="token operator">>></span> q<span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>root<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>         m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">10000</span><span class="token operator">+</span>cur<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>         q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> each<span class="token operator">:</span>m<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> y<span class="token operator">:</span>each<span class="token punctuation">.</span>second<span class="token punctuation">)</span>             tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> ans<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.28 Notes</title>
      <link href="/2020/06/28/2020/6-28/"/>
      <url>/2020/06/28/2020/6-28/</url>
      
        <content type="html"><![CDATA[<h1 id="6-22-6-28-Learning-Notes"><a href="#6-22-6-28-Learning-Notes" class="headerlink" title="6.22-6.28 Learning Notes"></a>6.22-6.28 Learning Notes</h1><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h1 id="MST"><a href="#MST" class="headerlink" title="MST"></a><a href="https://leetcode-cn.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/" target="_blank" rel="noopener">MST</a></h1><p>请你找到给定图中最小生成树的所有关键边和伪关键边。如果最小生成树中删去某条边，会导致最小生成树的权值和增加，那么我们就说它是一条关键边。伪关键边则是可能会出现在某些最小生成树中但不会出现在所有最小生成树中的边。</p><p>题目数据范围很小，可以暴力判断每条边是关键边/伪关键边/其他的。</p><p>[<a href="https://leetcode-cn.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/solution/shan-chu-bian-yu-jia-ru-bian-zui-xiao-sheng-cheng-/" target="_blank" rel="noopener">参考题解</a></p><ol><li>先求MST。</li><li>对于原图中的每条边：<ol><li>如果边在MST中，计算去掉该边后的MST权值，如果比原来的大，那么当前边是伪关键边；如果相等，那么它是关键边。</li><li>如果边不在MST中，计算强制加入当前边后的MST权值，如果相等，则当前边是伪关键边。</li></ol></li></ol><a id="more"></a><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">class</span> <span class="token class-name">Graph</span>    <span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">struct</span> Edge        <span class="token punctuation">{</span>            <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>            <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span> e<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> inmst<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Edge a<span class="token punctuation">,</span> Edge b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>w <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>size<span class="token punctuation">;</span>            e<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> u<span class="token punctuation">;</span>            e<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>            e<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>            e<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            inmst<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Graph G<span class="token punctuation">;</span>    <span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> xx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> yy <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">!=</span> yy<span class="token punctuation">)</span>            fa<span class="token punctuation">[</span>xx<span class="token punctuation">]</span> <span class="token operator">=</span> yy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">include_mst_weight</span><span class="token punctuation">(</span><span class="token keyword">int</span> inc<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mstw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>inc<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>inc<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>inc<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">combine</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            mstw <span class="token operator">+</span><span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> inc<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> u <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">combine</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                mstw <span class="token operator">+</span><span class="token operator">=</span> w<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> n<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>            mstw <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>        <span class="token keyword">return</span> mstw<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">exclude_mst_weight</span><span class="token punctuation">(</span><span class="token keyword">int</span> exc<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mstw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> exc<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> u <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">combine</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                mstw <span class="token operator">+</span><span class="token operator">=</span> w<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> n<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>            mstw <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>        <span class="token keyword">return</span> mstw<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">findCriticalAndPseudoCriticalEdges</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>edges<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> each <span class="token operator">:</span> edges<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            G<span class="token punctuation">.</span><span class="token function">addedge</span><span class="token punctuation">(</span>each<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> each<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> each<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        G<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mstw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> u <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">combine</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>                mstw <span class="token operator">+</span><span class="token operator">=</span> w<span class="token punctuation">;</span>                G<span class="token punctuation">.</span>inmst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> n<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> key_edge<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fkey_edge<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">.</span>inmst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> new_mstw <span class="token operator">=</span> <span class="token function">exclude_mst_weight</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>new_mstw <span class="token operator">></span> mstw<span class="token punctuation">)</span>                    key_edge<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    fkey_edge<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> new_mstw <span class="token operator">=</span> <span class="token function">include_mst_weight</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>new_mstw <span class="token operator">==</span> mstw<span class="token punctuation">)</span>                    fkey_edge<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>key_edge<span class="token punctuation">,</span> fkey_edge<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-deployment</title>
      <link href="/2020/06/22/2020/hexo-deployment/"/>
      <url>/2020/06/22/2020/hexo-deployment/</url>
      
        <content type="html"><![CDATA[<h1 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h1><p>官方教程有点问题，因为现在Github Pages只能部署在master分支上，所以源文件(markdown/theme)要放在其他分支(hexo)，使用Travis CL或者其他CL自动化部署时，要将目标分支<code>target_branch</code>设为<code>master</code>。</p><pre class=" language-yml"><code class="language-yml">sudo: falselanguage: node_jsnode_js:  - 10 # use nodejs v10 LTScache: npmbranches:  only:    - hexo  # build on hexo branchscript:  - hexo generate # generate static filesdeploy:  provider: pages  skip-cleanup: true  github-token: $GH_TOKEN  keep-history: true  on:    all_branches: true # solve a permission problem  target_branch: master   local-dir: public</code></pre><h1 id="文章截断"><a href="#文章截断" class="headerlink" title="文章截断"></a>文章截断</h1><p>似乎没有自动截断的功能，需要手动截断，在截断的地方加<code>&lt;!-- more --&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.7 Notes</title>
      <link href="/2020/06/07/2020/6-7/"/>
      <url>/2020/06/07/2020/6-7/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-6-7-Learning-Notes"><a href="#6-1-6-7-Learning-Notes" class="headerlink" title="6.1-6.7 Learning Notes"></a>6.1-6.7 Learning Notes</h1><h1 id="TXAD-2020"><a href="#TXAD-2020" class="headerlink" title="TXAD 2020"></a>TXAD 2020</h1><ul><li>lightgbm for GBDT(Gradient Boosting Decision Tree) <ul><li><a href="https://lightgbm.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://lightgbm.readthedocs.io/en/latest/index.html</a></li><li><a href="https://blog.csdn.net/u012735708/article/details/83749703" target="_blank" rel="noopener">https://blog.csdn.net/u012735708/article/details/83749703</a></li><li><a href="https://www.cnblogs.com/bjwu/p/9307344.html" target="_blank" rel="noopener">https://www.cnblogs.com/bjwu/p/9307344.html</a></li></ul></li><li>Embedding<ul><li>tf-idf<ul><li><a href="https://zhuanlan.zhihu.com/p/31197209" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31197209</a></li><li><a href="https://scikit-learn.org/stable/modules/feature_extraction.html#text-feature-extraction" target="_blank" rel="noopener">https://scikit-learn.org/stable/modules/feature_extraction.html#text-feature-extraction</a></li><li><a href="https://blog.csdn.net/Eastmount/article/details/50323063" target="_blank" rel="noopener">https://blog.csdn.net/Eastmount/article/details/50323063</a></li></ul></li><li>Word2vec<ul><li><a href="https://zhuanlan.zhihu.com/p/26306795" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26306795</a></li><li><a href="https://www.tensorflow.org/tutorials/text/word_embeddings" target="_blank" rel="noopener">https://www.tensorflow.org/tutorials/text/word_embeddings</a></li><li><a href="https://zhuanlan.zhihu.com/p/53194407" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/53194407</a></li><li><a href="https://zhuanlan.zhihu.com/p/46016518" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/46016518</a></li><li><a href="https://www.zhihu.com/question/32275069" target="_blank" rel="noopener">https://www.zhihu.com/question/32275069</a></li></ul></li></ul></li><li>Transformer<ul><li><a href="https://github.com/huggingface/transformers#installation" target="_blank" rel="noopener">https://github.com/huggingface/transformers#installation</a></li><li><a href="https://jalammar.github.io/illustrated-transformer/" target="_blank" rel="noopener">https://jalammar.github.io/illustrated-transformer/</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.24 Notes</title>
      <link href="/2020/05/24/2020/5-24/"/>
      <url>/2020/05/24/2020/5-24/</url>
      
        <content type="html"><![CDATA[<h1 id="5-18-5-24-Learning-Notes"><a href="#5-18-5-24-Learning-Notes" class="headerlink" title="5.18-5.24 Learning Notes"></a>5.18-5.24 Learning Notes</h1><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h1 id="状态压缩-前缀和-哈希表"><a href="#状态压缩-前缀和-哈希表" class="headerlink" title="状态压缩+前缀和+哈希表"></a>状态压缩+前缀和+哈希表</h1><p>好题！  </p><p>给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 ‘a’，’e’，’i’，’o’，’u’ ，在子字符串中都恰好出现了偶数次。</p><h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><p>一开始我是暴力搜索的，从[0,len-1]出发，每次让左端点加一或者右端点减一，显然这样做会超时</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> vowel<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> vowel<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token operator">--</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">find</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>count<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> vowel<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token operator">--</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">find</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>count<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">findTheLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> each <span class="token operator">:</span> s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>each <span class="token operator">==</span> vowel<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token operator">++</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>看了下提示，要用到bitmask和prefix sum，再结合题目“恰好出现了偶数次”的提示，不难想到要用异或来表示字符串的状态。</p><p>那就用每一位分别表示每一个元音字母出现的次数呗，<code>1</code>表示出现次数为奇数，<code>0</code>表示出现次数为偶数</p><p>前缀和是这样推想出来的：</p><pre><code>aaee 00000 aee 00001a    00001sum[&quot;aee&quot;]=sum[&quot;aaee&quot;]^sum[&quot;a&quot;]sum[1,3]=sum[3]^sum[0]类比sum[1,3]=sum[3]-sum[0]，用前缀和求[1,3]的区间和那现在我们要求：sum[1,3]=0即sum[3]^sum[0]=0根据异或的交换律sum[3]^0=sum[0]等价于sum[3]=sum[0]</code></pre><p>于是问题转化为：在所有<code>[l,r]</code>区间中，求满足<code>sum[r]=sum[l-1]</code>的最大区间。</p><p>后面我没有想到哈希表的方法，暴力应该过不了，所以偷偷看了评论</p><p>原理其实很简单：  </p><ul><li>如果当前的状态没有出现过，就把它加到哈希表里面</li><li>如果出现过，就计算区间长度，并维护<code>ans</code>最大区间长度</li></ul><p>状态只有<code>1&lt;&lt;5=32</code>个，所以可用数组来代替<code>unordered_map</code></p><p>两个易错点：</p><ol><li>哈希表里面记录的是<code>sum[l-1]</code>第一次出现的位置，计算区间长度时需要注意<code>len=r-hash_map[state]</code> 对应 <code>len=r-(l-1)=r-l+1</code></li><li>边界问题，如果最长字符串是从下标<code>0</code>开始，即<code>l=0</code>，<code>l-1=-1</code>，所以初始化<code>m[1...31]=-2</code>，<code>-2</code>表示状态还未出现过，<code>m[0]=-1</code>，表示空字符串对应的状态为<code>00000</code></li></ol><p>这真的是一道middle题吗？建议大家认真消化知识点</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> vowel<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">findTheLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>vowel<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    state<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>j<span class="token operator">-</span>m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                m<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="CSAPP"><a href="#CSAPP" class="headerlink" title="CSAPP"></a>CSAPP</h1><h1 id="Floating-Point"><a href="#Floating-Point" class="headerlink" title="Floating Point"></a>Floating Point</h1><p>二进制浮点数表示:<br>$$ \sum^i_{k=-j}b_k*2^k $$<br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/5-24-2020-05-21-09-28-03" alt="5-24-2020-05-21-09-28-03"></p><ul><li>$&gt;&gt;1=/2$</li><li>$&lt;&lt;1=*2$</li></ul><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a>Limitation</h2><ul><li>Can only exactly represent numbers of the form $x/2^k$</li><li>小数部分会占用整数部分的位数（在位数有限情况下）</li></ul><h2 id="IEEE-Standard-754"><a href="#IEEE-Standard-754" class="headerlink" title="IEEE Standard 754"></a>IEEE Standard 754</h2><ul><li>Numerical Form:<br>$$ (-1)^sM2^E $$<ul><li>$s$ is sign bit</li><li>$M\in[1.0,2.0)$</li><li>Exponent $E$</li></ul></li><li>Encoding <ul><li>$s|exp(E)|frac(M)$</li><li><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/5-24-2020-05-21-09-36-57" alt="5-24-2020-05-21-09-36-57"></li></ul></li><li>e.g.<ul><li><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/5-24-2020-05-21-10-32-09" alt="5-24-2020-05-21-10-32-09"></li></ul></li><li>Rounding<ul><li>Round to nearest even number: $1.4\approx1$, $1.5\approx2$</li><li><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/5-24-2020-05-21-10-46-09" alt="5-24-2020-05-21-10-46-09"></li></ul></li><li>Violates associativity<ul><li>Overflow and inexactness of rounding</li><li>$(3.14+1e10)-1e10=10$, $3.14+(1e10-1e10)=3.14$</li></ul></li><li>Violates distributivity</li><li><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/5-24-2020-05-21-10-53-27" alt="5-24-2020-05-21-10-53-27"></li></ul><h2 id="Floating-Point-in-C"><a href="#Floating-Point-in-C" class="headerlink" title="Floating Point in C"></a>Floating Point in C</h2><ul><li>Conversions<ul><li>double/float-&gt;int<ul><li>Like rounding towards 0</li><li>double的整数部分比int的多</li></ul></li><li>int-&gt;double exact</li><li>int-&gt;float rounding</li></ul></li></ul><h2 id="Remember-Floating-Point-is-not-the-Same-as-Real-Number"><a href="#Remember-Floating-Point-is-not-the-Same-as-Real-Number" class="headerlink" title="Remember: Floating Point is not the Same as Real Number"></a>Remember: Floating Point is not the Same as Real Number</h2><h1 id="Google-Kick-Start-Round-C"><a href="#Google-Kick-Start-Round-C" class="headerlink" title="Google Kick Start Round C"></a>Google Kick Start Round C</h1><p>这场错过了，没有打实况。</p><h1 id="2-Stable-Wall"><a href="#2-Stable-Wall" class="headerlink" title="2. Stable Wall"></a>2. Stable Wall</h1><p>一道有点像俄罗斯方块的题目，已知俄罗斯方块游戏结束时的图案，求各个块落下的顺序<br>Apollo is playing a game involving polyominos. A polyomino is a shape made by joining together one or more squares edge to edge to form a single connected shape. The game involves combining N polyominos into a single rectangular shape without any holes. Each polyomino is labeled with a unique character from A to Z.</p><p>Apollo has finished the game and created a rectangular wall containing R rows and C columns. He took a picture and sent it to his friend Selene. Selene likes pictures of walls, but she likes them even more if they are stable walls. A wall is stable if it can be created by adding polyominos one at a time to the wall so that each polyomino is always supported. A polyomino is supported if each of its squares is either on the ground, or has another square below it.</p><p>Apollo would like to check if his wall is stable and if it is, prove that fact to Selene by telling her the order in which he added the polyominos.</p><h2 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h2><p>我的想法是模拟+dfs：</p><ul><li>维护一个集合$S={当前可以放下的形状}$</li><li>dfs遍历$S$并维护<code>supported</code>数组（表示合法的放置位置）</li></ul><p>写了一个多小时，才把样例过了…，然而一个测试集都没过</p><h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>Google的题还是挺需要转化的，这题其实不需要模拟。</p><p>每一个小块的落下要求：</p><ol><li>它在底部</li><li>它的正下方已经有小块了</li></ol><p>所以对于<code>1~(n-1)</code>的列，上下两个小块之间存在约束关系。我们可以用有向图来存储这种约束关系。每一对的约束关系都满足的条件下，能否找到一个合法的遍历这个图的序列。<br>显然，当图中存在环时不合法：</p><pre><code>A&lt;--&gt;B要放A就要先放B要放B就要先放A于是都放不了</code></pre><p>用拓扑排序来判断有向图中有没有环，并得到拓扑序即为答案</p><h1 id="3-Perfect-Subarray"><a href="#3-Perfect-Subarray" class="headerlink" title="3. Perfect Subarray"></a>3. Perfect Subarray</h1><p>题意很简单，求一个数组中，子数组（数组中连续元素组成）的和为完全平方数的个数。</p><p>第一个测试集<code>N=1000</code>可以直接暴力判断，我学到了一个新函数<code>modf</code></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> f<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">modf</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span>    <span class="token operator">++</span>ans<span class="token punctuation">;</span></code></pre><p>第二个测试集<code>n=1e5</code>肯定不能暴力了，怎么办呢？<br>那就看题解吧，反正想不出来了</p><p>题解确实很巧妙：  </p><ul><li>注意到每个数组元素$A_i\in[-100,100]$，用类似于计数排序的方法，哈希表<code>m[x]</code>存储到当前元素为止，前缀和等于<code>x</code>的子数组个数</li><li>枚举的时候，第二层枚举可能的完全平方数，用逆向思维求$[1,i]$内以<code>A[i]</code>结尾的，和为完全平方数的子数组个数$[1,i]=[1,k]+[k+1,i]$。我们不知道有多少个$sum[k+1,i]=完全平方数$，但是我们知道$[1,k]=sum[1,i]-完全平方数$的个数</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> num_prefix_sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> minx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token punctuation">;</span>        cin <span class="token operator">>></span> res<span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> res<span class="token punctuation">;</span>        minx <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minx<span class="token punctuation">,</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    num_prefix_sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> minx<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num_prefix_sum<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>                ans <span class="token operator">+</span><span class="token operator">=</span> num_prefix_sum<span class="token punctuation">[</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num_prefix_sum<span class="token punctuation">[</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h1><p>来体验一下打CF的感觉</p><h1 id="Round-643-div2"><a href="#Round-643-div2" class="headerlink" title="Round 643 div2"></a>Round 643 div2</h1><h1 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a><a href="https://codeforces.com/contest/1355/problem/C" target="_blank" rel="noopener">组合数学</a></h1><p><a href="https://blog.csdn.net/Fiveneves/article/details/106294338" target="_blank" rel="noopener">https://blog.csdn.net/Fiveneves/article/details/106294338</a></p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/5-24-2020-05-24-09-39-09" alt="5-24-2020-05-24-09-39-09"></p><h1 id="Round-644-div3"><a href="#Round-644-div3" class="headerlink" title="Round 644 div3"></a>Round 644 div3</h1><p>Polycarp wants to buy exactly n shovels. The shop sells packages with shovels. The store has k types of packages: the package of the i-th type consists of exactly i shovels (1≤i≤k). The store has an infinite number of packages of each type.</p><p>Polycarp wants to choose one type of packages and then buy several (one or more) packages of this type. What is the smallest number of packages Polycarp will have to buy to get exactly n shovels?</p><p>For example, if n=8 and k=7, then Polycarp will buy 2 packages of 4 shovels.</p><p>Help Polycarp find the minimum number of packages that he needs to buy, given that he:</p><p>will buy exactly n shovels in total;<br>the sizes of all packages he will buy are all the same and the number of shovels in each package is an integer from 1 to k, inclusive.</p><p>题意还是很简单的：从$[1,k]$中找出最大的<code>x</code>，使$n%x==0$，$ans=n/x$</p><p>但是我卡了很久也没有做出来</p><h2 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h2><p>找一个数的因数嘛，我就想到用质数表了，$\sqrt{1e9}\approx31700$范围也不大，算法伪代码如下：</p><pre><code>for prime in [2,sqrt(n)]:    if n%prime==0 and n/prime&lt;=k:        return prime</code></pre><p>枚举$n$的质因子，找到最小的满足条件的质因子就是答案了</p><p>但是这里其实有不少问题:</p><ol><li>这个满足条件的质因子可能大于$\sqrt{n}$</li><li>答案不一定是一个质数</li></ol><h2 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxdiv<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> n <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>遍历$[1,\sqrt{n}]$，找$[1,\sqrt{n}]$的<code>ans</code>和$(\sqrt{n},n]$范围内的<code>ans</code>：</p><ol><li>如果<code>i</code>是<code>ans</code>，我们找的是最小的<code>ans</code>，同时需要满足每一份的大小<code>n/i&lt;=k</code></li><li>如果<code>i</code>是每一份的大小<code>n/ans</code>，<code>i=n/ans&lt;=k</code>，份数<code>ans=n/i</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> CSAPP </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Codeforces </tag>
            
            <tag> Google Kick Start </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.17 Notes</title>
      <link href="/2020/05/17/2020/5-17/"/>
      <url>/2020/05/17/2020/5-17/</url>
      
        <content type="html"><![CDATA[<h1 id="5-11-5-17-Learning-Notes"><a href="#5-11-5-17-Learning-Notes" class="headerlink" title="5.11-5.17 Learning Notes"></a>5.11-5.17 Learning Notes</h1><h1 id="CART"><a href="#CART" class="headerlink" title="CART"></a>CART</h1><p>CSC1001 project<br>CART分类，预测app的Rating</p><p>实现CART过程中犯了不少错误</p><h2 id="100-准确率"><a href="#100-准确率" class="headerlink" title="100%准确率"></a>100%准确率</h2><p>把Rating放到特征列里面，用测试集测试的时候还能偷偷用上测试集中Rating的数据，完美！</p><h2 id="Gini-Index计算"><a href="#Gini-Index计算" class="headerlink" title="Gini Index计算"></a>Gini Index计算</h2><p>通俗来说，Gini Index是描述一堆数据中对目标列（Rating）的预测一致性</p><p>$$ GiniIndex(D,a)=\sum^V_{v=1}\frac{|D^V|}{|D|}Gini(D^v) $$<br>$$ Gini(D)=1-\sum^K_{k=1}(\frac{|C_k|}{|D|})^2 $$<br>where <code>a</code> is the selected feature, <code>V</code> is the number of splitting in dataset<code>D</code>, <code>K</code> is the number of labels. <code>C_k</code> is the size of the kth label in dataset<code>D</code>.</p><p>In our model, <code>V=2</code> and <code>K=2</code> because dataset<code>D</code> is split into 2 parts and there are only 2 labels which are <code>Rating&gt;4.5</code> and <code>Rating&lt;=4.5</code>.<br>$$ Gini_index(D,a)=pGini(D^1)+(1-p)Gini(D^2) $$<br>$$ Gini(D)=1-p’^2-(1-p’)^2 $$<br>$$ p=\frac{|D^1|}{|D|} $$<br>$$ p’=\frac{|C^1|}{|D|} $$</p><h1 id="华为软挑2020总结"><a href="#华为软挑2020总结" class="headerlink" title="华为软挑2020总结"></a>华为软挑2020总结</h1><p>我离决赛就差了一点实力哈哈，今年的辣鸡题目和命题组砖家已经给了我机会了</p><h2 id="double精度问题"><a href="#double精度问题" class="headerlink" title="double精度问题"></a>double精度问题</h2><p>本质上是二进制与十进制转换过程中的误差</p><ul><li><a href="https://www.zhihu.com/question/42024389" target="_blank" rel="noopener">https://www.zhihu.com/question/42024389</a></li><li><a href="https://www.zhihu.com/question/27516568" target="_blank" rel="noopener">https://www.zhihu.com/question/27516568</a></li></ul><p>复赛B榜赛题中，明确金额的小数部分不超过两位，因此应该让金额*100，将其转换成整数</p><h2 id="比赛回顾"><a href="#比赛回顾" class="headerlink" title="比赛回顾"></a>比赛回顾</h2><p>上分全靠看大佬思路分享</p><ul><li><p>初赛</p><ul><li>每次搜索跳过比当前点小的点，这样做就不需要判重，之前我一直在想用hash判断重复的环…</li><li>离散化ID，sort+unique+unordered_map（虽然初赛数据只有5万个点有用）</li><li>6+1 （dfs正向6步+负向1步）</li><li>3邻域剪枝，标记dfs负向3步能到达的所有点</li><li>fread+fwrite （第一次用）</li><li>向量改数组存边 <code>vector&lt;int&gt; GUV[MAX_NODE]</code>–&gt;<code>GUV[MAX_NODE][MAX_OUT_DEGREE]</code></li></ul></li><li><p>复赛</p></li><li><p>比初赛多了金额约束</p><ul><li>4+3 一直听说过4+3，但是知道看了<a href="https://zhuanlan.zhihu.com/p/136785097才会实现" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/136785097才会实现</a></li><li>拓扑排序删去入度/出度为0的点，虽然不知道对线上数据有没有效果</li><li>用ans3存长度为3的环，ans4存…..，<code>int *ans[5] = {ans3, ans4, ans5, ans6, ans7};</code>存它们的头指针</li><li>部分函数参数改成全局变量</li><li>多线程部分是队友最后几天写的，我还不会…</li></ul></li></ul><h2 id="为啥最后程序跑的还是这么慢呢？"><a href="#为啥最后程序跑的还是这么慢呢？" class="headerlink" title="为啥最后程序跑的还是这么慢呢？"></a>为啥最后程序跑的还是这么慢呢？</h2><p>前排大佬开源：</p><ul><li><a href="https://github.com/CodeCraft2020/CodeCraft2020" target="_blank" rel="noopener">https://github.com/CodeCraft2020/CodeCraft2020</a></li><li><a href="https://github.com/yoghurt-lee/HuaWeiCodeCraft2020" target="_blank" rel="noopener">https://github.com/yoghurt-lee/HuaWeiCodeCraft2020</a></li><li><a href="https://github.com/WavenZ/CodeCraft2020" target="_blank" rel="noopener">https://github.com/WavenZ/CodeCraft2020</a></li><li><a href="https://github.com/cxq80803716/2020codecraft" target="_blank" rel="noopener">https://github.com/cxq80803716/2020codecraft</a></li></ul><p>原因猜想：</p><ul><li>dfs递归改迭代</li><li>多线程负载均衡</li><li>除法改乘法，不用double: <code>0.2&lt;=nxtc/nowc&lt;=3</code>–&gt;<code>nowc&lt;=5*nxtc &amp;&amp; nxtc&lt;=3*nowc</code></li><li>memcpy代替数组赋值</li></ul><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><ul><li><a href="https://blog.csdn.net/zhangruijerry/article/details/105268377" target="_blank" rel="noopener">https://blog.csdn.net/zhangruijerry/article/details/105268377</a></li><li><a href="https://zhuanlan.zhihu.com/p/125764650" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/125764650</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.10 Notes</title>
      <link href="/2020/05/10/2020/5-10/"/>
      <url>/2020/05/10/2020/5-10/</url>
      
        <content type="html"><![CDATA[<h1 id="5-4-5-10-Learning-Notes"><a href="#5-4-5-10-Learning-Notes" class="headerlink" title="5.4-5.10 Learning Notes"></a>5.4-5.10 Learning Notes</h1><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h1 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h1><p>第一题求能否到达终点，第二题求到达终点的最小步数<br>两题都可以用贪心做</p><h2 id="I"><a href="#I" class="headerlink" title="I"></a><a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">I</a></h2><p><a href="https://leetcode-cn.com/problems/jump-game/solution/55-by-ikaruga/" target="_blank" rel="noopener">题解</a>  </p><ol><li>如果某一个作为起跳点的格子可以跳跃的距离是 3，那么表示后面3 个格子都可以作为 起跳点。</li><li>可以对每一个能作为起跳点的格子都尝试跳一次，把能跳到最远的距离不断更新。</li><li>如果可以一直跳到最后，就成功了。<h2 id="II"><a href="#II" class="headerlink" title="II"></a><a href="https://leetcode-cn.com/problems/jump-game-ii/" target="_blank" rel="noopener">II</a></h2>我的代码：  </li></ol><ul><li>使用<code>cnt</code>数组记录跳到某一个位置所需的最小步数<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> cnt<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> j<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>              cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          r <span class="token operator">=</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> n<span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> cnt<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><p>精简后的代码（题解）：  </p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            r <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> end<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                end <span class="token operator">=</span> r<span class="token punctuation">;</span>                <span class="token operator">++</span>step<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> step<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="最低票价"><a href="#最低票价" class="headerlink" title="最低票价"></a><a href="https://leetcode-cn.com/problems/minimum-cost-for-tickets/" target="_blank" rel="noopener">最低票价</a></h1><p>初始思路：<br><code>dp[i]</code>表示完成前<code>i</code>个旅行计划所需要的最低消费<br>$dp[i]=\min{f[j]+costs[k]}$, $k=0,1,2$ ,$days[j]+t[k]&gt;=days[i]$<br>$t[3]={1,7,30}$</p><p>这样定义dp方程的话是有后效性的。因为第<code>i</code>个旅行计划之前的消费都是确定的，有点类似贪心，没有考虑到当前还剩多少天的通行证。</p><p>正解：<br><code>dp[i]</code>表示前<code>i</code>天所需要的最低消费  </p><ul><li>如果当天不在计划内$dp[i]=dp[i-1]$</li><li>如果在计划内$dp[i]=\min{dp[i-1]+costs[0],dp[i-7]+costs[1],dp[i-30]+costs[2]}$</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mincostTickets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> days<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> costs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ticket<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>days<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>days<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>days<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dp<span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>costs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token number">-7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>costs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token number">-30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>costs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>days<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.3 Notes</title>
      <link href="/2020/05/03/2020/5-3/"/>
      <url>/2020/05/03/2020/5-3/</url>
      
        <content type="html"><![CDATA[<h1 id="4-20-5-3-Learning-Notes"><a href="#4-20-5-3-Learning-Notes" class="headerlink" title="4.20-5.3 Learning Notes"></a>4.20-5.3 Learning Notes</h1><h1 id="Huawei-Sofeware-Competition"><a href="#Huawei-Sofeware-Competition" class="headerlink" title="Huawei Sofeware Competition"></a>Huawei Sofeware Competition</h1><h2 id="First-Round"><a href="#First-Round" class="headerlink" title="First Round"></a>First Round</h2><p>成功水进复赛<br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/5-3-2020-05-01-12-58-52" alt="5-3-2020-05-01-12-58-52"></p><p>思路：</p><ul><li>三邻域剪枝</li><li>6+1</li><li>向量改数组</li></ul><p>感谢：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/125764650" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/125764650</a></li><li><a href="https://blog.csdn.net/zhangruijerry/article/details/105268377" target="_blank" rel="noopener">https://blog.csdn.net/zhangruijerry/article/details/105268377</a></li><li><a href="https://github.com/byl0561/HWcode2020-TestData" target="_blank" rel="noopener">https://github.com/byl0561/HWcode2020-TestData</a><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2></li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">auto</span> time_start <span class="token operator">=</span> chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #define LINUXOUTPUT</span><span class="token macro property">#<span class="token directive keyword">define</span> OUTPUT</span><span class="token macro property">#<span class="token directive keyword">define</span> TEST</span>string input_path <span class="token operator">=</span> <span class="token string">"/data/test_data.txt"</span><span class="token punctuation">;</span>string output_path <span class="token operator">=</span> <span class="token string">"/projects/student/result.txt"</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> TEST</span>string test_scale <span class="token operator">=</span> <span class="token string">"1004812"</span><span class="token punctuation">;</span>string test_input_path_s <span class="token operator">=</span> <span class="token string">"./data/"</span> <span class="token operator">+</span> test_scale <span class="token operator">+</span> <span class="token string">"/test_data.txt"</span><span class="token punctuation">;</span>string test_output_path_s <span class="token operator">=</span> test_input_path_s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> test_input_path_s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/output.txt"</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">280005</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> GUV<span class="token punctuation">[</span>INF<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> GVU<span class="token punctuation">[</span>INF<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> visited<span class="token punctuation">[</span>INF<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token punctuation">[</span>INF<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">></span> ans_t<span class="token punctuation">;</span><span class="token keyword">int</span> ans_size<span class="token punctuation">;</span>ans_t ans<span class="token punctuation">[</span><span class="token number">4000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> u_max<span class="token punctuation">;</span><span class="token keyword">namespace</span> IO<span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXSIZE <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> gc() (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, stdin), p1 == p2) ? EOF : *p1++)</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    int16_t c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> c<span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">rd_to_line_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int16_t c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        c <span class="token operator">=</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> pbuf<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>pp <span class="token operator">=</span> pbuf<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token operator">-</span> pbuf <span class="token operator">==</span> MAXSIZE<span class="token punctuation">)</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span>pbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> MAXSIZE<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pp <span class="token operator">=</span> pbuf<span class="token punctuation">;</span>    <span class="token operator">*</span>pp<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> sta<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        sta<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span>        <span class="token function">push</span><span class="token punctuation">(</span>sta<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// namespace IO</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span>test_input_path_s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token keyword">int</span> ch<span class="token punctuation">;</span>    <span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        u <span class="token operator">=</span> IO<span class="token operator">::</span><span class="token function">rd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> IO<span class="token operator">::</span><span class="token function">rd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IO<span class="token operator">::</span><span class="token function">rd_to_line_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUV<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>GUV<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        GVU<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>GVU<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>        u_max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>u_max<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> TEST</span>    <span class="token keyword">auto</span> input_time_end <span class="token operator">=</span> chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> input_time_diff <span class="token operator">=</span> input_time_end <span class="token operator">-</span> time_start<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"prehandle cost: "</span> <span class="token operator">&lt;&lt;</span> chrono<span class="token operator">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> milli<span class="token operator">></span><span class="token punctuation">(</span>input_time_diff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>ans_t <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ans_t <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">++</span>now<span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">&lt;</span> y<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">flag_reverse_dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> GVU<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v <span class="token operator">=</span> GVU<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">></span> target<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            flag<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token function">flag_reverse_dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">,</span> ans_t <span class="token operator">&amp;</span>path<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> GUV<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v <span class="token operator">=</span> GUV<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span>target <span class="token operator">&amp;&amp;</span> visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                path<span class="token punctuation">[</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>                ans<span class="token punctuation">[</span><span class="token operator">++</span>ans_size<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> target <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span>target <span class="token operator">&amp;&amp;</span> depth <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> depth <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            path<span class="token punctuation">[</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ans_t path<span class="token punctuation">;</span>    <span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> target<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> u_max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUV<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">flag_reverse_dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> GVU<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            flag<span class="token punctuation">[</span>GVU<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>i<span class="token punctuation">;</span>        path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">output_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span>test_output_path_s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">+</span> ans_size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> TEST</span>    <span class="token keyword">auto</span> output_time_start <span class="token operator">=</span> chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ans_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            IO<span class="token operator">::</span><span class="token function">write</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IO<span class="token operator">::</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        IO<span class="token operator">::</span><span class="token function">write</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IO<span class="token operator">::</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>IO<span class="token operator">::</span>pbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> IO<span class="token operator">::</span>pp <span class="token operator">-</span> IO<span class="token operator">::</span>pbuf<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> LINUXOUTPUT</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"/dev/tty"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"CON"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> TEST</span>    <span class="token keyword">auto</span> output_time_end <span class="token operator">=</span> chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> output_time_diff <span class="token operator">=</span> output_time_end <span class="token operator">-</span> output_time_start<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"output cost: "</span> <span class="token operator">&lt;&lt;</span> chrono<span class="token operator">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> milli<span class="token operator">></span><span class="token punctuation">(</span>output_time_diff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">output_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> TEST</span>    <span class="token keyword">auto</span> time_end <span class="token operator">=</span> chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> diff <span class="token operator">=</span> time_end <span class="token operator">-</span> time_start<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> LINUXOUTPUT</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"/dev/tty"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"CON"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ans size is %d\n"</span><span class="token punctuation">,</span> ans_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The program's speed: "</span> <span class="token operator">&lt;&lt;</span> chrono<span class="token operator">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> milli<span class="token operator">></span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>多看群信息</li><li>多上网找别人的思路</li><li>钻规则漏洞：开小号/探测数据（误）<h2 id="面向数据编程"><a href="#面向数据编程" class="headerlink" title="面向数据编程"></a><a href="https://github.com/justarandomstring/2020-Huawei-Code-Craft" target="_blank" rel="noopener">面向数据编程</a></h2></li></ul><h3 id="Level-1-计分数据只有一组"><a href="#Level-1-计分数据只有一组" class="headerlink" title="Level 1: 计分数据只有一组"></a>Level 1: 计分数据只有一组</h3><p>以下设 answer 表示找到的环数。</p><ul><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">assert</span><span class="token punctuation">(</span>answer <span class="token operator">></span> <span class="token number">2500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>提交后返回 Runtime Error。断定：线上存在环数不大于 2500000 的数据。</p></li><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">&lt;=</span> <span class="token number">2500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提交后分数不变。断定：环数不大于 2500000 的数据不计分。</p></li><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">></span> <span class="token number">2500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>多次提交，每次分数都不变。断定：对于一组数据，运行了多次，取最快的一次作为分数。</p></li><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">></span> <span class="token number">2500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span>answer <span class="token operator">-</span> <span class="token number">2500000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提交后返回 414。断定：某一组数据的答案除以 1000 为 2914。</p></li><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">2914</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sleep</span><span class="token punctuation">(</span>answer <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提交后返回 186。断定：上述数据的答案为 2914186。</p></li><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">></span> <span class="token number">2500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assert</span><span class="token punctuation">(</span>answer <span class="token operator">==</span> <span class="token number">2914186</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提交后正常返回。断定：线上计分的数据只有一组，且答案为 2914186。</p></li></ul><h3 id="Level-2-计分数据分布极不规律"><a href="#Level-2-计分数据分布极不规律" class="headerlink" title="Level 2: 计分数据分布极不规律"></a>Level 2: 计分数据分布极不规律</h3><p>以下设 src[i] 表示以 i 为起点的环数。</p><ul><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">==</span> <span class="token number">2914186</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max_src <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        max_src <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_src<span class="token punctuation">,</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sleep</span><span class="token punctuation">(</span>max_src <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提交后返回 26。表明存在一个点，以其为起点的环不少于 2914186 * 0.26 = 757688 个。</p></li><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">==</span> <span class="token number">2914186</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提交后返回 13。表明存在另外一个点，以其为起点的环不少于 2914186 * 0.13 = 378844 个。</p></li><li><p>使用类似的方法，可以得出还有另外一个点，以其为起点的环也不少于 378844 个。</p></li></ul><h3 id="Level-3-根据数据特点进行优化"><a href="#Level-3-根据数据特点进行优化" class="headerlink" title="Level 3: 根据数据特点进行优化"></a>Level 3: 根据数据特点进行优化</h3><ul><li><p>使用 Level 1 中介绍的方法，可以得出如下信息：线上的点数为 20W，其中出现在答案里的点数为 4.2W，出现在答案里的点的最大值为 49999。所以优化策略如下：读入时，直接忽略 &gt;= 5W 的节点。</p></li><li><p>使用 Level 2 中介绍的方法，得出：以 6000, 10000, 10001, 25123 这四个点为起点的环非常多，在给线程分配任务时可以特殊处理。</p></li><li><p>加入如下代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">==</span> <span class="token number">2914186</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max_src_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> max_src_i <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sleep</span><span class="token punctuation">(</span>max_src_i <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提交后返回 43。表明不存在满足“环中的最小值大于 44000”的环，所以枚举起点时只需要枚举到 44000。</p></li></ul><h3 id="Level-4-猜测数据生成规则"><a href="#Level-4-猜测数据生成规则" class="headerlink" title="Level 4: 猜测数据生成规则"></a>Level 4: 猜测数据生成规则</h3><p>下述 K12, K13 分别表示 12 个点、13 个点的有向完全图。容易知道，对于 K_n，其中长度为 m(3&lt;=m&lt;=n) 的环数为 C(n,m) * (m-1)!。</p><ul><li><p>使用 Level 2 中介绍的方法，得出：以 10000 为起点的环大约为 757688 个；以 6000, 10001 为起点的环大约为 378844 个。</p></li><li><p>观察到：设 1, 2, 3, …, 13 这 13 个点组成一个 K13，那么以 1 为起点的长度介于三和七之间的环的个数为 773652 个，这个数字和 757688 十分接近。同时可以发现，以 2 为起点的长度介于三和七之间的环的个数为 397100，这个数字和 378844 十分接近。由此猜测：10000, 10001, …, 10012 这 13 个点组成了一个 K13。经验证果然如此！</p></li><li><p>使用相同的做法可以发现，6000, 6001, …, 6011 这 12 个点组成了一个 K12，25123, 25124, …, 25134 这 12 个点也组成了一个 K12。</p></li><li><p>结合 Level 3 中的结论 “答案中最大的点为 49999”，猜测：大于等于 50000 的点连成一个 DAG 森林，没有环出现。</p></li><li><p>对于 K13，其中长度介于三和七之间的环的个数为 1477190。对于 K12，其中长度介于三和七之间的环的个数为 703538。所以仅仅这三个团的环数已经有 2884266 个，而总环数只有 2914186 个，也就是说除了这三个团，只有 29920 个环。这些环是很容易生成的，推测是使用了某种随机算法。</p></li></ul><p>综上：10000, 10001, …, 10012 这 13 个点组成了一个 K13，6000, 6001, …, 6011 这 12 个点组成了一个 K12，25123, 25124, …, 25134 这 12 个点也组成了一个 K12。其余的小于 50000 的点随机连边。大于等于 50000 的点连成 DAG 森林。</p><h1 id="Leetcode滑动窗口-map-multiset"><a href="#Leetcode滑动窗口-map-multiset" class="headerlink" title="Leetcode滑动窗口+map/multiset"></a><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/solution/longest-continuous-subarray-by-ikaruga/" target="_blank" rel="noopener">Leetcode滑动窗口+map/multiset</a></h1><h2 id="只有滑动窗口的代码"><a href="#只有滑动窗口的代码" class="headerlink" title="只有滑动窗口的代码"></a>只有滑动窗口的代码</h2><p>思路：<br>若<code>maxn-minx&gt;limit</code>，将滑动窗口左端点右移<br>否则扩大窗口，将右端点右移<br>答案就是最大的滑动窗口大小  </p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minx <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            minx <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxn <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                maxn <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                minx <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minx<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>maxn <span class="token operator">-</span> minx <span class="token operator">></span> limit<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token operator">++</span>len<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="map-multiset"><a href="#map-multiset" class="headerlink" title="+map/multiset"></a>+map/multiset</h2><p>上面的程序在每次滑动窗口右移的时候，都要重新计算滑动窗口中的最大值和最小值。<br>所以可以用map（红黑树）来维护滑动窗口中的最大值和最小值，右移的时候就删掉窗口左端点的值，扩大窗口的时候就插入右端点的值</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// insert</span>            <span class="token operator">++</span>m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// maxn-minx>limit</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>first<span class="token operator">-</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>first<span class="token operator">></span>limit<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// window right shift</span>                <span class="token operator">--</span>m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// calculate window's size</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.19 Notes</title>
      <link href="/2020/04/19/2020/4-19/"/>
      <url>/2020/04/19/2020/4-19/</url>
      
        <content type="html"><![CDATA[<h1 id="4-13-4-19-Learning-Notes"><a href="#4-13-4-19-Learning-Notes" class="headerlink" title="4.13-4.19 Learning Notes"></a>4.13-4.19 Learning Notes</h1><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h1 id="一道较难的dp题-鸡蛋掉落"><a href="#一道较难的dp题-鸡蛋掉落" class="headerlink" title="一道较难的dp题:鸡蛋掉落"></a><a href="https://leetcode-cn.com/problems/super-egg-drop/" target="_blank" rel="noopener">一道较难的dp题:鸡蛋掉落</a></h1><p><a href="https://leetcode-cn.com/problems/super-egg-drop/solution/ji-dan-diao-luo-by-leetcode-solution/" target="_blank" rel="noopener">官方题解写得很好</a></p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/4-19-2020-04-13-15-06-55" alt="4-19-2020-04-13-15-06-55"></p><h2 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h2><p><a href="https://leetcode-cn.com/problems/super-egg-drop/solution/ji-ben-dong-tai-gui-hua-jie-fa-by-labuladong/" target="_blank" rel="noopener">看这个题解一步步推导出dp方程</a></p><p>注意<code>dp</code>数组的初始化：</p><ul><li>0个蛋</li><li>1个蛋</li><li>0层楼</li><li>1层楼</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// init</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> K<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> K<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> K<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="dp-二分搜索"><a href="#dp-二分搜索" class="headerlink" title="dp+二分搜索"></a>dp+二分搜索</h2><p><a href="https://leetcode-cn.com/problems/super-egg-drop/solution/ji-ben-dong-tai-gui-hua-jie-fa-by-labuladong/" target="_blank" rel="noopener">还是这个题解</a><br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/4-19-2020-04-13-15-09-05" alt="4-19-2020-04-13-15-09-05"></p><p><a href="https://leetcode-cn.com/problems/super-egg-drop/solution/ji-dan-diao-luo-by-leetcode-solution/" target="_blank" rel="noopener">官方题解中的解释更科学</a><br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/4-19-2020-04-13-15-21-06" alt="4-19-2020-04-13-15-21-06">  </p><p>二分搜索出$X_0$后，$X_1=X_0+1$，最后我们要取$min{max(T_1(X_0),T_2(X_0)),max(T_1(X_1),T_2(X_1))}$<br>显然$T_1(X_0)&lt;=T_2(X_0)$，$T_1(X_1)&gt;T_2(X_1)$<br>所以最后取$min(T_2(X_0),T_1(X_1))$</p><p>因此我们可以把第三层的循环改成二分搜索求山谷值<code>valley</code>，二分搜索求山谷值是一个难点:  </p><p><a href="https://zhuanlan.zhihu.com/p/40579713" target="_blank" rel="noopener">浅谈二分的边界问题</a><br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/4-19-2020-04-13-15-12-53" alt="4-19-2020-04-13-15-12-53"><br>这里的中点要取靠右的中点<code>mid=(l+r+1)/2</code></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> K<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> le <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ri <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>le <span class="token operator">&lt;</span> ri<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取靠右的中点</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>le <span class="token operator">+</span> ri <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 表示能AK</span>            <span class="token comment" spellcheck="true">// 取等时也算不能AK</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> mid<span class="token punctuation">]</span><span class="token punctuation">)</span>                ri <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                le <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> le<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>le<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="dp-决策单调性"><a href="#dp-决策单调性" class="headerlink" title="dp+决策单调性"></a>dp+决策单调性</h2><p><a href="https://leetcode-cn.com/problems/super-egg-drop/solution/ji-dan-diao-luo-xiang-jie-by-shellbye/" target="_blank" rel="noopener">来自此题解</a><br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/4-19-2020-04-13-15-26-50" alt="4-19-2020-04-13-15-26-50"></p><p>k一定，n增大，$T_2(x)=dp(k,n-x)$向上移动，$T_1(x)=dp(k-1,x-1)$不动，每次只需要从上一个n得到的x出发即可。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> K<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> x<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="剧情触发时间"><a href="#剧情触发时间" class="headerlink" title="剧情触发时间"></a><a href="https://leetcode-cn.com/contest/season/2020-spring/problems/ju-qing-hong-fa-shi-jian/" target="_blank" rel="noopener">剧情触发时间</a></h1><p>在战略游戏中，玩家往往需要发展自己的势力来触发各种新的剧情。一个势力的主要属性有三种，分别是文明等级（C），资源储备（R）以及人口数量（H）。在游戏开始时（第 0 天），三种属性的值均为 0。</p><p>随着游戏进程的进行，每一天玩家的三种属性都会对应增加，我们用一个二维数组 increase 来表示每天的增加情况。这个二维数组的每个元素是一个长度为 3 的一维数组，例如 [[1,2,1],[3,4,2]] 表示第一天三种属性分别增加 1,2,1 而第二天分别增加 3,4,2。</p><p>所有剧情的触发条件也用一个二维数组 requirements 表示。这个二维数组的每个元素是一个长度为 3 的一维数组，对于某个剧情的触发条件 c[i], r[i], h[i]，如果当前 C &gt;= c[i] 且 R &gt;= r[i] 且 H &gt;= h[i] ，则剧情会被触发。</p><p>根据所给信息，请计算每个剧情的触发时间，并以一个数组返回。如果某个剧情不会被触发，则该剧情对应的触发时间为 -1 。</p><h2 id="当时的想法"><a href="#当时的想法" class="headerlink" title="当时的想法"></a>当时的想法</h2><p>当时比赛做题的时候，首先想到暴力做法：对于每一天的c,r,h,暴力检查是否满足某个条件</p><p>然后想优化暴力，如何快速的找到可能满足的条件<br>要不就用三个优先队列（最小堆）来维护条件吧，每次取他们的头部看看是否满足条件</p><p>写完发现样例过不去，问题就在于当前满足的条件不一定在三个优先队列的头部。用极端点的例子来解释：</p><pre><code>requirements=[[1,1e10,1e10],[1e10,1,1e10],[1e10,1e10,1],[2,2,2]]</code></pre><p>显然前三个条件是很难满足的，容易满足的第四个条件又不在队列头部</p><h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>我们应该去找，对于每一个条件的c,r,h,找到它们分别需要的最小天数，该条件所需的天数就是三个属性的所需最小天数的最大值</p><p>从另一个角度，即遍历每一个条件，c,r,h三个属性是相对独立的，它们需要的最小天数可以分别算出来，然后再取最大值</p><p>具体算法：<br>算出increase的前缀和，分别找到三个属性恰好满足条件的天数，取它们的最大值，就是当前剧情的触发时间</p><h1 id="Google-Code-Jam-Round-1A-2020"><a href="#Google-Code-Jam-Round-1A-2020" class="headerlink" title="Google Code Jam Round 1A 2020"></a>Google Code Jam Round 1A 2020</h1><h1 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Many terminals use asterisks * to signify “any string”, including the empty string. For example, when listing files matching BASH<em>, a terminal may list BASH, BASHER and BASHFUL. For *FUL, it may list BEAUTIFUL, AWFUL and BASHFUL. When listing B</em>L, BASHFUL, BEAUTIFUL and BULL may be listed.</p><p>In this problem, formally, a pattern is a string consisting of only uppercase English letters and asterisks (*), and a name is a string consisting of only uppercase English letters. A pattern p matches a name m if there is a way of replacing every asterisk in p with a (possibly empty) string to obtain m. Notice that each asterisk may be replaced by a different string.</p><p>Given N patterns, can you find a single name of at most 104 letters that matches all those patterns at once, or report that it cannot be done?</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我这题做了快两个小时，还没AC，心态崩了</p><p>解题关键是分析好题目描述和样例，再想一些样例出来证明自己的猜想<br>当时只想到了是最长前缀和后缀，但不会处理多个*的情况<br>被官方样例骗了，应该自己想一些的，特别是*数量不同的模式串的情况  </p><pre><code>*B*D*PPPPPP*ZZZZZZans=PPPPPPBDZZZZZZ</code></pre><p>可以发现，内部的*根本没有用，因为内部的模式串都可以用另一个模式串的*完全匹配<br>所以，我们只需要看头尾两个*外面的字符，判断第一个*前的前缀和最后一个*后的后缀即可</p><p>看来还是要先验证自己的想法，再进行编程，不然做多错多。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>字符串的题，还是用python切片爽</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    prefix <span class="token operator">=</span> <span class="token string">''</span>    suffix <span class="token operator">=</span> <span class="token string">''</span>    ans <span class="token operator">=</span> <span class="token string">''</span>    mid <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ans <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        now_prefix <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        now_suffix <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                mid <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        len_prefix <span class="token operator">=</span> min<span class="token punctuation">(</span>len<span class="token punctuation">(</span>now_prefix<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span>        len_suffix <span class="token operator">=</span> min<span class="token punctuation">(</span>len<span class="token punctuation">(</span>now_suffix<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> now_prefix<span class="token punctuation">[</span><span class="token punctuation">:</span>len_prefix<span class="token punctuation">]</span> <span class="token operator">==</span> prefix<span class="token punctuation">[</span><span class="token punctuation">:</span>len_prefix<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>now_prefix<span class="token punctuation">)</span> <span class="token operator">></span> len<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>                prefix <span class="token operator">=</span> now_prefix        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans <span class="token operator">=</span> <span class="token string">'*'</span>        <span class="token keyword">if</span> now_suffix<span class="token punctuation">[</span>len<span class="token punctuation">(</span>now_suffix<span class="token punctuation">)</span><span class="token operator">-</span>len_suffix<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> suffix<span class="token punctuation">[</span>len<span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token operator">-</span>len_suffix<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>now_suffix<span class="token punctuation">)</span> <span class="token operator">></span> len<span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">:</span>                suffix <span class="token operator">=</span> now_suffix        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans <span class="token operator">=</span> <span class="token string">'*'</span>    <span class="token keyword">if</span> ans <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> prefix<span class="token operator">+</span>mid<span class="token operator">+</span>suffix    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>T <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> T<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Case #{}: "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    solve<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="Pascal-Walk"><a href="#Pascal-Walk" class="headerlink" title="Pascal Walk"></a>Pascal Walk</h1><p>在杨辉三角上面走，从杨辉三角的顶部开始，使经过的数的和等于一个给定的值$N&lt;=10^9$，求该路径</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p><code>N</code>的范围这么大，肯定不是常规方法啊，绝对要用到数学性质</p><p>这题没多少时间想，当时想到了杨辉三角的一个重要性质：第<code>i</code>行所有数的和为$2^{i-1}$<br>可以对<code>N</code>进行二进制分解，看看要走哪些行才能得到<code>N</code></p><p>但是又不能只走这些行，中间不走的那些行，经过一次起码加1，怎么办呢？</p><p>反正当时比赛的时候没想出来，在那里画来画去想找规律</p><p><a href="https://www.bilibili.com/video/BV1tK4y1r7Hh?p=3" target="_blank" rel="noopener">思路来自</a><br>$2^{30}&gt;1e9$，那么用前30行（第三十行的和为<code>2^{29}</code>）肯定能够表示<code>N</code>了<br>从第一行开始，虽然(1,1)是必取的，但如果<code>n-=30</code>后，<code>n</code>的二进制最低位是<code>1</code>的话，是要在30行后补上一行的<br>默认每一行都不取，<code>n-=30</code>后，再看<code>n</code>的二进制每一位上是否为<code>1</code>，是的话就取该层，输出该层的位置，并且要在30行后面补上一行（只有一个1），不是的话就输出边上的位置</p><p>非常巧妙的一种方法，避免了枚举哪些行是不取的</p><h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 1\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    n <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> start_from_left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> extra_row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// row要从1开始</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start_from_left<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 1\n"</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start_from_left<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> row<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token operator">++</span>extra_row<span class="token punctuation">;</span>            start_from_left <span class="token operator">=</span> <span class="token operator">!</span>start_from_left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> extra_row <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start_from_left<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 1\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> caseNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> caseNum <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> caseNum<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d:\n"</span><span class="token punctuation">,</span> caseNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> dp </tag>
            
            <tag> Google Code Jam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.12 Notes</title>
      <link href="/2020/04/12/2020/4-12/"/>
      <url>/2020/04/12/2020/4-12/</url>
      
        <content type="html"><![CDATA[<h1 id="4-6-4-12-Learning-Notes"><a href="#4-6-4-12-Learning-Notes" class="headerlink" title="4.6-4.12 Learning Notes"></a>4.6-4.12 Learning Notes</h1><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h1 id="两种缓存算法"><a href="#两种缓存算法" class="headerlink" title="两种缓存算法"></a>两种缓存算法</h1><ul><li>LRU</li><li>LFU<h2 id="LRU-Least-Recently-Used"><a href="#LRU-Least-Recently-Used" class="headerlink" title="LRU: Least Recently Used"></a><a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">LRU: Least Recently Used</a></h2></li></ul><p>获取键 / 检查键是否存在<br>设置键<br>删除最先插入的键</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>既然要$O(1)$时间内完成，那肯定要用哈希表<br>只用哈希表只能实现<code>get(key)</code>功能，还要存储每个<code>key</code>的使用次数的话，就要加上双向链表<br>哈希表和双向链表应该怎么结合（套）在一起呢？</p><p><a href="https://leetcode-cn.com/problems/lru-cache/solution/lru-ce-lue-xiang-jie-he-shi-xian-by-labuladong/" target="_blank" rel="noopener">From here</a><br>“那么，什么数据结构同时符合上述条件呢？哈希表查找快，但是数据无固定顺序；链表有顺序之分，插入删除快，但是查找慢。所以结合一下，形成一种新的数据结构：哈希链表。”  </p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/4-12-2020-04-07-14-53-42" alt="4-12-2020-04-07-14-53-42"></p><p>哈希表里面的<code>value</code>存储的是双向链表中的节点<code>node</code>，双向链表中按访问时间由近到远排序。<br>每次<code>get</code>就更新<code>key</code>对应的<code>node</code>顺序，把<code>node</code>放到双向链表的头部。<br>每次<code>put</code>的时候，都要把当前节点<code>now</code>放到双向链表的头部，如果找不到<code>key</code>，就插入<code>key</code>，如果找到<code>key</code>，就更新<code>value</code>。如果插入新的<code>key</code>时缓存满了，就把双向链表的尾部丢掉。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>手写双向链表+<code>unordered_map</code></p><ol><li>初始化<code>nullptr</code></li><li><code>lift_now_to_head</code>把<code>now</code>节点插入到链表头部</li><li><code>unordered_map</code>直接用下标访问<code>m[key]</code></li><li><code>m.erase(last-&gt;key)</code>+<code>delete last</code>释放空间</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyListNode</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    MyListNode <span class="token operator">*</span>pre<span class="token punctuation">;</span>    MyListNode <span class="token operator">*</span>nxt<span class="token punctuation">;</span>    <span class="token function">MyListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        key <span class="token operator">=</span> k<span class="token punctuation">;</span>        val <span class="token operator">=</span> v<span class="token punctuation">;</span>        pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        nxt <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    MyListNode <span class="token operator">*</span>head<span class="token punctuation">;</span>    MyListNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> MyListNode <span class="token operator">*</span><span class="token operator">></span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> cap<span class="token punctuation">;</span>    <span class="token keyword">int</span> now_size<span class="token punctuation">;</span>    <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        now_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">lift_now_to_head</span><span class="token punctuation">(</span>MyListNode <span class="token operator">*</span>now<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> now<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            now<span class="token operator">-</span><span class="token operator">></span>pre<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> now<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">;</span>            now<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        now<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        MyListNode <span class="token operator">*</span>now <span class="token operator">=</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">lift_now_to_head</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> now<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        MyListNode <span class="token operator">*</span>now<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyListNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now_size <span class="token operator">&lt;</span> cap<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                now_size<span class="token operator">++</span><span class="token punctuation">;</span>                m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                MyListNode <span class="token operator">*</span>last <span class="token operator">=</span> tail<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>                last<span class="token operator">-</span><span class="token operator">></span>pre<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> tail<span class="token punctuation">;</span>                tail<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> last<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>                m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>last<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">delete</span> last<span class="token punctuation">;</span>                m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            now <span class="token operator">=</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            now<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">lift_now_to_head</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="LFU-Least-Frequently-Used"><a href="#LFU-Least-Frequently-Used" class="headerlink" title="LFU: Least Frequently Used"></a><a href="https://leetcode-cn.com/problems/lfu-cache/" target="_blank" rel="noopener">LFU: Least Frequently Used</a></h2><p><a href="https://leetcode-cn.com/problems/lfu-cache/solution/ha-xi-biao-shuang-xiang-lian-biao-java-by-liweiwei/" target="_blank" rel="noopener">From here:</a><br>本题其实就是在<a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">LRU</a>的基础上，在删除策略里多考虑了一个维度（「访问次数」）的信息。”<br>核心思想：先考虑访问次数，在访问次数相同的情况下，再考虑缓存的时间。</p><p><a href="https://leetcode-cn.com/problems/lfu-cache/solution/java-13ms-shuang-100-shuang-xiang-lian-biao-duo-ji/" target="_blank" rel="noopener">题解</a><br>1个哈希表+2个双向链表  </p><ul><li>哈希表<code>time_map</code>：<code>key-Node</code>  <code>Node</code>里面存<code>value</code> <code>freq</code> <code>freq_node</code></li><li>双向链表<code>FreqListNode</code>：按访问次数从大到小排列    </li><li>双向链表<code>TimeListNode</code>：按访问时间从近到远排列（LRU中的双向链表）</li></ul><p>P.S.先声明两个class<code>FreqListNode</code>和<code>TimeListNode</code>，就可以互相引用了  </p><p><img src="https://pic.leetcode-cn.com/25ade03ee7f3cbfdef0ddf955c917cde96f4153ba5ce8b321f42152b19d55ca5-LFU%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3.png" alt="LFU"></p><ul><li><p><code>get</code>：<br>直接访问<code>key</code>对应的<code>TimeListNode</code>获取<code>value</code>，并更新当前<code>TimeListNode</code>的<code>freq</code>，把当前<code>TimeListNode</code>放到的下一个<code>FreqListNode</code>上</p></li><li><p><code>put</code>：</p></li></ul><ol><li><code>key</code>存在，更新<code>value</code>和<code>freq</code>，更新<code>freq</code>要把<code>TimeListNode</code>取出来放到下一个<code>FreqListNode</code>上</li><li><code>key</code>不存在  <ol><li>缓存满了：删掉<code>freq</code>最小且访问时间最远的节点，即为<code>FreqList</code>的尾部的<code>TimeList</code>尾部，然后进行<code>2.ii</code></li><li>缓存没满：插入新节点，放在<code>freq=1</code>的<code>FreqListNode</code>上的头部</li></ol></li></ol><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><p>满满的，都是坑啊<br>手写两个双向链表是非常好的锻炼机会[狗头]</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// first declare</span><span class="token keyword">class</span> <span class="token class-name">FreqListNode</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TimeListNode</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TimeListNode</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">int</span> freq<span class="token punctuation">;</span>    TimeListNode <span class="token operator">*</span>pre<span class="token punctuation">;</span>    TimeListNode <span class="token operator">*</span>nxt<span class="token punctuation">;</span>    FreqListNode <span class="token operator">*</span>freq_node<span class="token punctuation">;</span>    <span class="token function">TimeListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        key <span class="token operator">=</span> k<span class="token punctuation">;</span>        val <span class="token operator">=</span> v<span class="token punctuation">;</span>        freq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        freq_node <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        nxt <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FreqListNode</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> freq<span class="token punctuation">;</span>    FreqListNode <span class="token operator">*</span>pre<span class="token punctuation">;</span>    FreqListNode <span class="token operator">*</span>nxt<span class="token punctuation">;</span>    TimeListNode <span class="token operator">*</span>time_head<span class="token punctuation">;</span>    TimeListNode <span class="token operator">*</span>time_tail<span class="token punctuation">;</span>    <span class="token function">FreqListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        freq <span class="token operator">=</span> f<span class="token punctuation">;</span>        pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        nxt <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        time_head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TimeListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        time_tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TimeListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        time_head<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> time_tail<span class="token punctuation">;</span>        time_tail<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> time_head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LFUCache</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    FreqListNode <span class="token operator">*</span>freq_head<span class="token punctuation">;</span>    FreqListNode <span class="token operator">*</span>freq_tail<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> TimeListNode <span class="token operator">*</span><span class="token operator">></span> time_map<span class="token punctuation">;</span>    <span class="token keyword">int</span> cap<span class="token punctuation">;</span>    <span class="token keyword">int</span> now_size<span class="token punctuation">;</span>    <span class="token function">LFUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        now_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        freq_head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FreqListNode</span><span class="token punctuation">(</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>        freq_tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FreqListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        freq_head<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> freq_tail<span class="token punctuation">;</span>        freq_tail<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> freq_head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">erase_empty_FreqListNode</span><span class="token punctuation">(</span>FreqListNode <span class="token operator">*</span>now_freq<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now_freq<span class="token operator">-</span><span class="token operator">></span>time_head<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">==</span> now_freq<span class="token operator">-</span><span class="token operator">></span>time_tail<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            now_freq<span class="token operator">-</span><span class="token operator">></span>pre<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> now_freq<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">;</span>            now_freq<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now_freq<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>            <span class="token keyword">delete</span> now_freq<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">incre_freq</span><span class="token punctuation">(</span>TimeListNode <span class="token operator">*</span>now<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        now<span class="token operator">-</span><span class="token operator">></span>pre<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> now<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>freq <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        FreqListNode <span class="token operator">*</span>now_freq <span class="token operator">=</span> now<span class="token operator">-</span><span class="token operator">></span>freq_node<span class="token punctuation">;</span>        FreqListNode <span class="token operator">*</span>nxt_freq <span class="token operator">=</span> now_freq<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nxt_freq<span class="token operator">-</span><span class="token operator">></span>freq <span class="token operator">></span> now<span class="token operator">-</span><span class="token operator">></span>freq<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nxt_freq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FreqListNode</span><span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token operator">></span>freq<span class="token punctuation">)</span><span class="token punctuation">;</span>            now_freq<span class="token operator">-</span><span class="token operator">></span>pre<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> nxt_freq<span class="token punctuation">;</span>            nxt_freq<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now_freq<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>            nxt_freq<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> now_freq<span class="token punctuation">;</span>            now_freq<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> nxt_freq<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        now<span class="token operator">-</span><span class="token operator">></span>freq_node <span class="token operator">=</span> nxt_freq<span class="token punctuation">;</span>        <span class="token function">lift_now_to_head</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">erase_empty_FreqListNode</span><span class="token punctuation">(</span>now_freq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">insert_TimeListNode</span><span class="token punctuation">(</span>TimeListNode <span class="token operator">*</span>now<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        FreqListNode <span class="token operator">*</span>now_freq<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>freq_tail<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> freq_tail<span class="token operator">-</span><span class="token operator">></span>pre<span class="token operator">-</span><span class="token operator">></span>freq <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            now_freq <span class="token operator">=</span> freq_tail<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            now_freq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FreqListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            freq_tail<span class="token operator">-</span><span class="token operator">></span>pre<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> now_freq<span class="token punctuation">;</span>            now_freq<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> freq_tail<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>            now_freq<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> freq_tail<span class="token punctuation">;</span>            freq_tail<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now_freq<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        now<span class="token operator">-</span><span class="token operator">></span>freq_node <span class="token operator">=</span> now_freq<span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>freq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        TimeListNode <span class="token operator">*</span>time_head <span class="token operator">=</span> now_freq<span class="token operator">-</span><span class="token operator">></span>time_head<span class="token punctuation">;</span>        time_head<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now<span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> time_head<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> time_head<span class="token punctuation">;</span>        time_head<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">delete_last_TimeListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        FreqListNode <span class="token operator">*</span>now_freq_node <span class="token operator">=</span> freq_tail<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>        TimeListNode <span class="token operator">*</span>time_tail <span class="token operator">=</span> now_freq_node<span class="token operator">-</span><span class="token operator">></span>time_tail<span class="token punctuation">;</span>        TimeListNode <span class="token operator">*</span>now <span class="token operator">=</span> time_tail<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>        time_map<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>pre<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> time_tail<span class="token punctuation">;</span>        time_tail<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now<span class="token operator">-</span><span class="token operator">></span>pre<span class="token punctuation">;</span>        <span class="token keyword">delete</span> now<span class="token punctuation">;</span>        <span class="token function">erase_empty_FreqListNode</span><span class="token punctuation">(</span>now_freq_node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">lift_now_to_head</span><span class="token punctuation">(</span>TimeListNode <span class="token operator">*</span>now<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        FreqListNode <span class="token operator">*</span>now_freq <span class="token operator">=</span> now<span class="token operator">-</span><span class="token operator">></span>freq_node<span class="token punctuation">;</span>        TimeListNode <span class="token operator">*</span>head <span class="token operator">=</span> now_freq<span class="token operator">-</span><span class="token operator">></span>time_head<span class="token punctuation">;</span>        TimeListNode <span class="token operator">*</span>tail <span class="token operator">=</span> now_freq<span class="token operator">-</span><span class="token operator">></span>time_tail<span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">;</span>        now<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token operator">-</span><span class="token operator">></span>pre <span class="token operator">=</span> now<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>nxt <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time_map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> time_map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TimeListNode <span class="token operator">*</span>now <span class="token operator">=</span> time_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">incre_freq</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> now<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TimeListNode <span class="token operator">*</span>now<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cap<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time_map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> time_map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TimeListNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now_size <span class="token operator">&lt;</span> cap<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                now_size<span class="token operator">++</span><span class="token punctuation">;</span>                time_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>                <span class="token function">insert_TimeListNode</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">delete_last_TimeListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                time_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>                <span class="token function">insert_TimeListNode</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            now <span class="token operator">=</span> time_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            now<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">incre_freq</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.5 Notes</title>
      <link href="/2020/04/05/2020/4-5/"/>
      <url>/2020/04/05/2020/4-5/</url>
      
        <content type="html"><![CDATA[<h1 id="3-30-4-5-Learning-Notes"><a href="#3-30-4-5-Learning-Notes" class="headerlink" title="3.30-4.5 Learning Notes"></a>3.30-4.5 Learning Notes</h1><h1 id="python-unpacking"><a href="#python-unpacking" class="headerlink" title="python unpacking"></a><a href="https://zhuanlan.zhihu.com/p/41968260" target="_blank" rel="noopener">python unpacking</a></h1><h2 id="create-a-list-using-range"><a href="#create-a-list-using-range" class="headerlink" title="create a list using range"></a>create a list using range</h2><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">*</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre><h2 id="combine-2-lists"><a href="#combine-2-lists" class="headerlink" title="combine 2 lists"></a>combine 2 lists</h2><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list2 <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">*</span>list1<span class="token punctuation">,</span> <span class="token operator">*</span>list2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre><h2 id="combine-2-dictionaries"><a href="#combine-2-dictionaries" class="headerlink" title="combine 2 dictionaries"></a>combine 2 dictionaries</h2><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">**</span>a<span class="token punctuation">,</span> <span class="token operator">**</span>b<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h1 id="惯性思维害死人"><a href="#惯性思维害死人" class="headerlink" title="惯性思维害死人"></a><a href="https://leetcode-cn.com/problems/count-number-of-teams/" target="_blank" rel="noopener">惯性思维害死人</a></h1><p>每 3 个士兵可以组成一个作战单位，分组规则如下：</p><p>从队伍中选出下标分别为 i、j、k 的 3 名士兵，他们的评分分别为 rating[i]、rating[j]、rating[k]<br>作战单位需满足:<br>$rating[i] &lt; rating[j] &lt; rating[k]$ or $rating[i] &gt; rating[j] &gt; rating[k]$<br>$0 &lt;= i &lt; j &lt; k &lt; n$</p><p>一开始我想到了这是一种偏序关系，是不是可以用LIS来求呢？<br>于是走上了一条不归之路……</p><p>等价于求一个数列中，长度为3的递增序列个数</p><ol><li>一开始想，这不是很简单吗？直接套LIS模板，长度为3的递增序列个数=${LISLength}\choose{3}$。交的时候发现不对劲，因为LIS可能有多个。</li><li>然后就套求LIS个数的模板了，但这样也是错的</li><li>要不我们求长度等于LISLength的所有递增序列中出现过的元素个数$tot$，答案是${tot}\choose{3}$，转移的时候还要带上路径。  </li></ol><p>估计一下这样做的时间复杂度：<br>$O(n^2)$求LIS，$O(n<em>k)$求出现过的元素个数，其中$k=LISLength</em>LISNumber$<br>总的时间复杂度为$O(n^2)$</p><p>看起来没问题，但其实问题很大：<br><strong>长度为3的递增序列</strong>可以不出现在LIS中</p><pre><code>e.g.1 1000 1001 2 3 4 5 6(1,1000,1001)就没有出现在LIS(1,2,3,4,5,6)中</code></pre><p>所以这题跟LIS一点关系都没有！</p><p>我还是去看<a href="https://leetcode-cn.com/problems/count-number-of-teams/solution/tong-ji-zuo-zhan-dan-wei-shu-by-leetcode-solution/" target="_blank" rel="noopener">官方题解</a>吧  </p><ol><li>暴力枚举三个数看它们是否满足关系$O(n^3)$</li><li>枚举中间的数，求左侧比它大/小的元素的个数，求右侧比它大/小的元素的个数$O(n^2)$</li><li>离散化树状数组优化第二种方法$O(nlogn)$</li></ol><p>第二种方法的代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numTeams</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>rating<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> rating<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rating<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> left_less_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> left_bigger_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right_less_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right_bigger_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rating<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    left_bigger_num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rating<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    left_less_num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rating<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rating<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    right_bigger_num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rating<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rating<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    right_less_num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ans <span class="token operator">+</span><span class="token operator">=</span> left_less_num <span class="token operator">*</span> right_bigger_num <span class="token operator">+</span> left_bigger_num <span class="token operator">*</span> right_less_num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>惯性思维害死人啊啊啊啊！！！！</p><h1 id="逐步优化算法"><a href="#逐步优化算法" class="headerlink" title="逐步优化算法"></a><a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">逐步优化算法</a></h1><p>不要怕自己一开始想出来的算法太慢$O(n^2)/O(n^3)$<br>先保证能得到答案，然后再一步一步地优化。</p><p><a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-8/" target="_blank" rel="noopener">详见该题解</a><br>作者：windliang<br>链接：<a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-8/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/trapping-rain-water/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-8/</a>  </p><ol><li>按行求：就是先求高度为 1 的水，再求高度为 2 的水，再求高度为 3 的水。</li><li>按列求：求每一列的水，我们只需要关注当前列，以及左边最高的墙，右边最高的墙就够了。</li><li>优化第二种按列求的方法，发现不需要都用$O(n)$时间去找两边最高的墙，可以用两个数组预处理，算出第$i$列两边最高的墙</li><li>优化第三种方法，把两个数组压掉，降低空间复杂度。因为这两个数组中的元素我们只用一次，所以可以用两个变量来代替</li><li>用栈来模拟接雨水的过程：当遍历墙的高度的时候，如果当前高度小于栈顶的墙高度，说明这里会有积水，我们将墙的高度的下标入栈。如果当前高度大于栈顶的墙的高度，说明之前的积水到这里停下，我们可以计算下有多少积水了。计算完，就把当前的墙继续入栈，作为新的积水的墙。当遍历墙的高度的时候，如果当前高度小于栈顶的墙高度，说明这里会有积水，我们将墙的高度的下标入栈。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.29 Notes</title>
      <link href="/2020/03/29/2020/3-29/"/>
      <url>/2020/03/29/2020/3-29/</url>
      
        <content type="html"><![CDATA[<h1 id="3-23-3-29-Learning-Notes"><a href="#3-23-3-29-Learning-Notes" class="headerlink" title="3.23-3.29 Learning Notes"></a>3.23-3.29 Learning Notes</h1><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h1 id="使数组唯一的最小增量"><a href="#使数组唯一的最小增量" class="headerlink" title="使数组唯一的最小增量"></a><a href="https://leetcode-cn.com/problems/minimum-increment-to-make-array-unique/" target="_blank" rel="noopener">使数组唯一的最小增量</a></h1><p><a href="https://zhuanlan.zhihu.com/p/115207504" target="_blank" rel="noopener">三种方法</a></p><ul><li>排序+贪心</li><li>计数排序</li><li>线性探测+路径压缩</li></ul><h2 id="排序-贪心"><a href="#排序-贪心" class="headerlink" title="排序+贪心"></a>排序+贪心</h2><p>先从小到大排序，然后遍历每个数<br>如果当前数小于等于上一个数，就把当前数补齐到上一个数+1</p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> bucket<span class="token punctuation">[</span><span class="token number">80005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">minIncrementForUnique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> each <span class="token operator">:</span> A<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            maxn <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> each<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans <span class="token operator">+</span><span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                bucket<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>maxn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> bucket<span class="token punctuation">[</span>maxn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="线性探测-路径压缩"><a href="#线性探测-路径压缩" class="headerlink" title="线性探测+路径压缩"></a>线性探测+路径压缩</h2><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/3-29-2020-3-23-9-14-41" alt="3-29-2020-3-23-9-14-41"></p><p>这道题换句话说，就是需要把原数组映射到一个地址不冲突的区域，映射后的地址不小于原数组对应的元素。</p><p>比如[3, 2, 1, 2, 1, 7]就映射成了[3, 2, 1, 4, 5, 7]。</p><p>我想了下，这道题目其实和解决hash冲突的线性探测法比较相似！</p><p>如果地址冲突了，会探测它的下一个位置，如果下一个位置还是冲突，继续向后看，直到第一个不冲突的位置为止。</p><p>没有路径压缩的版本：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">80005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>pos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">minIncrementForUnique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> each <span class="token operator">:</span> A<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>each<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                hash<span class="token punctuation">[</span>each<span class="token punctuation">]</span> <span class="token operator">=</span> each<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>                hash<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> each<span class="token punctuation">;</span>                ans <span class="token operator">+</span><span class="token operator">=</span> pos <span class="token operator">-</span> each<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>怎么路径压缩呢？就是经过某条路径最终探测到一个空位置x后，将这条路径上的值都变成空位置所在的下标x，那么假如下次探测的点又是这条路径上的点，则可以直接跳转到这次探测到的空位置x，从x开始继续探测。</p><p>这里的路径压缩有点像并查集里面的路径压缩，但是有一点点不同，找到空位置后要给它赋值</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        hash<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> pos<span class="token punctuation">;</span>        <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    hash<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hash<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">80005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">minIncrementForUnique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> each <span class="token operator">:</span> A<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>each<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                hash<span class="token punctuation">[</span>each<span class="token punctuation">]</span> <span class="token operator">=</span> each<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>                ans <span class="token operator">+</span><span class="token operator">=</span> pos <span class="token operator">-</span> each<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="dp-打家劫舍x3"><a href="#dp-打家劫舍x3" class="headerlink" title="dp: 打家劫舍x3"></a>dp: 打家劫舍x3</h1><h2 id="I"><a href="#I" class="headerlink" title="I"></a><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">I</a></h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>f[i][0]</code>表示前i个预约，其中第i个预约不接的最大值<br><code>f[i][0]</code>表示前i个预约，其中第i个预约接的最大值</p><pre><code>f[i][0] = max(f[i - 1][0], f[i - 1][1]);f[i][1] = f[i - 1][0] + nums[i - 1];</code></pre><p>注意到<code>f[i]</code>只依赖与前一个状态<code>f[i-1]</code>，所以我们可以不用数组，只用两个变量存储前一个状态</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// int f[2005][2];</span>    <span class="token keyword">int</span> <span class="token function">massage</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> preRest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> preWork <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nowRest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nowWork <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nowRest <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>preRest<span class="token punctuation">,</span> preWork<span class="token punctuation">)</span><span class="token punctuation">;</span>            nowWork <span class="token operator">=</span> preRest <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            preRest <span class="token operator">=</span> nowRest<span class="token punctuation">;</span>            preWork <span class="token operator">=</span> nowWork<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// f[i][0] = max(f[i - 1][0], f[i - 1][1]);</span>            <span class="token comment" spellcheck="true">// f[i][1] = f[i - 1][0] + nums[i - 1];</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>nowRest<span class="token punctuation">,</span> nowWork<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return max(f[n][0], f[n][1]);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="II"><a href="#II" class="headerlink" title="II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/" target="_blank" rel="noopener">II</a></h2><p>环形：第一个房子和最后一个不能同时取</p><p>所以有两种情况：</p><ul><li>不取第一个</li><li>不取最后一个  </li></ul><p>最后取两种情况的最大值即可</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// int f[2005][2];</span>    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> preRest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> preWork <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nowRest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nowWork <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nowRest <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>preRest<span class="token punctuation">,</span> preWork<span class="token punctuation">)</span><span class="token punctuation">;</span>            nowWork <span class="token operator">=</span> preRest <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            preRest <span class="token operator">=</span> nowRest<span class="token punctuation">;</span>            preWork <span class="token operator">=</span> nowWork<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>preRest<span class="token punctuation">,</span> preWork<span class="token punctuation">)</span><span class="token punctuation">;</span>        preRest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> preWork <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nowRest <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>preRest<span class="token punctuation">,</span> preWork<span class="token punctuation">)</span><span class="token punctuation">;</span>            nowWork <span class="token operator">=</span> preRest <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            preRest <span class="token operator">=</span> nowRest<span class="token punctuation">;</span>            preWork <span class="token operator">=</span> nowWork<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nowWork <span class="token operator">=</span> preRest <span class="token operator">+</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> nowWork<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="III"><a href="#III" class="headerlink" title="III"></a><a href="https://leetcode-cn.com/problems/house-robber-iii/" target="_blank" rel="noopener">III</a></h2><p>树形：孩子和父亲不能同时取</p><p>思路是类似的，注意<code>preWork</code>不一样，有三种情况：</p><ul><li>左右都取</li><li>取左不取右</li><li>取右不取左<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>now<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> le <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> ri <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> preRest <span class="token operator">=</span> le<span class="token punctuation">.</span>first <span class="token operator">+</span> ri<span class="token punctuation">.</span>first<span class="token punctuation">;</span>      <span class="token keyword">int</span> preWork <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>first <span class="token operator">+</span> ri<span class="token punctuation">.</span>second<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>second <span class="token operator">+</span> ri<span class="token punctuation">.</span>first<span class="token punctuation">,</span> le<span class="token punctuation">.</span>second <span class="token operator">+</span> ri<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> nowWork <span class="token operator">=</span> preRest <span class="token operator">+</span> now<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>      <span class="token keyword">int</span> nowRest <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>preRest<span class="token punctuation">,</span> preWork<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>nowRest<span class="token punctuation">,</span> nowWork<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> ans <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>first<span class="token punctuation">,</span> ans<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><h1 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h1><h2 id="Trie模板"><a href="#Trie模板" class="headerlink" title="Trie模板"></a><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener">Trie模板</a></h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Trie</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> isEnd<span class="token punctuation">;</span>    Trie <span class="token operator">*</span>nxt<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** Initialize your data structure here. */</span>    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Inserts a word into the trie. */</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Returns if the word is in the trie. */</span>    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Returns if there is any word in the trie that starts with the given prefix. */</span>    <span class="token keyword">bool</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>string prefix<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> prefix<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Trie匹配后缀"><a href="#Trie匹配后缀" class="headerlink" title="Trie匹配后缀"></a><a href="https://leetcode-cn.com/problems/short-encoding-of-words/" target="_blank" rel="noopener">Trie匹配后缀</a></h2><p>给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。</p><p>例如，如果这个列表是 <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>，我们就可以将其表示为 <code>S = &quot;time#bell#&quot;</code> 和 <code>indexes = [0, 2, 5]</code>。</p><p>对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 “#” 结束，来恢复我们之前的单词列表。</p><p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>要让索引字符串长度最小，就要尽量利用单词的公共部分。</p><p>一个单词时另一个单词的前缀时，不能缩短索引字符串长度</p><pre><code>bellbebe#bell#</code></pre><p>发现只有一个单词是另一个单词的后缀时，才能缩短索引字符串长度</p><pre><code>timemetime#</code></pre><p>所以，对于每一个单词，我们希望找到以它为后缀的另一个单词，如果能找到，就能够将这两个单词叠加起来，不需要增加额外长度。</p><h3 id="暴力-O-n-2"><a href="#暴力-O-n-2" class="headerlink" title="暴力$O(n^2)$"></a>暴力$O(n^2)$</h3><p>先按单词长度从大到小排序，从第二个单词开始遍历，判断当前单词是否为之前的某一个单词（长度大于等于当前单词）的后缀<br>如果是，索引字符串长度不变<br>如果不是，索引字符串长度加上当前单词长度再加1<code>word#</code></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">minimumLengthEncoding</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">+</span><span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// cout &lt;&lt; words[i] &lt;&lt; endl;</span>            <span class="token keyword">bool</span> ismatch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">,</span> len<span class="token punctuation">,</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ismatch <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ismatch<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans <span class="token operator">+</span><span class="token operator">=</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="Trie-O-反正比暴力快"><a href="#Trie-O-反正比暴力快" class="headerlink" title="Trie $O(?)$ 反正比暴力快"></a>Trie $O(?)$ 反正比暴力快</h3><p>求一个单词的后缀=求这个单词反过来之后的前缀<br>这不是可以用Trie吗？</p><p>还是要先按单词长度从大到小排序，再将倒置的单词一个个加入到Trie中<br>如果不这么做，<code>me</code>先被加到树中，不能被<code>time</code>匹配到</p><p>如果当前单词是某一单词的前缀，那么当前单词肯定在Trie中<br>如果不是，就更新Trie</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Trie</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> isEnd<span class="token punctuation">;</span>    Trie <span class="token operator">*</span>nxt<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">searchPrefixAndInsert</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> match <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ch <span class="token operator">:</span> s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Trie<span class="token punctuation">;</span>                match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> match<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">minimumLengthEncoding</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> word<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">searchPrefixAndInsert</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span>                ans <span class="token operator">+</span><span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Trie上搜索"><a href="#Trie上搜索" class="headerlink" title="Trie上搜索"></a><a href="https://leetcode-cn.com/problems/add-and-search-word-data-structure-design/" target="_blank" rel="noopener">Trie上搜索</a></h2><p>search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 <code>.</code> 或 <code>a-z</code> 。 <code>.</code> 可以表示任何一个字母。</p><h3 id="可以表示任何一个字母，遇到到-的时候怎么办？"><a href="#可以表示任何一个字母，遇到到-的时候怎么办？" class="headerlink" title=".可以表示任何一个字母，遇到到.的时候怎么办？"></a><code>.</code>可以表示任何一个字母，遇到到<code>.</code>的时候怎么办？</h3><p>遇到<code>.</code>表示可以通向任何一个连接的字母<br><code>node-&gt;nxt[j] if node-&gt;nxt[j]!=nullptr</code>  </p><p>接着搜索剩下的字符串<code>word.substr(i+1)</code><br>只要至少一个分支匹配成功，就算成功<code>isMatch|=</code></p><p><code>this</code>指向当前引用的对象<br>所以需要用<code>node-&gt;nxt[j]-&gt;search</code>来引用<code>node-&gt;nxt[j]</code></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        isMatch <span class="token operator">|</span><span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">WordDictionary</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> isEnd<span class="token punctuation">;</span>    WordDictionary <span class="token operator">*</span>nxt<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">WordDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        isEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addWord</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> WordDictionary<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// . can represent any word exist</span>                <span class="token keyword">bool</span> isMatch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        isMatch <span class="token operator">|</span><span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> isMatch<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Trie-回溯"><a href="#Trie-回溯" class="headerlink" title="Trie+回溯"></a><a href="https://leetcode-cn.com/problems/word-search-ii/description" target="_blank" rel="noopener">Trie+回溯</a></h2><p>三种解法:  </p><ol><li>暴搜</li><li>Trie+回溯，结合程度低</li><li>Trie+回溯，结合程度高</li></ol><h3 id="暴搜TLE"><a href="#暴搜TLE" class="headerlink" title="暴搜TLE"></a>暴搜TLE</h3><p>枚举每个在字典中的单词，枚举每个出发点</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> dire<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">bool</span> match<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> string nowWord<span class="token punctuation">,</span> string finalWord<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">&amp;</span>board<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nowWord <span class="token operator">==</span> finalWord<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nowWord<span class="token punctuation">)</span><span class="token punctuation">;</span>            match <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        visited<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> dir <span class="token operator">:</span> dire<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> nxt_x <span class="token operator">=</span> x <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> nxt_y <span class="token operator">=</span> y <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nxt_x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nxt_x <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> nxt_y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nxt_y <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">char</span> nxt_ch <span class="token operator">=</span> finalWord<span class="token punctuation">[</span>nowWord<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span> <span class="token operator">==</span> nxt_ch<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        string nxtWord <span class="token operator">=</span> nowWord <span class="token operator">+</span> nxt_ch<span class="token punctuation">;</span>                        <span class="token function">dfs</span><span class="token punctuation">(</span>nxt_x<span class="token punctuation">,</span> nxt_y<span class="token punctuation">,</span> nxtWord<span class="token punctuation">,</span> finalWord<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>                        visited<span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">findWords</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">&amp;</span>board<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        string <span class="token function">nxtWord</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> nxtWord<span class="token punctuation">,</span> word<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>                        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="结合不紧密的Trie-回溯"><a href="#结合不紧密的Trie-回溯" class="headerlink" title="结合不紧密的Trie+回溯"></a>结合不紧密的Trie+回溯</h3><p>基本等于在暴搜的基础上加上Trie模板<br>用Trie来帮助暴搜剪枝</p><ol><li>不需要枚举每个在字典中的单词，直接搜索当前单词是否在字典中即可</li><li>搜索当前单词是否是字典中某个单词的前缀，如果不是就可以剪枝<code>return</code></li></ol><p>这里有个很容易错的小细节:<br>找到匹配的单词后不能<code>return</code>，因为可能有以当前单词为前缀的其他单词，如果<code>return</code>就不能找到它们了</p><pre><code>e.g.dict={&quot;ab&quot;,&quot;abc&quot;}board={&quot;a&quot;,&quot;b&quot;,&quot;c&quot;}如果找到&quot;ab&quot;的时候直接return，&quot;abc&quot;就永远不可能被匹配到</code></pre><p>另外一个优化的点：<br>题意只需要求出现的单词，不要重复的，与其用<code>unordered_map</code>这类东西来去重，不如直接在Trie中改动一下。<br>在匹配单词的函数中这样写，就能使每个单词只出现一次。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">)</span><span class="token punctuation">{</span>    node<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">searchWord</span><span class="token punctuation">(</span>nowWord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nowWord<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// return;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">startWith</span><span class="token punctuation">(</span>nowWord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Trie</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> isEnd<span class="token punctuation">;</span>    Trie <span class="token operator">*</span>nxt<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        isEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> each <span class="token operator">:</span> word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">startWith</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> each <span class="token operator">:</span> word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">searchWord</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> each <span class="token operator">:</span> word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// find the word and delete it</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            node<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> dire<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Trie <span class="token operator">*</span>root<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> string nowWord<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">&amp;</span>board<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">searchWord</span><span class="token punctuation">(</span>nowWord<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nowWord<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// return;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">startWith</span><span class="token punctuation">(</span>nowWord<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> dir <span class="token operator">:</span> dire<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> nxt_x <span class="token operator">=</span> x <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> nxt_y <span class="token operator">=</span> y <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nxt_x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nxt_x <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> nxt_y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nxt_y <span class="token operator">&lt;</span> m<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    string nxtWord <span class="token operator">=</span> nowWord <span class="token operator">+</span> board<span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span><span class="token punctuation">;</span>                    visited<span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>nxt_x<span class="token punctuation">,</span> nxt_y<span class="token punctuation">,</span> nxtWord<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>                    visited<span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">findWords</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">&amp;</span>board<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                string <span class="token function">nowWord</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> nowWord<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="结合紧密的Trie-回溯"><a href="#结合紧密的Trie-回溯" class="headerlink" title="结合紧密的Trie+回溯"></a>结合紧密的Trie+回溯</h3><p><a href="https://leetcode-cn.com/problems/word-search-ii/solution/cqian-zhui-shu-ju-ta-ma-rong-yi-dong-by-chashao/" target="_blank" rel="noopener">推荐看这位大佬用<code>hashmap</code>的题解以及下面评论区使用一般前缀树的代码</a></p><p><a href="https://leetcode-cn.com/problems/word-search-ii/solution/dan-ci-sou-suo-ii-by-leetcode/" target="_blank" rel="noopener">再看看官方题解里面给出的优化建议</a></p><p>有了Trie,怎么进一步优化我们的搜索回溯呢？</p><p>答案就是直接把Trie的节点作为一个状态，放到搜索里面。</p><ul><li>判断单词是否匹配？ 看<code>now-&gt;isEnd==1</code></li><li>判断当前字符串是否是某一单词的前缀？ 看<code>now-&gt;nxt[board[x][y] - &#39;a&#39;] == nullptr</code></li><li>下一个位置的字符串是？ <code>now = now-&gt;nxt[board[x][y] - &#39;a&#39;]</code></li></ul><p>另外，这里的搜索写法与之前差别比较大，而且把<code>visited[][]</code>砍掉了。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Trie</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> isEnd<span class="token punctuation">;</span>    Trie <span class="token operator">*</span>nxt<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    string word<span class="token punctuation">;</span>    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        isEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        word <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> each <span class="token operator">:</span> word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>each <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>word <span class="token operator">=</span> word<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span>now<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">&amp;</span>board<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            now<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token operator">></span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">>=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        now <span class="token operator">=</span> now<span class="token operator">-</span><span class="token operator">></span>nxt<span class="token punctuation">[</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> cur <span class="token operator">=</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'#'</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>        board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">findWords</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">&amp;</span>board<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Trie <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="这道题的一些延伸思考"><a href="#这道题的一些延伸思考" class="headerlink" title="这道题的一些延伸思考"></a>这道题的一些延伸思考</h3><h3 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a><code>nullptr</code></h3><p>c++11 推出的东东，表示一个空指针<br>反正记住比<code>null</code>好用就对了  </p><p><a href="https://zhuanlan.zhihu.com/p/79883965" target="_blank" rel="noopener">为什么建议你用nullptr而不是NULL</a></p><h3 id="a-x-y-ora-y-x"><a href="#a-x-y-ora-y-x" class="headerlink" title="a[x][y]ora[y][x]"></a><code>a[x][y]</code>or<code>a[y][x]</code></h3><p>在数学里面，<code>(x,y)</code>看起来更顺眼哎</p><p>但是如果我们把数学里面的坐标系放到二维数组中来看，发现有点不对劲</p><pre><code>a=[   1 2 3   1 [1,2,3],   2 [4,5,6],   3 [7,8,9]]</code></pre><p>如果按照数学中的坐标系，第y行第x列对应的数组元素是<code>a[y][x]</code></p><p>但是<code>y</code>在<code>x</code>前面又有点不太舒服，<code>a[x][y]</code>看起来更自然</p><p>其实两种写法都可以，关键是你要想明白<code>x</code>代表的是行数或是列数</p><p>现在发现<code>a[x][y]</code>更好一点，因为很多时候函数返回值是<code>(x,y)</code>，<code>unpack</code>不容易出错</p><h3 id="搜索回溯的不同写法"><a href="#搜索回溯的不同写法" class="headerlink" title="搜索回溯的不同写法"></a>搜索回溯的不同写法</h3><ol><li>先进入下一个状态再判断合法性</li><li>先判断下一个状态的合法性再进入</li></ol><p>个人感觉各有千秋吧</p><p>第一种写法代码会更简洁，而且不用考虑<code>dfs(0,0)</code>搜索入口的状态</p><p>第二种写法递归调用会少一点，效率会高？（不太清楚）但是要考虑搜索入口的状态 </p><p>以该题为例：</p><pre class=" language-cpp"><code class="language-cpp">第一种写法的搜索入口<span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>第二种写法的搜索入口string <span class="token function">nowWord</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> nowWord<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>第一种写法逻辑确实清晰很多，递归边界直接用<code>if return</code>就可以，增减逻辑都方便</p><h1 id="多源最短路"><a href="#多源最短路" class="headerlink" title="多源最短路"></a><a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/" target="_blank" rel="noopener">多源最短路</a></h1><p>你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的曼哈顿距离。</p><h2 id="单源bfs"><a href="#单源bfs" class="headerlink" title="单源bfs"></a>单源bfs</h2><ul><li>从每个陆地出发，更新每个海洋到陆地的最短距离</li><li>从每个海洋出发找离它最近的陆地</li></ul><p>这两种单源bfs跑起来都有点慢，需要注意优化常数才能AC，有兴趣的可以看看官方题解中的常数优化<br>1768 ms    252.5 MB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> dire<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> a<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> step<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">findNearestIsland</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            node now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> nx <span class="token operator">=</span> now<span class="token punctuation">.</span>x <span class="token operator">+</span> dire<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ny <span class="token operator">=</span> now<span class="token punctuation">.</span>y <span class="token operator">+</span> dire<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nx <span class="token operator">>=</span> n <span class="token operator">||</span> ny <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ny <span class="token operator">>=</span> m<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// find the nearest island</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> now<span class="token punctuation">.</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> now<span class="token punctuation">.</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> grid<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">findNearestIsland</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="多源bfs"><a href="#多源bfs" class="headerlink" title="多源bfs"></a><a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/solution/zhen-liang-yan-sou-huan-neng-duo-yuan-kan-wan-miao/" target="_blank" rel="noopener">多源bfs</a></h2><p>先把每个陆地加到队列里面，再一起bfs</p><p>多源bfs=以超级源点为第一层，多个选出来的源点为第二层进行bfs</p><p><img src="https://pic.leetcode-cn.com/5d4d1debe4c272fc248d67b9eeda8f2f8e530bc35a38c286bf3e6b8285e85859-%E8%B6%85%E7%BA%A7%E6%BA%90%E7%82%B9.png" alt="多源bfs"></p><p>多源bfs明显比单源bfs快很多<br>324 ms    32.4 MB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> dis<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>                visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> inf<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        queue<span class="token operator">&lt;</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">>=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>                dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// reach another island</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> step <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> inf<span class="token punctuation">)</span>                    dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>还可以进一步优化：</p><ul><li>删掉visited数组，填海造陆，访问过的ocean变成island</li><li>删掉dis数组，在bfs中记录当前步数（重点）</li></ul><p>怎么在bfs中记录当前步数呢？<br>将问题转化为：怎样在bfs中区分当前层与下一层?</p><p>加入一个<code>size</code>变量记录第一次遍历到当前层时的队列长度，即为当前层的元素个数。同一层的步数相等，只有遍历完同一层后才进行<code>step++</code>更新步数。</p><p>这样划分层数合理的原因是：队列中同一层的聚在一起，下一层的一定在它们后面</p><p>注意最后<code>step-1</code>，因为在判断到队列为空之前，在最后一层bfs中<code>step</code>会多加一次。</p><p>优化后效果<br>112 ms    16.4 MB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> dis<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dire<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// all islands or all ocean</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> n <span class="token operator">*</span> n <span class="token operator">||</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                <span class="token keyword">int</span> y <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> nxt_x <span class="token operator">=</span> x <span class="token operator">+</span> dire<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> nxt_y <span class="token operator">=</span> y <span class="token operator">+</span> dire<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nxt_x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nxt_x <span class="token operator">>=</span> n <span class="token operator">||</span> nxt_y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nxt_y <span class="token operator">>=</span> n<span class="token punctuation">)</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>grid<span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 填海造陆</span>                        grid<span class="token punctuation">[</span>nxt_x<span class="token punctuation">]</span><span class="token punctuation">[</span>nxt_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>nxt_x<span class="token punctuation">,</span> nxt_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            step<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// why step-1?</span>        <span class="token comment" spellcheck="true">// 在最后一层bfs中step会多加一次,在判断到队列为空之前</span>        <span class="token keyword">return</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="多源最短路-1"><a href="#多源最短路-1" class="headerlink" title="多源最短路"></a>多源最短路</h2><p>第一次见到dijkstra能用来求多源最短路的</p><p>详见<a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/solution/di-tu-fen-xi-by-leetcode-solution/" target="_blank" rel="noopener">官方题解</a></p><p>这里以 Dijkstra 算法为例，我们知道堆优化的 Dijkstra 算法实际上是 BFS 的一个变形，把 BFS 中的队列变成了优先队列，在拓展新状态的时候加入了松弛操作。Dijkstra 的堆优化版本第一步是源点入队，我们只需要把它改成源点集合中的所有的点入队就可以实现求「多源最短路」。</p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/3-29-2020-03-29-21-25-40" alt="3-29-2020-03-29-21-25-40"></p><p>但是根据<a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/solution/di-tu-fen-xi-by-leetcode-solution/" target="_blank" rel="noopener">官方题解</a>的分析，该算法的时间复杂度比多源bfs高</p><h1 id="Coding-Game"><a href="#Coding-Game" class="headerlink" title="Coding Game"></a><a href="https://www.codingame.com/" target="_blank" rel="noopener">Coding Game</a></h1><p>边玩游戏边学编程，何乐而不为？</p><h2 id="Clash-Of-Code"><a href="#Clash-Of-Code" class="headerlink" title="Clash Of Code"></a>Clash Of Code</h2><p>3 modes:</p><ul><li>shortest</li><li>fastest</li><li>reverse</li></ul><p>练习编程熟练度，让你的代码更简洁</p><h2 id="Contest"><a href="#Contest" class="headerlink" title="Contest"></a>Contest</h2><p>几个月会换一次游戏</p><p>写程序来玩一个游戏，与其他对手写的程序进行对抗<br>图形化调试，直接能看到对战录像</p><p>慎入，会上瘾</p><p>这是一个锻炼自己编程能力的好机会，几百行的代码逻辑，怎么快速定位bug，快速调试<br>函数/变量命名，代码整合复用，面向对象都能用到</p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/3-29-2020-03-29-23-57-37" alt="3-29-2020-03-29-23-57-37"></p><h1 id="Google-Kick-Start"><a href="#Google-Kick-Start" class="headerlink" title="Google Kick Start"></a>Google Kick Start</h1><h2 id="Diagonal-Puzzle"><a href="#Diagonal-Puzzle" class="headerlink" title="Diagonal Puzzle"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edd/00000000001a2835" target="_blank" rel="noopener">Diagonal Puzzle</a></h2><p>这题有毒！<br>我尝试用八皇后的位运算来写这道题，但这道题关键是dfs肯定会超时，要优化算法</p><p><a href="https://xingw-xiong.ac.cn/2019/11/18/kick-start-2019H-B/" target="_blank" rel="noopener">https://xingw-xiong.ac.cn/2019/11/18/kick-start-2019H-B/</a></p><p><a href="https://zhuanlan.zhihu.com/p/94047090" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/94047090</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> dp </tag>
            
            <tag> Coding Game </tag>
            
            <tag> Trie </tag>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.22 Notes</title>
      <link href="/2020/03/22/2020/3-22/"/>
      <url>/2020/03/22/2020/3-22/</url>
      
        <content type="html"><![CDATA[<h1 id="3-16-3-22-Learning-Notes"><a href="#3-16-3-22-Learning-Notes" class="headerlink" title="3.16-3.22 Learning Notes"></a>3.16-3.22 Learning Notes</h1><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h1 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">逆序对</a></h1><p><a href="https://www.luogu.com.cn/problem/P1908" target="_blank" rel="noopener">洛谷的数据较强</a></p><p>归并排序求逆序对<br>只需要加上一行代码<code>ans += mid - i + 1;</code></p><p>在合并两个有序数组时，若发现一个逆序对<code>nums[i]&gt;nums[j]</code>，则<code>nums[i]&gt;nums[mid+1]~nums[j]</code>且<code>nums[i]~nums[mid]&gt;nums[j]</code><br>由于此处<code>j++</code>,<code>j</code>的状态会丢失，所以取这种情况<code>nums[i]~nums[mid]&gt;nums[j]</code><br>共<code>mid-i+1</code>个逆序对</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sortNums<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans <span class="token operator">+</span><span class="token operator">=</span> mid <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                sortNums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                sortNums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sortNums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sortNums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sortNums<span class="token punctuation">[</span>i <span class="token operator">-</span> left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// cout &lt;&lt; left &lt;&lt; " " &lt;&lt; right &lt;&lt; " " &lt;&lt; ans &lt;&lt; endl;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="求LIS个数：O-nlogn-的两种解法（知乎）"><a href="#求LIS个数：O-nlogn-的两种解法（知乎）" class="headerlink" title="求LIS个数：O(nlogn)的两种解法（知乎）"></a><a href="https://www.zhihu.com/question/34905638" target="_blank" rel="noopener">求LIS个数：O(nlogn)的两种解法（知乎）</a></h1><h2 id="1-用树状数组维护LIS个数"><a href="#1-用树状数组维护LIS个数" class="headerlink" title="1. 用树状数组维护LIS个数"></a><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/solution/yi-bu-yi-bu-tui-dao-chu-zui-you-jie-fa-2-zui-chang/" target="_blank" rel="noopener">1. 用树状数组维护LIS个数</a></h2><p>树状数组部分是摘录<a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/solution/yi-bu-yi-bu-tui-dao-chu-zui-you-jie-fa-2-zui-chang/" target="_blank" rel="noopener">newhar的题解</a></p><p><img src="https://pic.leetcode-cn.com/9970ce5aed18da146aab5fe252f514f5b3379a2b77754fc2209f84de0ce13f67-file_1584698528497" alt="20200317170811.png"></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span>    <span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">int</span> maxlength<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            maxlength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 区间合并法则</span>        <span class="token comment" spellcheck="true">// override: +=</span>        Node <span class="token keyword">operator</span><span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>maxlength <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>maxlength<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>cnt <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>maxlength <span class="token operator">></span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>maxlength<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>maxlength <span class="token operator">=</span> b<span class="token punctuation">.</span>maxlength<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>cnt <span class="token operator">=</span> b<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新一个点后向上更新</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Node nodes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rank<span class="token punctuation">,</span> Node now<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> rank <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> rank <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>rank<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nodes<span class="token punctuation">[</span>rank<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 单点查找</span>    Node <span class="token function">query</span><span class="token punctuation">(</span>Node nodes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node res<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rank<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> nodes<span class="token punctuation">[</span>rank<span class="token punctuation">]</span><span class="token punctuation">;</span>            rank <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>rank<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findNumberOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortnums</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>sortnums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sortnums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node nodes<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Node ans <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按nums[]顺序遍历，保证j&lt;i这个条件,同时又用二分查找找出当前数num的下界nums[rank]</span>        <span class="token comment" spellcheck="true">// 以nums[rank]结尾的LIS是最长的（之一）,长度为lmax</span>        <span class="token comment" spellcheck="true">// 长度为lmax的LIS个数已经在树状数组中，查询后可得到</span>        <span class="token comment" spellcheck="true">// 把当前数num加到树状数组里面</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 二分搜索当前数的下界排名</span>            <span class="token keyword">int</span> rank <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>sortnums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sortnums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">-</span> sortnums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node now <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> rank<span class="token punctuation">)</span><span class="token punctuation">;</span>            now<span class="token punctuation">.</span>maxlength<span class="token operator">++</span><span class="token punctuation">;</span>            now<span class="token punctuation">.</span>cnt <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>cnt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">+</span><span class="token operator">=</span> now<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="2-什么是CDQ分治"><a href="#2-什么是CDQ分治" class="headerlink" title="2. 什么是CDQ分治"></a><a href="https://oi-wiki.org/misc/cdq-divide/" target="_blank" rel="noopener">2. 什么是CDQ分治</a></h2><p>LIS是一个二维偏序问题。<br>来看看LIS的状态转移方程：<br><code>Lis[i]=max{Lis[j]+1}   j&lt;i &amp;&amp; nums[j]&lt;nums[i]</code><br>此处的点对是<code>(i,nums[i])</code></p><p><img src="https://pic.leetcode-cn.com/99a2d255dddfe5f7e1724be1445a52a9eb30712b10e5ff4dc2e857458ef46068-file_1584698528489" alt="20200316093244.png"></p><p><img src="https://pic.leetcode-cn.com/19d86de5d4818cdaec81753811f5b9adfcdcd30ee7ede01d7c15642c843c9487-file_1584698528495" alt="20200316093734.png"></p><h3 id="cdq求LIS长度"><a href="#cdq求LIS长度" class="headerlink" title="cdq求LIS长度"></a>cdq求LIS长度</h3><p><strong>cdq的本质：分治过程中用左边的信息更新右边的</strong></p><h3 id="状态定义"><a href="#状态定义" class="headerlink" title="状态定义"></a>状态定义</h3><p><code>Length_Lis[i]</code>表示以第<code>i</code>个元素为结尾的LIS长度</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums_copy<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> nums_copy<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> nums_copy<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums_copy<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Length_Lis<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Length_Lis<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用左边的信息更新右边的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>id <span class="token operator">+</span> left<span class="token punctuation">,</span> id <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序后的nums[left,right]单调递增</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前数在左边，左边已经有解，更新当前LIS长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            len <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前数在右边，更新LIS</span>        <span class="token comment" spellcheck="true">// 满足二维偏序：id[i]&lt;id[j] and nums[i]&lt;nums[j]</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> Maxlen<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Maxlen <span class="token operator">=</span> Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那怎么求LIS个数呢？  </p><h3 id="定义状态"><a href="#定义状态" class="headerlink" title="定义状态"></a>定义状态</h3><p><code>Num_Lis[i]</code>表示以第<code>i</code>个元素为结尾的LIS的个数<br>在cdq递归结束后，再统计所有元素中的LIS的个数<code>Maxnum</code></p><h3 id="转移状态（用左边更新右边）的条件"><a href="#转移状态（用左边更新右边）的条件" class="headerlink" title="转移状态（用左边更新右边）的条件"></a>转移状态（用左边更新右边）的条件</h3><p>首先一定要满足LIS的条件<code>id[i]&lt;id[j] and nums[i]&lt;nums[j]</code>（二维偏序）</p><p>满足二维偏序后的两种转移方式：</p><ol><li>以右边元素为结尾的LIS长度=以左边元素为结尾的LIS长度+1 –&gt; 以右边元素为结尾的LIS个数+=以左边元素为结尾的LIS个数</li><li>以右边元素为结尾的LIS长度&lt;以左边元素为结尾的LIS长度+1 –&gt; 以右边元素为结尾的LIS个数=以左边元素为结尾的LIS个数；以右边元素为结尾的LIS长度=以左边元素为结尾的LIS长度+1</li></ol><h3 id="最长上升序列"><a href="#最长上升序列" class="headerlink" title="最长上升序列"></a>最长上升序列</h3><p>特判一下以左边元素为结尾的LIS长度为0的情况，不转移<br>这一道题求的是最长上升序列的个数<br><strong>最长上升序列!=最长不下降序列</strong>  </p><pre><code>[2,2,2,2,2]LIS长度为1，个数为5</code></pre><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> nums_copy<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums_copy<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> nums_copy<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> nums_copy<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums_copy<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> Num_Lis<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Length_Lis<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Maxnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Maxlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Length_Lis<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Length_Lis<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                Num_Lis<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">cdq</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用左边的信息更新右边的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>id <span class="token operator">+</span> left<span class="token punctuation">,</span> id <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 排序后的nums[left,right]单调递增</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前数在左边，左边已经有解，更新当前LIS长度</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    len <span class="token operator">=</span> Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    num <span class="token operator">=</span> Num_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    num <span class="token operator">+</span><span class="token operator">=</span> Num_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 当前数在右边，更新LIS</span>            <span class="token comment" spellcheck="true">// 满足二维偏序：id[i]&lt;id[j] and nums[i]&lt;nums[j]</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// len=0表示没有信息可以转移</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Num_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Length_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    Num_Lis<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">cdq</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">findNumberOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nums_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Maxnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Maxlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Length_Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> Maxlen<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Maxlen <span class="token operator">=</span> Length_Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                Maxnum <span class="token operator">=</span> Num_Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Length_Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> Maxlen<span class="token punctuation">)</span>                Maxnum <span class="token operator">+</span><span class="token operator">=</span> Num_Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Maxnum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="题后思考：为什么让相等的两个元素按原始位置倒序排列？"><a href="#题后思考：为什么让相等的两个元素按原始位置倒序排列？" class="headerlink" title="题后思考：为什么让相等的两个元素按原始位置倒序排列？"></a>题后思考：为什么让相等的两个元素按原始位置倒序排列？</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Why?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums_copy<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> nums_copy<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> nums_copy<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums_copy<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果正序会怎么样？</p><p>让我们对比两种排序方式产生的效果：</p><pre><code>e.g.1,2a,2b,4(用a,b记录它们的原始位置)1st: if (nums_copy[a] == nums_copy[b])    return a &gt; b;1,2b,2a,42nd:if (nums_copy[a] == nums_copy[b])    return a &lt; b;1,2a,2b,4因为这道题求的是最长上升序列，所以2a的状态不能转移给2b。按正序排列，2a的状态会转移给2b。那如果我们特判在左边的前一个元素是否与当前右边的元素相等，也就是2a==2b?，这样是否可行呢？if (pre == nums_copy[id[i]])    continue;答案是不行，因为这样1的信息会丢失，无法转移到2b上。</code></pre><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>有一说一，cdq分治确实有点难度，我花了几天的时间在上面。<br>难点就在于怎么用左边的信息更新右边的，什么时候更新，而且不能用右边的信息更新右边的信息。<br>这种分治的思想确实很神奇。</p><p>当然，树状数组的解法也很神奇，<a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/solution/yi-bu-yi-bu-tui-dao-chu-zui-you-jie-fa-2-zui-chang/" target="_blank" rel="noopener">这位大佬的题解</a>值得一看。</p><p><a href="https://zhuanlan.zhihu.com/p/55322598" target="_blank" rel="noopener">拓展：CDQ多维分治</a></p><h1 id="最大子矩阵"><a href="#最大子矩阵" class="headerlink" title="最大子矩阵"></a><a href="https://leetcode-cn.com/problems/max-submatrix-lcci/" target="_blank" rel="noopener">最大子矩阵</a></h1><h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a><a href="https://www.cnblogs.com/OIerShawnZhou/p/7348088.html" target="_blank" rel="noopener">二维前缀和</a></h2><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200319144759.png" alt="20200319144759.png"></p><pre><code>sum[i][j] = sum[i][j - 1] + sum[i - 1][j] + matrix[i - 1][j - 1] - sum[i - 1][j - 1];</code></pre><h3 id="二维前缀和-暴力-O-n-2m-2"><a href="#二维前缀和-暴力-O-n-2m-2" class="headerlink" title="二维前缀和+暴力$O(n^2m^2)$"></a>二维前缀和+暴力$O(n^2m^2)$</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// O(n^2m^2)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// init</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// brute force</span><span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> j<span class="token punctuation">;</span> w <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> curSum <span class="token operator">=</span> sum<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curSum <span class="token operator">></span> maxn<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    maxn <span class="token operator">=</span> curSum<span class="token punctuation">;</span>                    ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h2><h3 id="一种错误的思路"><a href="#一种错误的思路" class="headerlink" title="一种错误的思路"></a>一种错误的思路</h3><p>事实证明，如果一开始思路是错的，怎么做都是错的</p><pre><code>f[i][j]表示以(i,j)为右下角的最大矩阵和f[i][j]=max{matrix[i][j],(i-1,j-1)转移,(i-1,j)转移,(i,j-1)转移}g[i][j]表示以(i,j)为右下角的最大矩阵的左上角坐标(i,j)从(i-1,j-1)或(i-1,j)或(i,j-1)转移过来：</code></pre><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/4566e6b10357bbe759524708d095a05.jpg" alt="4566e6b10357bbe759524708d095a05.jpg"></p><pre class=" language-cpp"><code class="language-cpp">x <span class="token operator">=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">int</span> left <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">int</span> top <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">int</span> diagonal <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span>看起来很有道理是吗<span class="token operator">?</span><span class="token punctuation">)</span></code></pre><p>反例</p><pre><code>-1  -28   -92    9maxn=11!=102 9是转移不到的</code></pre><p><strong>注意：最优子结构和无后效性</strong></p><h3 id="正确的dp"><a href="#正确的dp" class="headerlink" title="正确的dp"></a><a href="https://leetcode-cn.com/problems/max-submatrix-lcci/solution/zhe-yao-cong-zui-da-zi-xu-he-shuo-qi-you-jian-dao-/" target="_blank" rel="noopener">正确的dp</a></h3><p>把二维的最大矩阵和转化为一维的最大子段和</p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200319211407.png" alt="20200319211407.png"></p><p>枚举<code>i,j</code>,求数组<code>b</code>的最大字段和</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getMaxMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>matrix<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">memset</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    row<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    maxSum <span class="token operator">+</span><span class="token operator">=</span> row<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxSum <span class="token operator">></span> maxn<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        maxn <span class="token operator">=</span> maxSum<span class="token punctuation">;</span>                        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxSum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        left <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>太难了，终于AC了</p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200319215201.png" alt="20200319215201.png"></p><h1 id="一道有趣的bfs题"><a href="#一道有趣的bfs题" class="headerlink" title="一道有趣的bfs题"></a><a href="https://leetcode-cn.com/problems/check-if-there-is-a-valid-path-in-a-grid/submissions/" target="_blank" rel="noopener">一道有趣的bfs题</a></h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>街道：把街道两侧的两个点（不包括街道所在的点）连接起来</strong></p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200322212949.png" alt="20200322212949.png"><br>如图所示，左上角的街道<code>(0,0)</code>将两个点<code>(0,-1)</code>,<code>(0,1)</code>连接起来</p><p>加到队列里面的是点，不是街道<br>定义完街道以后，可以开始遍历了，从左上角<code>(0,0)</code>开始bfs，看看当前点的街道把哪两个点连在一起了？</p><p>这里我加了两个数组简化程序,其中第0位是没用的，后面的第i位对应第i类街道</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> xdir<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ydir<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>等价于<span class="token keyword">switch</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是光这样写不能AC，最后三个点过不去，为什么呢？  </p><p>看一看数据:</p><pre><code>[[1,1,2]]横横竖</code></pre><p>第二个点把第一和第三个点连起来了，但是第三个点是到不了第二个点的<br>所以我们不仅要判断从第一个点能否到第三个点，还要判断从第三个点能否回到第一个点</p><p>那就算一算呗：由当前点可以推出被当前点所在街道连接的两个点<code>a,b</code>，由<code>a</code>点所在的街道又可以推回来，看一看能否到达当前点,<code>b</code>点同理，也判断一次。<br>这样就能够保证该条街道是双向的了。</p><pre class=" language-cpp"><code class="language-cpp">倒推回当前点的时候，要判断两个点，因为一条街道连接两个点，当前点可能是其中的一个<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">calNxt</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">calNxt</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a><code>unordered_set</code></h2><p>这个是用来查重的，就是一个存了<code>pair</code>的hash函数<br>重载hash函数那里我也不太懂，是抄别人的，可以上去看看<a href="https://zh.cppreference.com/w/cpp/container/unordered_set" target="_blank" rel="noopener">官方文档</a></p><pre class=" language-cpp"><code class="language-cpp">当找不到now的时候<span class="token punctuation">,</span>mark<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>会返回mark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>找到now就说明这个点之前已经遍历过了，于是跳过它<span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">!=</span> mark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span></code></pre><h2 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h2><p>448 ms    55.5 MB</p><p>双百（是因为交的人少）</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> xdir<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ydir<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">struct</span> HashPair    <span class="token punctuation">{</span>        size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">size_t</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100000007</span> <span class="token operator">+</span> key<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">calNxt</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> grid<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> xdir<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> ydir<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">hasValidPath</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>        unordered_set<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> HashPair<span class="token operator">></span> mark<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> ans <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">==</span> ans<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这个点走过了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">!=</span> mark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">auto</span> <span class="token punctuation">[</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calNxt</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nx <span class="token operator">>=</span> m <span class="token operator">||</span> ny <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ny <span class="token operator">>=</span> n<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">calNxt</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">calNxt</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="并查集？"><a href="#并查集？" class="headerlink" title="并查集？"></a>并查集？</h2><p>根据分析，一条街道就是把两个点连接起来，问题就是求<code>(0,0)</code>和<code>(m-1,n-1)</code>是否连通</p><p>这不就可以用并查集了吗？</p><p>如果当前点所在的街道是双向的，就合并该街道两端的点。<br>最后查询<code>(0,0)</code>和<code>(m-1,n-1)</code>的祖先是否相等<br>相等就说明两个点连通</p><h3 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h3><p>264 ms    24.2 MB    </p><p>这个更快，更省空间哦  </p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> xdir<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ydir<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">90005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">calNxt</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> grid<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> xdir<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> ydir<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> fx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> fy <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fx <span class="token operator">!=</span> fy<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>fx<span class="token punctuation">]</span> <span class="token operator">=</span> fy<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">hasValidPath</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">*</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">auto</span> <span class="token punctuation">[</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calNxt</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nx <span class="token operator">>=</span> m <span class="token operator">||</span> ny <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ny <span class="token operator">>=</span> n<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">calNxt</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">calNxt</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">merge</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">*</span> m<span class="token punctuation">,</span> nx <span class="token operator">+</span> ny <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> m <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="题后总结"><a href="#题后总结" class="headerlink" title="题后总结"></a>题后总结</h2><p>其实这道题我比赛的时候也没有做出来，过一会再做就想出来了，看来还是比赛经验不足，紧张了</p><h1 id="Google-Kick-Start"><a href="#Google-Kick-Start" class="headerlink" title="Google Kick Start"></a><a href="https://codingcompetitions.withgoogle.com/kickstart" target="_blank" rel="noopener">Google Kick Start</a></h1><h1 id="2020-Round-A"><a href="#2020-Round-A" class="headerlink" title="2020 Round A"></a>2020 Round A</h1><h2 id="Plate-背包"><a href="#Plate-背包" class="headerlink" title="Plate: 背包"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7/00000000001d40bb" target="_blank" rel="noopener">Plate: 背包</a></h2><pre><code>Dr. Patel has N stacks of plates. Each stack contains K plates. Each plate has a positive beauty value, describing how beautiful it looks.Dr. Patel would like to take exactly P plates to use for dinner tonight. If he would like to take a plate in a stack, he must also take all of the plates above it in that stack as well.Help Dr. Patel pick the P plates that would maximize the total sum of beauty values.</code></pre><p>这其实是一道变形的分组背包，十分简单，但是我做了一个多小时…</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>有<code>N</code>个栈,想要取出某个栈中的盘子,就一定要把在它前面的都取出来  </p><p>转化一下问题:有<code>N</code>类物品,每一类最多取一个物品,求体积为<code>P</code>的背包能容纳的最大物品价值.</p><p>一个栈就是一类物品,里面每个物品的价值为盘子的前缀和,重量为它加上它前面的盘子数量.</p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200322151919.png" alt="20200322151919.png"></p><h3 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h3><p><code>f[v] = max(f[v], f[v - j] + sum[i][j])</code><br>这里的<code>j</code>就是物品重量,<code>sum[i][j]</code>就是物品价值</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">1505</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> caseNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> caseNum <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> caseNum<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> plateNum<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> k <span class="token operator">>></span> plateNum<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: "</span><span class="token punctuation">,</span> caseNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> res<span class="token punctuation">;</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> res<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> plateNum<span class="token punctuation">;</span> v <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> v<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>v <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> f<span class="token punctuation">[</span>plateNum<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Workout"><a href="#Workout" class="headerlink" title="Workout"></a>Workout</h2><p>Problem：<br>Tambourine has prepared a fitness program so that she can become more fit! The program is made of N sessions. During the i-th session, Tambourine will exercise for Mi minutes. The number of minutes she exercises in each session are strictly increasing.</p><p>The difficulty of her fitness program is equal to the maximum difference in the number of minutes between any two consecutive training sessions.</p><p>To make her program less difficult, Tambourine has decided to add up to K additional training sessions to her fitness program. She can add these sessions anywhere in her fitness program, and exercise any positive integer number of minutes in each of them. After the additional training session are added, the number of minutes she exercises in each session must still be strictly increasing. What is the minimum difficulty possible?</p><h3 id="错误的思路"><a href="#错误的思路" class="headerlink" title="错误的思路"></a>错误的思路</h3><p>差分后每次取差分数组的最大值，把最大值/2再插入到差分数组中</p><p>反例：</p><pre><code>[2, 12] → [2, 7, 12] difficulty=5 → [2, 7, 9, 12] difficulty=5[2, 12] → [2, 5, 12] difficulty=7 → [2, 5, 8, 12] difficulty=4程序结果：difficulty=10 -&gt; 5 -&gt; 3这是无法做到的</code></pre><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><ol><li>确定最终<code>difficulty</code>的值</li><li>验证能否满足最多插入<code>K</code>个数的条件</li></ol><p>设当前的<code>difficulty=d</code><br>每个区间能插入的数的个数为<code>ceil(区间长度/d)-1</code><br>遍历每个区间，算出要插入的数的个数的总和<code>kSum</code><br>找出第一个使<code>kSum&lt;=K</code>的<code>d</code>即为答案</p><p>注意到<code>d</code>越大，<code>kSum</code>越小，所以能用二分搜索找到使<code>kSum&lt;=K</code>的<code>d</code>的最小值</p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/3-22-2020-3-23-10-16-28" alt="3-22-2020-3-23-10-16-28"></p><pre><code>要把d[i]变成float否则ceil(1/3)=ceil(0)=0ceil(d[i] * 1.0 / mid) - 1</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        maxn <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> maxn<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> kSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> kSum <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            kSum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> mid<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kSum <span class="token operator">></span> k<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> caseNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> caseNum <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> caseNum<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: "</span><span class="token punctuation">,</span> caseNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> dp </tag>
            
            <tag> Google Kick Start </tag>
            
            <tag> cdq分治 </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.15 Notes</title>
      <link href="/2020/03/15/2020/3-15/"/>
      <url>/2020/03/15/2020/3-15/</url>
      
        <content type="html"><![CDATA[<h1 id="3-9-3-15-Learning-Notes"><a href="#3-9-3-15-Learning-Notes" class="headerlink" title="3.9-3.15 Learning Notes"></a>3.9-3.15 Learning Notes</h1><h1 id="Leetcode-Algorithm"><a href="#Leetcode-Algorithm" class="headerlink" title="Leetcode Algorithm"></a>Leetcode Algorithm</h1><h1 id="不使用额外空间"><a href="#不使用额外空间" class="headerlink" title="不使用额外空间"></a>不使用额外空间</h1><ul><li><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">原地删除排序好的数组中的重复项</a></li><li><a href="https://leetcode-cn.com/problems/sorted-merge-lcci/" target="_blank" rel="noopener">不使用额外空间合并排序的数组</a></li></ul><p>不用额外空间意味着只能在原地操作，而在原地操作需要注意不能影响到还未计算的部分。<br>基本思路：把已经计算过的部分视为新数组，在这部分里面操作不会影响到后面的结果。</p><p><a href="https://leetcode-cn.com/problems/sorted-merge-lcci/solution/yu-qi-jiao-shuang-zhi-zhen-bu-ru-cheng-zhi-wei-yua/" target="_blank" rel="noopener">我写的第二题的题解</a></p><h1 id="特殊的优先队列"><a href="#特殊的优先队列" class="headerlink" title="特殊的优先队列"></a><a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/" target="_blank" rel="noopener">特殊的优先队列</a></h1><p>这题不能直接套优先队列（堆）模板，因为这里面的<code>pop_front</code>是要返回原队列的头部，不是优先队列的头部(max/min)。但是<code>max_value</code>又需要在<code>O(1)</code>内完成查询，所以只用一个队列肯定不行。</p><p>于是我们需要用到一个神奇的辅助队列<code>sort_queue</code>，它的头部就是<code>max_value</code>。  </p><ul><li>如何维护<code>sort_queue</code>？</li><li>原始队列发生<code>pop_front</code>时<code>sort_queue</code>该怎么变动？</li></ul><p><a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/solution/python-xiang-jie-wei-he-tian-jia-fu-zhu-dui-lie-ji/" target="_blank" rel="noopener">详见大佬题解</a></p><h1 id="完全背包的变体：求最小物品数"><a href="#完全背包的变体：求最小物品数" class="headerlink" title="完全背包的变体：求最小物品数"></a><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">完全背包的变体：求最小物品数</a></h1><p>只会做背包类dp的我笑了</p><p><a href="https://leetcode-cn.com/problems/coin-change/solution/wan-quan-bei-bao-de-bian-ti-qiu-zui-xiao-wu-pin-by/" target="_blank" rel="noopener">我的题解</a></p><p>延伸阅读：<a href="https://github.com/tianyicui/pack" target="_blank" rel="noopener">背包九讲</a></p><h1 id="二叉树的直径"><a href="#二叉树的直径" class="headerlink" title="二叉树的直径"></a>二叉树的直径</h1><h2 id="计算二叉树的直径长度"><a href="#计算二叉树的直径长度" class="headerlink" title="计算二叉树的直径长度"></a><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/" target="_blank" rel="noopener">计算二叉树的直径长度</a></h2><p><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/dfszhong-wei-hu-zhi-jing-zui-da-zhi-by-backdoor/" target="_blank" rel="noopener">我的题解</a></p><p>一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径<code>可能</code>穿过根结点。<br>遍历每一个节点计算它的深度及经过它的最大直径长度<br>直径长度=左孩子深度+右孩子深度-根节点深度<em>2<br>`depth[lchild]+depth[rchild]-depth[node]</em>2]`  </p><h2 id="二叉树中的最大路径和"><a href="#二叉树中的最大路径和" class="headerlink" title="二叉树中的最大路径和"></a><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">二叉树中的最大路径和</a></h2><p>是上一题的进阶版  </p><p>跟上一题不一样，路径长度可能负值，所以遍历每个节点的时候不能直接算以当前节点为根节点的子树的所有路径长度之和。<br>如果左子树或右子树路径长度之和小于零就要舍去。</p><p>最长路径有三种情况：</p><pre><code>a.father   \    a   / \  b   c</code></pre><ul><li>b-&gt;a-&gt;c</li><li>a.father-&gt;a-&gt;b</li><li>a.father-&gt;a-&gt;c</li></ul><p>递归的时候怎么写呢？</p><pre class=" language-py"><code class="language-py">def dfs(root: TreeNode) -> int:    nonlocal max_path_sum    if root is None:        return 0    left_val = max(0, dfs(root.left))    right_val = max(0, dfs(root.right))    node_val = max(left_val, right_val)+root.val    max_path_sum = max(max_path_sum, left_val+right_val+root.val)    return node_val</code></pre><p>为什么只用<code>max_path_sum = max(max_path_sum, left_val+right_val+root.val)</code>就可以取三种情况中的最大值？</p><p>注意到<code>return node_val = max(left_val, right_val)+root.val</code>，以上面为例子，<code>dfs(a.father)=max(a.father-&gt;a-&gt;b,a.father-&gt;a-&gt;c)</code>实际上在上一层递归中已经计算了三种情况中的后两种，所以只需要计算第一种即可。  </p><h2 id="一个写递归的小心得"><a href="#一个写递归的小心得" class="headerlink" title="一个写递归的小心得"></a>一个写递归的小心得</h2><p>不要用脑子套进去一层层计算，要相信<code>dfs(a)</code>返回的就是<code>a</code>的<code>node_val</code>，不需要管里面的一层套一层的逻辑，只需要写好其中一层的逻辑，它自然就能够跑起来</p><h1 id="gcd-in-string"><a href="#gcd-in-string" class="headerlink" title="gcd in string"></a><a href="https://leetcode-cn.com/problems/greatest-common-divisor-of-strings/" target="_blank" rel="noopener">gcd in string</a></h1><p>求两个字符串的最大公因子</p><p>十分有趣的一道题，求两个数的最大公因子自然用欧几里得算法</p><pre class=" language-py"><code class="language-py">def gcd(a,b):    if a<b:        a,b=b,a    if b==0:        return a    gcd(b,a%b)</code></pre><p>那求两个字符串该怎么办呢？<br><a href="https://leetcode-cn.com/problems/greatest-common-divisor-of-strings/solution/1071-zi-fu-chuan-de-zui-da-gong-yin-zi-by-wonderfu/" target="_blank" rel="noopener">一个很棒的题解</a></p><ul><li><p>判断是否有解<br><code>str1+str2=str2+str1</code></p></li><li><p>有解的话最大公因子的长度是不是两个字符串长度的gcd？<br>是的，因为如果能循环以它的约数为长度的字符串，自然也能够循环以它为长度的字符串，所以这个理论长度就是我们要找的最优解。</p></li></ul><h1 id="求众数"><a href="#求众数" class="headerlink" title="求众数"></a>求众数</h1><p><a href="https://leetcode-cn.com/problems/majority-element-ii/solution/cong-lun-wen-jiao-du-jiang-jie-mo-er-tou-piao-fa-b/" target="_blank" rel="noopener">从论文角度讲解摩尔投票法</a></p><p>pairing阶段：两个不同选票的人进行对抗，并会同时击倒对方，当剩下的人都是同一阵营，相同选票时，结束。</p><p>counting阶段：计数阶段，对最后剩下的下进行选票计算统计，判断选票是否超过总票数的一半，选票是否有效。</p><h2 id="出现次数大于n-2"><a href="#出现次数大于n-2" class="headerlink" title="出现次数大于n/2"></a><a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">出现次数大于n/2</a></h2><p>这题有很多种做法：</p><ul><li>排序后中间元素即为众数</li><li>hashtable存储</li><li>随机选取并验证</li><li>分治</li><li>摩尔投票法<h2 id="出现次数大于n-3"><a href="#出现次数大于n-3" class="headerlink" title="出现次数大于n/3"></a><a href="https://leetcode-cn.com/problems/majority-element-ii/" target="_blank" rel="noopener">出现次数大于n/3</a></h2><a href="https://leetcode-cn.com/problems/majority-element-ii/solution/liang-fu-dong-hua-yan-shi-mo-er-tou-piao-fa-zui-zh/" target="_blank" rel="noopener">摩尔投票法</a></li></ul><p>上一题是选一个代表，这题是选两个代表<br>本质是选票抵消，但是需要注意代码逻辑</p><h1 id="买卖股票的最佳时机-6"><a href="#买卖股票的最佳时机-6" class="headerlink" title="买卖股票的最佳时机*6"></a>买卖股票的最佳时机*6</h1><p>（但是我还是不会怎么买卖股票）</p><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。<br>注意你不能在买入股票前卖出股票。</p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/" target="_blank" rel="noopener">一个方法团灭六个问题</a></p><h2 id="I"><a href="#I" class="headerlink" title="I"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">I</a></h2><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票）<br><code>max(price[i]-price[j]) (i&gt;j)</code></p><h2 id="II"><a href="#II" class="headerlink" title="II"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">II</a></h2><p>你可以尽可能地完成更多的交易（多次买卖一支股票）<br>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）<br>贪心：当前策略总是全局最佳策略<br>今天比昨天高就买，否则不买</p><h2 id="III"><a href="#III" class="headerlink" title="III"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">III</a></h2><p>你最多可以完成两笔交易</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>遍历划分点，把数组分成两部分，分别计算两部分的最大利润，相当于<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">第一题</a></p><p>但是直接算会超时，这里用一个小优化，提前算好从左边到划分点的最大利润<code>left_max</code>和从有右边到划分点的最大利润<code>right_max</code><br>算<code>right_max</code>时注意要逆向思考，记录的是<code>max_price</code></p><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><pre class=" language-py"><code class="language-py">class Solution:    def maxProfit(self, prices) -> int:        if not prices:            return 0        # left_max: [0,i] max profit        left_max = [0] * len(prices)        min_price = prices[0]        for i in range(1, len(prices)):            min_price = min(min_price, prices[i])            left_max[i] = max(left_max[i - 1], prices[i] - min_price)        # right_max: [i,len-1] max profit        right_max = [0] * len(prices)        max_price = prices[-1]        for i in range(len(prices)-2, -1, -1):            max_price = max(max_price, prices[i])            right_max[i] = max(right_max[i + 1], max_price-prices[i])        max_profit = 0        for i in range(0, len(prices)):            max_profit = max(max_profit, left_max[i]+right_max[i])        return max_profit</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">此类问题的通法</a></p><h4 id="状态定义"><a href="#状态定义" class="headerlink" title="状态定义"></a>状态定义</h4><p><code>f[i][j][k]</code>表示第i天，进行了j次交易，当前状态为k时的最大利润<br>该题中$j&lt;=2$<br>k=0表示没有持有股票，k=1表示持有股票</p><h4 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h4><pre><code>f[i][j][0] = max(f[i - 1][j][1] + prices[i - 1], f[i - 1][j][0])f[i][j][1] = max(f[i - 1][j][1], f[i - 1][j - 1][0] - prices[i - 1])</code></pre><h4 id="初始状态定义"><a href="#初始状态定义" class="headerlink" title="初始状态定义"></a>初始状态定义</h4><pre><code>f[i][0][0] = 0f[i][0][1] = -inff[0][i][0] = -inff[0][i][1] = -inf</code></pre><h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>prices<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">30000</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>            f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="IV"><a href="#IV" class="headerlink" title="IV"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">IV</a></h2><p>你最多可以完成 k 笔交易</p><p>这道题就用通解</p><p>注意当<code>k&gt;=n</code>的时候转化为第二题的情况，直接用贪心算法。不然时间和空间都会爆炸的。</p><h3 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>prices<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用贪心处理能随意买卖的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">>=</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    profit <span class="token operator">+</span><span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> profit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>            f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> maxProfit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            maxProfit <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxProfit<span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxProfit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="with-cooldown"><a href="#with-cooldown" class="headerlink" title="with cooldown"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">with cooldown</a></h2><p>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。<br>无限制交易次数<br>状态转移方程要改一改  </p><p>原来的：</p><pre><code>f[i][j][0] = max(f[i - 1][j][1] + prices[i - 1], f[i - 1][j][0])f[i][j][1] = max(f[i - 1][j][1], f[i - 1][j - 1][0] - prices[i - 1])</code></pre><p>现在要把第二维状态压掉并改一下卖股票的那条方程，相当于要过两天才能收到卖股票的钱</p><pre><code>f[i][0] = max(f[i - 2][1] + prices[i - 2], f[i - 1][0]);f[i][1] = max(f[i - 1][1], f[i - 1][0] - prices[i - 1]);</code></pre><p>还要判断一下边界，因为如果最后一天卖出的话，就会收不到钱</p><pre><code>f[n + 1][0] = max(f[n - 1][1] + prices[n - 1], f[n][0]);return max(f[n + 1][0], f[n][0]);</code></pre><h3 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>prices<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="一种更快的方法"><a href="#一种更快的方法" class="headerlink" title="一种更快的方法"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/dong-tai-gui-hua-by-liweiwei1419-5/" target="_blank" rel="noopener">一种更快的方法</a></h3><p>把冷冻期也视为一种状态<br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200313182251.png" alt="20200313182251.png"></p><p>再加上滚动变量</p><h4 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> preCash <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> preStock <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>preCash<span class="token punctuation">,</span> preStock <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>preStock<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> preCash<span class="token punctuation">;</span>    preCash <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    preStock <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="with-transaction-fee"><a href="#with-transaction-fee" class="headerlink" title="with transaction fee"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">with transaction fee</a></h2><p>你可以无限次地完成交易，但是你每次交易都需要付手续费。</p><p>改一点点就可以了,买的时候把fee减掉</p><pre><code>f[i][1] = max(f[i - 1][1], f[i - 1][0] - prices[i - 1]-fee);</code></pre><h3 id="code-5"><a href="#code-5" class="headerlink" title="code"></a>code</h3><p>压缩状态,当前状态只依赖于上一状态</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="Eight-Queens"><a href="#Eight-Queens" class="headerlink" title="Eight Queens"></a>Eight Queens</h1><h2 id="求解决方案"><a href="#求解决方案" class="headerlink" title="求解决方案"></a>求解决方案</h2><p>dfs+回溯</p><p>从第一行开始放，一直放到最后一行<br>用四个bool数组判断行，列，左对角线，右对角线有没有皇后<br>dfs出来记得把状态恢复原位</p><h3 id="只要一个方案"><a href="#只要一个方案" class="headerlink" title="只要一个方案"></a>只要一个方案</h3><p>CSC1001 Assignment2</p><p>找到一个直接<code>exit()</code></p><h3 id="求所有方案"><a href="#求所有方案" class="headerlink" title="求所有方案"></a><a href="https://leetcode-cn.com/problems/n-queens/" target="_blank" rel="noopener">求所有方案</a></h3><h2 id="求方案个数"><a href="#求方案个数" class="headerlink" title="求方案个数"></a><a href="https://leetcode-cn.com/problems/n-queens-ii/" target="_blank" rel="noopener">求方案个数</a></h2><h3 id="进阶-状态压缩-位运算"><a href="#进阶-状态压缩-位运算" class="headerlink" title="进阶:状态压缩+位运算"></a>进阶:状态压缩+位运算</h3><p>先上代码</p><h4 id="code-6"><a href="#code-6" class="headerlink" title="code"></a>code</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> full<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token punctuation">,</span> <span class="token keyword">int</span> leftdown<span class="token punctuation">,</span> <span class="token keyword">int</span> rightdown<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>col <span class="token operator">==</span> full<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//每一列都已经有皇后了，说明满了</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>ans<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// col|leftdown|rightdown 任何一个是1都不行，表示在皇后攻击范围内</span>        <span class="token comment" spellcheck="true">// 取反后，1是可以放的位置，0是不能放的</span>        <span class="token comment" spellcheck="true">// 与 11111(n个1)与运算后把高位舍去，剩下的位数为棋盘的边长</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> full <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>col <span class="token operator">|</span> leftdown <span class="token operator">|</span> rightdown<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>now<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取最低一位1，表示在这里放一个皇后</span>            <span class="token keyword">int</span> lowbit <span class="token operator">=</span> now <span class="token operator">&amp;</span> <span class="token operator">-</span>now<span class="token punctuation">;</span>            now <span class="token operator">-</span><span class="token operator">=</span> lowbit<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新3个状态</span>            <span class="token comment" spellcheck="true">// row是没有用的，因为row已经包含在col里面了</span>            <span class="token comment" spellcheck="true">// col=col+lowbit</span>            <span class="token comment" spellcheck="true">// leftdown=(leftdown+lowbit)&lt;&lt;1</span>            <span class="token comment" spellcheck="true">// rightdown=(rightdown+lowbit)>>1</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>col <span class="token operator">+</span> lowbit<span class="token punctuation">,</span> <span class="token punctuation">(</span>leftdown <span class="token operator">+</span> lowbit<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>rightdown <span class="token operator">+</span> lowbit<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">totalNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        full <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>一种非常牛逼的解法，需要有高超的位运算能力。</p><p>简单来说，就是把原来的4个bool数组压缩成了3个int数，用这三个数的每一位表示约束条件。<br>因为不需要输入方案，只求方案个数，所以不需要存储之前的皇后位置。</p><h4 id="状态表示"><a href="#状态表示" class="headerlink" title="状态表示"></a>状态表示</h4><p><code>1</code>表示在皇后的攻击范围里面<br><code>0</code>表示可以放皇后</p><h4 id="full"><a href="#full" class="headerlink" title="full"></a>full</h4><pre><code>n=5full=2^5-1=31=11111</code></pre><p>5个1表示放满了</p><h4 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h4><p>取二进制数的最低位<br>在while里面起到遍历当前行所有能放皇后的位置</p><pre><code>lowbit(x)=x&amp;-x</code></pre><h4 id="col"><a href="#col" class="headerlink" title="col"></a>col</h4><p>这个最容易理解，如果某一位上是1，就说明之前在这列上有皇后。<br>位数对应列数</p><p>假设现在dfs到第三行，前面两行的皇后分别放在第一和第四列</p><pre><code>1 0 0 00 0 0 11 0 0 1col=1001</code></pre><h4 id="leftdown"><a href="#leftdown" class="headerlink" title="leftdown"></a>leftdown</h4><p>右上到左下的对角线,加上当前行的皇后位置后，<strong>整体</strong>左移一位</p><p>dfs到第三行</p><pre><code>  0 0 1 0  1 0 0 01 1 0 0 0leftdown=11000实际上最高位的1被舍去了，因为有full&amp;</code></pre><h4 id="rightdown"><a href="#rightdown" class="headerlink" title="rightdown"></a>rightdown</h4><p>左上到右下的对角线，加上当前行的皇后位置后，<strong>整体</strong>右移一位</p><pre><code>0 1 0 00 0 0 10 0 0 1 1rightdown=00011实际上最右侧的1被舍去了，位运算的overflow</code></pre><h1 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">LIS</a></h1><h2 id="O-n-2-dp"><a href="#O-n-2-dp" class="headerlink" title="O(n^2) dp"></a>O(n^2) dp</h2><pre><code>Lis[i]表示以nums[i]为结尾的最长上升序列的长度Lis[i]=max(Lis[j]+1) j&lt;i and nums[j]&lt;nums[i]</code></pre><h2 id="O-nlogn-二分-贪心"><a href="#O-nlogn-二分-贪心" class="headerlink" title="O(nlogn) 二分+贪心"></a>O(nlogn) 二分+贪心</h2><pre><code>Lis[]存储当前的最长上升序列如果当前的数比Lis中最后一位还要大，Lis[++ans]=nums[i]如果小的话，就在Lis数组（单调递增）中二分查找大于等于nums[i]的第一个数</code></pre><p><a href="https://zhuanlan.zhihu.com/p/40579713" target="_blank" rel="noopener">二分查找教程</a></p><h3 id="code-7"><a href="#code-7" class="headerlink" title="code"></a>code</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> Lis<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Lis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> Lis<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Lis<span class="token punctuation">[</span><span class="token operator">++</span>ans<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> ans<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Lis<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    right <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Lis<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="变式：求LIS的数量"><a href="#变式：求LIS的数量" class="headerlink" title="变式：求LIS的数量"></a><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence" target="_blank" rel="noopener">变式：求LIS的数量</a></h2><p>说实话，这题想了挺久的，也调了很久。</p><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><p>与求LIS的O(n^2)算法类似，多维护一个<code>MaxLength[]</code>数组，记录到当前位置LIS的长度</p><pre class=" language-cpp"><code class="language-cpp">j<span class="token operator">&lt;</span>i <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// Lis[i] == Lis[j] + 1 说明之前已经找到长度为Lis[i]的LIS了 现在还有一种方案，于是将两种方案数相加</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> Lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    MaxLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> MaxLength<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Lis[i] &lt; Lis[j] + 1 说明之前没有找到LIS，直接将方案数转移</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> Lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    MaxLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> MaxLength<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="code-8"><a href="#code-8" class="headerlink" title="code"></a>code</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findNumberOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> Lis<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> MaxLength<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> LisLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MaxLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> Lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    MaxLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> MaxLength<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> Lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    MaxLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> MaxLength<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 一边遍历一遍维护答案</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> LisLength<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                LisLength <span class="token operator">=</span> Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> MaxLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> LisLength<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans <span class="token operator">+</span><span class="token operator">=</span> MaxLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><h1 id="岛屿"><a href="#岛屿" class="headerlink" title="岛屿"></a><a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">岛屿</a></h1><h2 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h2><p>小优化：不需要用额外的bool数组记录是否访问过，直接将访问过的陆地变为水就可以了。</p><p>注意area的计算，每次dfs到下一个点，都要更新area的值并返回给上一个点，这样就能保证dfs入口处返回的area是总的大小</p><h2 id="code-9"><a href="#code-9" class="headerlink" title="code"></a>code</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> maxArea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">,</span> <span class="token keyword">int</span> area<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> nxtRow <span class="token operator">=</span> row <span class="token operator">+</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> nxtCol <span class="token operator">=</span> col <span class="token operator">+</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nxtRow <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nxtRow <span class="token operator">>=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> nxtCol <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nxtCol <span class="token operator">>=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>nxtRow<span class="token punctuation">]</span><span class="token punctuation">[</span>nxtCol<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                area <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> nxtRow<span class="token punctuation">,</span> nxtCol<span class="token punctuation">,</span> area <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> area<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    maxArea <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxArea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxArea<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="变式：求岛屿数量"><a href="#变式：求岛屿数量" class="headerlink" title="变式：求岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">变式：求岛屿数量</a></h2><p>比上一题简单一点，只需要记录dfs了多少次即可，不需要求面积。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                maxArea <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxArea<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxArea<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
            <tag> dp </tag>
            
            <tag> dfs </tag>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.8 Notes</title>
      <link href="/2020/03/08/2020/3-8/"/>
      <url>/2020/03/08/2020/3-8/</url>
      
        <content type="html"><![CDATA[<h1 id="3-2-3-8-Learning-Notes"><a href="#3-2-3-8-Learning-Notes" class="headerlink" title="3.2-3.8 Learning Notes"></a>3.2-3.8 Learning Notes</h1><h1 id="CSAPP"><a href="#CSAPP" class="headerlink" title="CSAPP"></a>CSAPP</h1><h2 id="int-compare-with-unsigned-int"><a href="#int-compare-with-unsigned-int" class="headerlink" title="int compare with unsigned int"></a>int compare with unsigned int</h2><p><strong>If there is a mix    of unsigned and    signed    in    single    expression,<br>signed    values    implicitly    cast    to    unsigned</strong></p><p>2’s Complement–&gt;补码</p><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304172430.png" alt="20200304172430.png"><br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304171926.png" alt="20200304171926.png"><br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304171945.png" alt="20200304171945.png"><br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304172228.png" alt="20200304172228.png"></p><h2 id="Expanding"><a href="#Expanding" class="headerlink" title="Expanding"></a>Expanding</h2><ul><li>Unsigned: add zeros</li><li>Signed: sign extension:convert w-bit signed int x to w+k-bit int with same value</li></ul><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304172756.png" alt="20200304172756.png"></p><h2 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h2><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304210656.png" alt="20200304210656.png"></p><h3 id="Multiplication"><a href="#Multiplication" class="headerlink" title="Multiplication"></a>Multiplication</h3><p>Use shift to replace multiply because it’s much faster</p><pre class=" language-python"><code class="language-python">u<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token operator">==</span>u<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">==</span>u<span class="token operator">*</span><span class="token number">24</span></code></pre><h2 id="How-to-use-the-unsigned"><a href="#How-to-use-the-unsigned" class="headerlink" title="How to use the unsigned"></a>How to use the unsigned</h2><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304211256.png" alt="20200304211256.png"></p><p><code>i</code> will go around and become larger than cnt.<br>It works even if cnt is signed and <code>&lt;0</code></p><h2 id="Integer-Puzzles"><a href="#Integer-Puzzles" class="headerlink" title="Integer Puzzles"></a>Integer Puzzles</h2><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/InkedInkedCPuzzles_LI.jpg" alt="InkedInkedCPuzzles_LI.jpg"></p><ul><li>overflow in + and *</li><li>TMin (TMin取反后还是自己，因为只有它不对称)</li><li>transformation between signed and unsigned</li></ul><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><p><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304213943.png" alt="20200304213943.png"></p><ul><li>logical shift: Fill with 0 on left</li><li>arithmetic shift: Replicate most significant bit on left<h3 id="Division-for-signed-number"><a href="#Division-for-signed-number" class="headerlink" title="Division for signed number"></a>Division for signed number</h3><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304214543.png" alt="20200304214543.png"><br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/20200304214627.png" alt="20200304214627.png"></li></ul><p>红色是符号位和arithmetic shift<br>黄色是数字位  </p><p><code>+2^k-1</code>可能会让数字位<code>+1</code>,这样商也会<code>+1</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1 Notes</title>
      <link href="/2020/03/01/2020/3-1/"/>
      <url>/2020/03/01/2020/3-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-13-3-1-Learning-Notes"><a href="#1-13-3-1-Learning-Notes" class="headerlink" title="1.13-3.1 Learning Notes"></a>1.13-3.1 Learning Notes</h1><p>一眨眼，就鸽了一个多月了……</p><h1 id="Python-Spider-for-2019-nCoV-on-Weibo"><a href="#Python-Spider-for-2019-nCoV-on-Weibo" class="headerlink" title="Python Spider for 2019-nCoV on Weibo"></a>Python Spider for 2019-nCoV on Weibo</h1><p>Selenium+Wordcloud+Mysql<br>由于之前已经封装好了Wordcloud和Mysql的接口，直接调用即可<br><a href="https://zhuanlan.zhihu.com/p/78247846" target="_blank" rel="noopener">一篇关于python多文件项目管理的文章</a></p><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>这次做了一个模拟登陆的操作，输入用户名和密码并点击登陆。这里需要一点网页分析<br><code>driver.find_element_by_xpath().send_keys()</code><br><code>driver.find_element_by_xpath().click()</code><br>后面再把微博内容对应的元素找到就行了<br>偷懒没有做展开全文的功能（有些微博比较长）</p><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>注意要把#标签内容#去掉，否则生成的词云不准确<br>我做的这个只能爬50页数据，不会做反反爬虫<br><img src="https://raw.githubusercontent.com/doutv/Picbed/master/img/weibohot2020-02-03-10-39-39.png" alt="2月3号的数据"></p><h1 id="The-Missing-Semester-of-Your-CS-Education-by-MIT"><a href="#The-Missing-Semester-of-Your-CS-Education-by-MIT" class="headerlink" title="The Missing Semester of Your CS Education by MIT"></a><a href="https://missing.csail.mit.edu/" target="_blank" rel="noopener">The Missing Semester of Your CS Education by MIT</a></h1><p>这是一门MIT的网课，内容特别神奇，讲的是各种工具/技巧的使用</p><h2 id="Schedule"><a href="#Schedule" class="headerlink" title="Schedule"></a>Schedule</h2><p>Course overview + the shell<br>Shell Tools and Scripting<br>Editors (Vim)<br>Data Wrangling<br>Command-line Environment<br>Version Control (Git)<br>Debugging and Profiling<br>Metaprogramming<br>Security and Cryptography<br>Potpourri<br>Q&amp;A  </p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>current dir</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>. refers to the current directory, and .. to its parent directory</p><h3 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h3><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>the document for a command<br><code>man ls</code></p><h3 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h3><p>a brief usage for a command<br><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">tldr</a></p><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><pre><code>echo hello &gt; hello.txtecho hello &gt;&gt; hello.txt //appendcat &lt; hello.txt &gt; hello2.txtls -l | tail -n1ls -l | less</code></pre><h3 id=""><a href="#" class="headerlink" title="$"></a>$</h3><p>$0 - Name of the script<br>$1 to $9 - Arguments to the script. $1 is the first argument and so on.</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p><code>history</code>  listing history command<br><code>Ctrl+R</code>  finding recent command<br><code>Ctrl+C</code> When you want to delete the command.</p><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>The best editor is Vim.<br>强迫自己在VSC里面装上Vim插件，多用用就熟练了</p><ul><li>ci( change text in ()</li><li>dd</li><li>yy</li><li>p</li><li>o/O</li><li>u </li><li>dw delete word</li><li>cw change word</li><li>0/$ navigate within a line</li><li>line number+G</li><li>G/gg</li><li>f/t</li><li>/{regex} </li><li>q{character} record a macro</li><li>Ctrl+d/u<h3 id="games"><a href="#games" class="headerlink" title="games"></a>games</h3></li><li>vimtutor inside the Vim</li><li><a href="https://vim-adventures.com/" target="_blank" rel="noopener">Vim Adventures</a></li><li><a href="https://github.com/jmoon018/PacVim" target="_blank" rel="noopener">PacVim</a><h2 id="Data-Processing"><a href="#Data-Processing" class="headerlink" title="Data Processing"></a>Data Processing</h2><pre><code>ssh myserver journalctl| grep sshd | grep &quot;Disconnected from&quot;&#39; | less</code></pre></li></ul><p>ssh myserver journalctl<br> | grep sshd<br> | grep “Disconnected from”<br> | sed -E ‘s/.<em>Disconnected from (invalid |authenticating )?user (.</em>) [^ ]+ port [0-9]+( [preauth])?$/\2/‘</p><p>ssh myserver journalctl<br> | grep sshd<br> | grep “Disconnected from”<br> | sed -E ‘s/.<em>Disconnected from (invalid |authenticating )?user (.</em>) [^ ]+ port [0-9]+( [preauth])?$/\2/‘<br> | sort | uniq -c<br> | sort -nk1,1 | tail -n10<br> | awk ‘{print $2}’ | paste -sd,</p><pre><code>### grep### sed# [CSAPP](https://www.bilibili.com/video/av31289365?p=1)深入理解计算机系统  刚开始看，才看完第一课</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Python Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.12 Notes</title>
      <link href="/2020/01/12/2020/1-6/"/>
      <url>/2020/01/12/2020/1-6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-6-1-12-Learning-Notes"><a href="#1-6-1-12-Learning-Notes" class="headerlink" title="1.6-1.12 Learning Notes"></a>1.6-1.12 Learning Notes</h1><h1 id="python-spider"><a href="#python-spider" class="headerlink" title="python spider"></a>python spider</h1><p><a href="https://segmentfault.com/blog/papapa" target="_blank" rel="noopener">https://segmentfault.com/blog/papapa</a></p><h2 id="analyse-website"><a href="#analyse-website" class="headerlink" title="analyse website"></a>analyse website</h2><p>Chrome+F12</p><h3 id="construct-url"><a href="#construct-url" class="headerlink" title="construct url"></a>construct url</h3><p>通过对不同页面的url分析，得到有用的参数，从而构造出url</p><h2 id="request-header"><a href="#request-header" class="headerlink" title="request header"></a>request header</h2><h2 id="request-cookie"><a href="#request-cookie" class="headerlink" title="request cookie"></a>request cookie</h2><p>从request里面复制，模拟真实请求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cookie_to_dict</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">:</span>    cookie_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    items <span class="token operator">=</span> cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        key <span class="token operator">=</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        value <span class="token operator">=</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        cookie_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> cookie_dictr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span></code></pre><h2 id="select-info"><a href="#select-info" class="headerlink" title="select info"></a>select info</h2><h3 id="bs4"><a href="#bs4" class="headerlink" title="bs4"></a>bs4</h3><p>语法简单，容易上手</p><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><p>XML中查找信息<br>selenium里面也会用到</p><h3 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h3><p>应用范围最广，但是上手难<br><a href="https://regex101.com/r/dmRygT/1" target="_blank" rel="noopener">https://regex101.com/r/dmRygT/1</a><br><a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">https://deerchao.cn/tutorials/regex/regex.htm</a></p><h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><p><a href="https://segmentfault.com/a/1190000015750160" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015750160</a><br>模拟用户操作，实现反爬虫  </p><h3 id="find-element-vs-find-elements"><a href="#find-element-vs-find-elements" class="headerlink" title="find_element vs find_elements"></a>find_element vs find_elements</h3><p><code>find_element</code>  return a webelement<br><code>find_elements</code> return a iterable list<br><code>webelement.text</code> return text</p><pre class=" language-python"><code class="language-python">allComments <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">"//div[@class='itm']"</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> allComments<span class="token punctuation">:</span>    name <span class="token operator">=</span> each<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span>        <span class="token string">"./div[@class='cntwrap']/div[1]/div[1]/a"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text</code></pre><h3 id="等待网页加载"><a href="#等待网页加载" class="headerlink" title="等待网页加载"></a>等待网页加载</h3><h4 id="explicit"><a href="#explicit" class="headerlink" title="explicit"></a>explicit</h4><p>显式Wiats允许你设置一个加载时间的上限和一个条件，每隔0.5s就判断一下所设条件，条件成立就继续执行下面的代码，如果过了时间上限还是没有成立，默认抛出NoSuchElementException 异常。这种相对智能的等待方法能最大化地节省时间，应该优先选择使用</p><h4 id="implicit"><a href="#implicit" class="headerlink" title="implicit"></a>implicit</h4><p>driver.implicitly_wait(10)</p><h2 id="mysql-store-data"><a href="#mysql-store-data" class="headerlink" title="mysql store data"></a>mysql store data</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/identifiers.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/identifiers.html</a><br>用反引号`包住保留字（表名、字段名等）<br>用双引号”或单引号’包住字符串<br>在python里写sql时，用三个引号”””包住sql语句</p><pre class=" language-python"><code class="language-python">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS `netease`.`{}`"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""CREATE TABLE `{}` (    `id` INT NOT NULL AUTO_INCREMENT,    `name` VARCHAR(100),    `comment` VARCHAR(10000),    `lovenumber` INT,    `commenttime` VARCHAR(100),    PRIMARY KEY (`id`))"""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 上面均为反引号</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""INSERT INTO `netease`.`{tableName}`        (`name`,`comment`,`lovenumber`,`commenttime`) # 反引号        VALUES        ('{name}','{comment}',{lovenumber},'{commenttime}') # 引号        """</span> <span class="token punctuation">.</span>format<span class="token punctuation">(</span>tableName<span class="token operator">=</span>tableName<span class="token punctuation">,</span> name<span class="token operator">=</span>name<span class="token punctuation">,</span> comment<span class="token operator">=</span>comment<span class="token punctuation">,</span> lovenumber<span class="token operator">=</span>lovenumber<span class="token punctuation">,</span> commenttime<span class="token operator">=</span>commenttime<span class="token punctuation">)</span></code></pre><h3 id="OOP-Refactor"><a href="#OOP-Refactor" class="headerlink" title="OOP Refactor"></a>OOP Refactor</h3><p><code>__enter__</code> <code>__exit__</code><br>写这两个函数就可以用<code>with</code><br><a href="https://stackoverflow.com/questions/1984325/explaining-pythons-enter-and-exit" target="_blank" rel="noopener">https://stackoverflow.com/questions/1984325/explaining-pythons-enter-and-exit</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">Mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">,</span> database<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>host <span class="token operator">=</span> host        self<span class="token punctuation">.</span>user <span class="token operator">=</span> user        self<span class="token punctuation">.</span>password <span class="token operator">=</span> password        self<span class="token punctuation">.</span>database <span class="token operator">=</span> database        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span> user<span class="token operator">=</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span> password<span class="token operator">=</span>self<span class="token punctuation">.</span>password<span class="token punctuation">,</span> database<span class="token operator">=</span>self<span class="token punctuation">.</span>database<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fetchall</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">commit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="生成词云"><a href="#生成词云" class="headerlink" title="生成词云"></a>生成词云</h2><p>先用jieba分割词语，再用wordcloud</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token keyword">import</span> jieba<span class="token keyword">import</span> src<span class="token punctuation">.</span>Mysql<span class="token keyword">class</span> <span class="token class-name">MyWordCloud</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> song<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>song <span class="token operator">=</span> song        self<span class="token punctuation">.</span>origin_text <span class="token operator">=</span> self<span class="token punctuation">.</span>fromDBGetText<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wordlist_after_jieba <span class="token operator">=</span> self<span class="token punctuation">.</span>jiebaDiv<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wordcloud <span class="token operator">=</span> self<span class="token punctuation">.</span>getWordCloud<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fromDBGetText</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> src<span class="token punctuation">.</span>Mysql<span class="token punctuation">.</span>Mysql<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">'netease'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            SELECT comment FROM netease.{};            """</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>song<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>origin_text <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>origin_text    <span class="token keyword">def</span> <span class="token function">jiebaDiv</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>wordlist_after_jieba <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>            str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>origin_text<span class="token punctuation">)</span><span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>wordlist_after_jieba<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getWordCloud</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> WordCloud<span class="token punctuation">(</span>collocations<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span>                         height<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>generate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>wordlist_after_jieba<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># collocations=False 去除重复词语</span>    <span class="token keyword">def</span> <span class="token function">saveToFile</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>wordcloud<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'./img/{}.png'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>song<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">plotImg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>wordcloud<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="多线程、多进程"><a href="#多线程、多进程" class="headerlink" title="多线程、多进程"></a>多线程、多进程</h2><p>Learning~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Useful Commands</title>
      <link href="/2019/12/24/2019/useful-command/"/>
      <url>/2019/12/24/2019/useful-command/</url>
      
        <content type="html"><![CDATA[<h1 id="Some-Useful-Commands"><a href="#Some-Useful-Commands" class="headerlink" title="Some Useful Commands"></a>Some Useful Commands</h1><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>touch newfile.md</li><li>leafpad</li><li>tree</li><li>tmux  mutiple windows</li><li>ctrl+r 搜索最近命令<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2></li><li><code>i</code> insert model</li><li><code>:wq</code> save and exit</li><li><code>:q!</code> exit without save</li><li><code>dd</code> delete current line</li><li><code>hjkl</code> move cursor</li><li><code>u</code> undo</li><li><code>x</code> delete one text<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1></li><li><code>npm -i xxx -s</code><h1 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h1></li><li><code>cd\</code> 根目录</li><li><code>cd..</code> 上一级目录</li><li><code>cd &gt;test.md</code> 创建空文件<h1 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"></a>mkdir 创建目录</h1></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.22 Notes</title>
      <link href="/2019/12/22/2019/12.16/"/>
      <url>/2019/12/22/2019/12.16/</url>
      
        <content type="html"><![CDATA[<h1 id="12-16-12-22-Learning-Notes"><a href="#12-16-12-22-Learning-Notes" class="headerlink" title="12.16-12.22 Learning Notes"></a>12.16-12.22 Learning Notes</h1><h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><h2 id="set-up-server-on-AWS-EC2"><a href="#set-up-server-on-AWS-EC2" class="headerlink" title="set up server on AWS EC2"></a>set up server on AWS EC2</h2><p><a href="https://docs.mongodb.com/manual/introduction/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/introduction/</a><br><a href="https://ianlondon.github.io/blog/mongodb-auth/" target="_blank" rel="noopener">https://ianlondon.github.io/blog/mongodb-auth/</a></p><h2 id="securely-close-mongodb-service"><a href="#securely-close-mongodb-service" class="headerlink" title="securely close mongodb service"></a>securely close mongodb service</h2><pre><code>use admindb.shutdownServer()exit</code></pre><p>if not properly closed:<br>Run<br><code>ps -eaf | grep mongod</code> to find the running instance.<br>If running, kill the process <code>sudo kill &lt;pID&gt;</code> obtained from above grep command.<br><a href="https://stackoverflow.com/questions/44497009/mongod-error-98-unable-to-lock-file-data-db-mongod-lock-resource-temporarily/44498179" target="_blank" rel="noopener">https://stackoverflow.com/questions/44497009/mongod-error-98-unable-to-lock-file-data-db-mongod-lock-resource-temporarily/44498179</a></p><h2 id="connect-to-mongodb-server"><a href="#connect-to-mongodb-server" class="headerlink" title="connect to mongodb server"></a>connect to mongodb server</h2><p>Obtain your MongoDB connection string<br><a href="https://docs.mongodb.com/manual/reference/connection-string/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/connection-string/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.9 Notes</title>
      <link href="/2019/12/09/2019/12.9/"/>
      <url>/2019/12/09/2019/12.9/</url>
      
        <content type="html"><![CDATA[<h1 id="12-9-12-15-Learning-Notes"><a href="#12-9-12-15-Learning-Notes" class="headerlink" title="12.9-12.15 Learning Notes"></a>12.9-12.15 Learning Notes</h1><p>Final来了</p><h1 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h1><p>Free resources for student<br><a href="https://github.com/ivmm/Student-resources" target="_blank" rel="noopener">https://github.com/ivmm/Student-resources</a>  </p><p>玩一玩linux和云服务器</p><h2 id="connect-to-AWS"><a href="#connect-to-AWS" class="headerlink" title="connect to AWS"></a>connect to AWS</h2><p>需要一个密钥对，不是普通的输入密码<br>服务器重启后地址会改变，要手动更换</p><h3 id="putty-amp-ssh"><a href="#putty-amp-ssh" class="headerlink" title="putty&amp;ssh"></a>putty&amp;ssh</h3><p>set font in putty</p><h2 id="sudo大法好"><a href="#sudo大法好" class="headerlink" title="sudo大法好"></a>sudo大法好</h2><p>能解决很多奇怪的问题</p><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>really hard to learn<br><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">https://coolshell.cn/articles/5426.html</a></p><h2 id="run-mysql"><a href="#run-mysql" class="headerlink" title="run mysql"></a>run mysql</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04</a></p><h2 id="run-ss-server"><a href="#run-ss-server" class="headerlink" title="run ss server"></a>run ss server</h2><p><a href="https://cs.xieyonghui.com/linux/shadowsocks-install-and-configuration_20.html" target="_blank" rel="noopener">https://cs.xieyonghui.com/linux/shadowsocks-install-and-configuration_20.html</a></p><h3 id="differences-between-vpn-and-ss"><a href="#differences-between-vpn-and-ss" class="headerlink" title="differences between vpn and ss"></a>differences between vpn and ss</h3><p><a href="https://superuser.com/questions/1233614/what-is-the-difference-between-shadowsocks-and-openvpn" target="_blank" rel="noopener">https://superuser.com/questions/1233614/what-is-the-difference-between-shadowsocks-and-openvpn</a></p><h1 id="sourcetrail"><a href="#sourcetrail" class="headerlink" title="sourcetrail"></a>sourcetrail</h1><p>一个神奇的项目代码可视化工具<br><a href="https://www.sourcetrail.com/documentation/" target="_blank" rel="noopener">https://www.sourcetrail.com/documentation/</a></p><h1 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h1><p>略微了解<br><a href="https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript/35048303#35048303" target="_blank" rel="noopener">https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript/35048303#35048303</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Cloud Server </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.2 Notes</title>
      <link href="/2019/12/02/2019/12.2/"/>
      <url>/2019/12/02/2019/12.2/</url>
      
        <content type="html"><![CDATA[<h1 id="12-2-12-8-Learning-Notes"><a href="#12-2-12-8-Learning-Notes" class="headerlink" title="12.2-12.8 Learning Notes"></a>12.2-12.8 Learning Notes</h1><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>写OJ题就<code>public static</code></p><ul><li>静态</li><li>实例</li><li>类</li></ul><h1 id="SecondMST"><a href="#SecondMST" class="headerlink" title="SecondMST"></a>SecondMST</h1><h2 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h2><p>暴力枚举不在最小生成树中的边(u,v,w)（称为无用边）<br>求最小生成树中u-v的权值最大的边，用当前枚举到的无用边（称为关键边）替换权值最大的边，得到一棵生成树。<br>枚举所有无用边后，取最大的生成树即为次小生成树。</p><p>用倍增+LCA求u-v中权值最大的边<br><code>O(nlogn)</code>（不包括求最小生成树的复杂度）</p><h2 id="严格次小生成树"><a href="#严格次小生成树" class="headerlink" title="严格次小生成树"></a>严格次小生成树</h2><p><a href="https://www.luogu.com.cn/problem/P4180" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P4180</a><br>倍增时多维护一个u-v上的严格次大值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">calSecondMax</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> maxn1<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxn2<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> secondmaxn1<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> secondmaxn2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxn1 <span class="token operator">></span> maxn2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn2<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>secondmaxn1<span class="token punctuation">,</span> secondmaxn2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxn1 <span class="token operator">&lt;</span> maxn2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn1<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>secondmaxn1<span class="token punctuation">,</span> secondmaxn2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxn1 <span class="token operator">==</span> maxn2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>secondmaxn1<span class="token punctuation">,</span> secondmaxn2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dfs中初始化倍增数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wMax<span class="token punctuation">[</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wSecondMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calSecondMax</span><span class="token punctuation">(</span>wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wMax<span class="token punctuation">[</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wSecondMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wSecondMax<span class="token punctuation">[</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//计算u-v最大边权</span><span class="token comment" spellcheck="true">//keyweight是关键边长度</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">calUtoVMaxWeight</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> u<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> keyweight<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> umaxWeight <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> vmaxWeight <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> maxDepth<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>depth<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> depth<span class="token punctuation">[</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当关键边长度=最大边权时，取严格次大值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> keyweight<span class="token punctuation">)</span>                umaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>umaxWeight<span class="token punctuation">,</span> wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                umaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>umaxWeight<span class="token punctuation">,</span> wSecondMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            u <span class="token operator">=</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span>        <span class="token keyword">return</span> umaxWeight<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> maxDepth<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 两种写法等价</span>            <span class="token comment" spellcheck="true">// 1.求四个数中的严格次小值</span>            <span class="token comment" spellcheck="true">// long long maxn = max(wMax[v][j], wMax[u][j]);</span>            <span class="token comment" spellcheck="true">// long long minx = min(wMax[v][j], wMax[u][j]);</span>            <span class="token comment" spellcheck="true">// if (maxn &lt; keyweight)</span>            <span class="token comment" spellcheck="true">// {</span>            <span class="token comment" spellcheck="true">//     maxWeight = max(maxWeight, maxn);</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">// else if (minx &lt; keyweight)</span>            <span class="token comment" spellcheck="true">// {</span>            <span class="token comment" spellcheck="true">//     maxWeight = max(max(minx, maxWeight), max(wSecondMax[v][j], wSecondMax[u][j]));</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">// else</span>            <span class="token comment" spellcheck="true">// {</span>            <span class="token comment" spellcheck="true">//     maxWeight = max(maxWeight, max(wSecondMax[v][j], wSecondMax[u][j]));</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">// 2.LCA(u,v)左右子树分开来计算，最后再合并</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> keyweight<span class="token punctuation">)</span>                umaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>umaxWeight<span class="token punctuation">,</span> wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                umaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>umaxWeight<span class="token punctuation">,</span> wSecondMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            u <span class="token operator">=</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wMax<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> keyweight<span class="token punctuation">)</span>                vmaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>vmaxWeight<span class="token punctuation">,</span> wMax<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                vmaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>vmaxWeight<span class="token punctuation">,</span> wSecondMax<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v <span class="token operator">=</span> f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> keyweight<span class="token punctuation">)</span>        umaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>umaxWeight<span class="token punctuation">,</span> wMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        umaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>umaxWeight<span class="token punctuation">,</span> wSecondMax<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wMax<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> keyweight<span class="token punctuation">)</span>        vmaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>vmaxWeight<span class="token punctuation">,</span> wMax<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        vmaxWeight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>vmaxWeight<span class="token punctuation">,</span> wSecondMax<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>umaxWeight<span class="token punctuation">,</span> vmaxWeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Opencv"><a href="#Opencv" class="headerlink" title="Opencv"></a>Opencv</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>visual studio is ok<br>vscode is hard to configure</p><h2 id="color-detection"><a href="#color-detection" class="headerlink" title="color detection"></a>color detection</h2><p><a href="https://www.opencv-srf.com/2010/09/object-detection-using-color-seperation.html" target="_blank" rel="noopener">https://www.opencv-srf.com/2010/09/object-detection-using-color-seperation.html</a></p><p>use HSV to select certain color<br>色调、饱和度、亮度</p><p>HUE is unique for that specific color distribution of that object<br>SATURATION and VALUE may be vary according to the lighting condition of that environment</p><p><strong>You have to find the exact range of HUE values according to the color of the object</strong><br><strong>The SATURATION and VALUE is depend on the lighting condition of the environment as well as the surface of the object.</strong></p><h3 id="Morphological-Dilation-and-Erosion"><a href="#Morphological-Dilation-and-Erosion" class="headerlink" title="Morphological Dilation and Erosion"></a>Morphological Dilation and Erosion</h3><p>降噪算法<br><a href="https://ww2.mathworks.cn/help/images/morphological-dilation-and-erosion.html" target="_blank" rel="noopener">https://ww2.mathworks.cn/help/images/morphological-dilation-and-erosion.html</a></p><p>Dilation adds pixels to the boundaries of objects in an image, while erosion removes pixels on object boundaries. </p><p>The number of pixels added or removed from the objects in an image depends on the size and shape of the structuring element used to process the image</p><h4 id="dilation"><a href="#dilation" class="headerlink" title="dilation"></a>dilation</h4><p>补漏洞<br>The value of the output pixel is the maximum value of all pixels in the neighborhood</p><h4 id="erosion"><a href="#erosion" class="headerlink" title="erosion"></a>erosion</h4><p>去除小点<br>The value of the output pixel is the minimum value of all pixels in the neighborhood</p><p>调参游戏</p><h1 id="holding-self-driving-boat-competition"><a href="#holding-self-driving-boat-competition" class="headerlink" title="holding self-driving boat competition"></a>holding self-driving boat competition</h1><p>设计无人船比赛方案</p><h2 id="locating-and-navigation"><a href="#locating-and-navigation" class="headerlink" title="locating and navigation"></a>locating and navigation</h2><ul><li>IMU</li><li>超声波</li><li>UWB</li><li>CV</li><li>DR算法<h3 id="卡尔曼滤波"><a href="#卡尔曼滤波" class="headerlink" title="卡尔曼滤波"></a>卡尔曼滤波</h3><a href="https://blog.csdn.net/u010720661/article/details/63253509" target="_blank" rel="noopener">https://blog.csdn.net/u010720661/article/details/63253509</a><br>（假装自己看得懂）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Self-Driving Boat Project </tag>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.25 Notes</title>
      <link href="/2019/11/25/2019/11.25/"/>
      <url>/2019/11/25/2019/11.25/</url>
      
        <content type="html"><![CDATA[<h1 id="11-25-12-1-Learning-Notes"><a href="#11-25-12-1-Learning-Notes" class="headerlink" title="11.25-12.1 Learning Notes"></a>11.25-12.1 Learning Notes</h1><h1 id="pygame"><a href="#pygame" class="headerlink" title="pygame"></a>pygame</h1><h2 id="read-Snake-Game-program"><a href="#read-Snake-Game-program" class="headerlink" title="read Snake Game program"></a>read Snake Game program</h2><p>use pygame document</p><p><a href="https://www.pygame.org/docs/" target="_blank" rel="noopener">https://www.pygame.org/docs/</a></p><h3 id="def-init"><a href="#def-init" class="headerlink" title="def init"></a>def <strong>init</strong></h3><p>构造函数</p><h3 id="why-self"><a href="#why-self" class="headerlink" title="why self?"></a>why self?</h3><p><a href="https://stackoverflow.com/questions/2709821/what-is-the-purpose-of-the-word-self-in-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/2709821/what-is-the-purpose-of-the-word-self-in-python</a></p><p>Let’s say you have a class ClassA which contains a method methodA defined as:</p><pre class=" language-py"><code class="language-py">def methodA(self, arg1, arg2):    # do something</code></pre><p>and <code>ObjectA</code> is an instance of this class.</p><p>Now when <code>ObjectA.methodA(arg1, arg2)</code> is called, python internally converts it for you as:</p><pre class=" language-py"><code class="language-py">ClassA.methodA(ObjectA, arg1, arg2)</code></pre><p>The self variable refers to the object itself.</p><h3 id="from-pygame-locals-import"><a href="#from-pygame-locals-import" class="headerlink" title="from pygame.locals import *"></a>from pygame.locals import *</h3><p>import all constants in pygame<br>such as</p><pre><code>KEYDOWNQUITMOUSEMOTION</code></pre><h3 id="pygame-time"><a href="#pygame-time" class="headerlink" title="pygame.time"></a>pygame.time</h3><pre class=" language-py"><code class="language-py">fps_clock = pygame.time.Clock()# create a new Clock objectfps_clock.tick(snake.speed)# set the frame per second (fps)</code></pre><h2 id="write-Flappy-Bird-program"><a href="#write-Flappy-Bird-program" class="headerlink" title="write Flappy Bird program"></a>write Flappy Bird program</h2><h3 id="draw-rectangle"><a href="#draw-rectangle" class="headerlink" title="draw rectangle"></a>draw rectangle</h3><p>left and top</p><p><img src="https://i.loli.net/2019/12/01/Anuk7IQRv3l6FrZ.png" alt="20191201145419.png"></p><h3 id="class-Hero-pygame-sprite-Sprite"><a href="#class-Hero-pygame-sprite-Sprite" class="headerlink" title="class Hero(pygame.sprite.Sprite):"></a>class Hero(pygame.sprite.Sprite):</h3><h3 id="pygame-sprite-Group"><a href="#pygame-sprite-Group" class="headerlink" title="pygame.sprite.Group()"></a>pygame.sprite.Group()</h3><h3 id="for-event-in-pygame-event-get"><a href="#for-event-in-pygame-event-get" class="headerlink" title="for event in pygame.event.get():"></a>for event in pygame.event.get():</h3><h3 id="pygame-sprite-groupcollide"><a href="#pygame-sprite-groupcollide" class="headerlink" title="pygame.sprite.groupcollide"></a>pygame.sprite.groupcollide</h3><h1 id="data-structure"><a href="#data-structure" class="headerlink" title="data structure"></a>data structure</h1><h2 id="red-black-tree"><a href="#red-black-tree" class="headerlink" title="red-black tree"></a>red-black tree</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><ul><li>Every node is either red or black</li><li>The root is black</li><li>Every leaf (NIL) is black</li><li>If a node is red, then both its children are black</li><li>No two consecutive red nodes on a simple path from the root to a leaf</li><li>For each node, all paths from that node to descendant leaves contain the same number of black nodes<br><img src="https://i.loli.net/2019/12/01/DoCb1Lz96BsjdOS.png" alt="20191201145818.png"><h3 id="rotation"><a href="#rotation" class="headerlink" title="rotation"></a>rotation</h3><img src="https://i.loli.net/2019/12/01/iRKyXYecbGOTIDB.png" alt="20191201145928.png"><br><img src="https://i.loli.net/2019/12/01/FMuC8OAt7l2yGpI.png" alt="20191201145942.png"><h2 id="AVL-tree"><a href="#AVL-tree" class="headerlink" title="AVL tree"></a>AVL tree</h2><h3 id="properties-1"><a href="#properties-1" class="headerlink" title="properties"></a>properties</h3>The height of the left and right subtrees can differ by at most 1. <h3 id="maintein"><a href="#maintein" class="headerlink" title="maintein"></a>maintein</h3><img src="https://i.loli.net/2019/12/01/6O2eXBMgmbkJjuq.png" alt="20191201150107.png"><h4 id="LL"><a href="#LL" class="headerlink" title="LL"></a>LL</h4><img src="https://i.loli.net/2019/12/01/hiXKxg3LrUR491k.png" alt="20191201150449.png"><br><img src="https://i.loli.net/2019/12/01/LhKyUa6z19nBYxO.png" alt="20191201150456.png"><h4 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h4><img src="https://i.loli.net/2019/12/01/Ca93LDeARQMGZTU.png" alt="20191201150509.png"><br><img src="https://i.loli.net/2019/12/01/SQDOEC9uc1BgX2s.png" alt="20191201150527.png"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Python </tag>
            
            <tag> Pygame </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.18 Notes</title>
      <link href="/2019/11/18/2019/11.18/"/>
      <url>/2019/11/18/2019/11.18/</url>
      
        <content type="html"><![CDATA[<h1 id="11-18-11-24-Learning-Notes"><a href="#11-18-11-24-Learning-Notes" class="headerlink" title="11.18-11.24 Learning Notes"></a>11.18-11.24 Learning Notes</h1><h1 id="async-amp-await"><a href="#async-amp-await" class="headerlink" title="async &amp; await"></a>async &amp; await</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 多个await 顺序执行</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> val1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> val2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">secondStep</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> val3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">thirdStep</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Final: '</span><span class="token punctuation">,</span> val3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// for循环内部的await</span><span class="token keyword">const</span> superagent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'superagent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> NUM_RETRIES <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_RETRIES<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> superagent<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://google.com/this-throws-an-error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="await应该放在try–catch结构里面，以免出错"><a href="#await应该放在try–catch结构里面，以免出错" class="headerlink" title="await应该放在try–catch结构里面，以免出错"></a>await应该放在try–catch结构里面，以免出错</h3><h1 id="sequelize"><a href="#sequelize" class="headerlink" title="sequelize"></a>sequelize</h1><h2 id="operators-逻辑运算符"><a href="#operators-逻辑运算符" class="headerlink" title="operators 逻辑运算符"></a>operators 逻辑运算符</h2><p><a href="https://sequelize.org/master/manual/querying.html#operators" target="_blank" rel="noopener">https://sequelize.org/master/manual/querying.html#operators</a></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span>Op<span class="token punctuation">.</span>or<span class="token punctuation">]</span><span class="token punctuation">[</span>Op<span class="token punctuation">.</span>like<span class="token punctuation">]</span></code></pre><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p><a href="https://sequelize.org/master/manual/querying.html#ordering" target="_blank" rel="noopener">https://sequelize.org/master/manual/querying.html#ordering</a></p><pre class=" language-js"><code class="language-js">order<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Turnover'</span><span class="token punctuation">,</span> <span class="token string">'DESC'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//降序</span>order<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Purchased'</span><span class="token punctuation">,</span> <span class="token string">'ASC'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//升序</span></code></pre><h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><p>限制数量</p><h1 id="用变量来构建对象"><a href="#用变量来构建对象" class="headerlink" title="用变量来构建对象"></a>用变量来构建对象</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// imageObject={Image_num:ImageURL}</span><span class="token comment" spellcheck="true">// 其中num、ImageURL由用户输入</span><span class="token comment" spellcheck="true">//1.字符串拼接+JSON.parse()</span><span class="token keyword">let</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> ImageIndex <span class="token operator">=</span> <span class="token string">"Image_"</span> <span class="token operator">+</span> num<span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"{\""</span> <span class="token operator">+</span> ImageIndex <span class="token operator">+</span> <span class="token string">"\":\""</span> <span class="token operator">+</span> ImageURL <span class="token operator">+</span> <span class="token string">"\"}"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用\实现转义</span><span class="token keyword">let</span> imageObject <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.ES6中表达式可以作为key</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> ImageIndex <span class="token operator">=</span> <span class="token string">"Image_"</span> <span class="token operator">+</span> num<span class="token punctuation">;</span><span class="token keyword">let</span> ImageURL <span class="token operator">=</span> <span class="token string">"www.google.com"</span><span class="token punctuation">;</span><span class="token keyword">let</span> imageObject <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>ImageIndex<span class="token punctuation">]</span><span class="token punctuation">:</span>ImageURL<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>imageObject<span class="token punctuation">[</span><span class="token string">"Image_10"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//www.google.com</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>imageObject<span class="token punctuation">[</span>ImageIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//www.google.com</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Sequelize </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.3 Notes</title>
      <link href="/2019/11/03/2019/11.3/"/>
      <url>/2019/11/03/2019/11.3/</url>
      
        <content type="html"><![CDATA[<h1 id="10-28-11-3-Learning-Notes"><a href="#10-28-11-3-Learning-Notes" class="headerlink" title="10.28-11.3 Learning Notes"></a>10.28-11.3 Learning Notes</h1><h1 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h1><p>将renter项目中的sql全部改成sequelize<br>以下是我的代码重构历程:</p><h2 id="在原代码基础上稍作改动"><a href="#在原代码基础上稍作改动" class="headerlink" title="在原代码基础上稍作改动"></a>在原代码基础上稍作改动</h2><h2 id="如何进行代码测试？"><a href="#如何进行代码测试？" class="headerlink" title="如何进行代码测试？"></a>如何进行代码测试？</h2><h3 id="session如何连接"><a href="#session如何连接" class="headerlink" title="session如何连接"></a>session如何连接</h3><p>由于不会连接session，所以我在另一个较简单的express框架下测试，可以直接用post/get等方法测试</p><h2 id="使用sequelize默认命名风格还是遵循原代码命名风格？"><a href="#使用sequelize默认命名风格还是遵循原代码命名风格？" class="headerlink" title="使用sequelize默认命名风格还是遵循原代码命名风格？"></a>使用sequelize默认命名风格还是遵循原代码命名风格？</h2><p>还是用原代码的吧，否则要改的东西更多</p><h3 id="介绍sequelize的默认命名风格"><a href="#介绍sequelize的默认命名风格" class="headerlink" title="介绍sequelize的默认命名风格"></a>介绍sequelize的默认命名风格</h3><p>model是单数<br>table是复数<br>e.g user是模型名称,users是表名称<br>默认主键是id<br>默认添加两个元素：createdAt和updatedAt 保存了时间信息</p><h3 id="如何在sequelize自定义模型"><a href="#如何在sequelize自定义模型" class="headerlink" title="如何在sequelize自定义模型"></a>如何在sequelize自定义模型</h3><p>在网上找了很久，相关的资料比较少，按照官方文档去写，不知道为什么运行出错，有待进一步研究<br><a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/legacy.md" target="_blank" rel="noopener">https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/legacy.md</a><br>最后通过define方法解决，还没弄清为什么用init不行<br><a href="https://sequelize.readthedocs.io/en/v3/docs/legacy/" target="_blank" rel="noopener">https://sequelize.readthedocs.io/en/v3/docs/legacy/</a></p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>sequelize<span class="token punctuation">,</span> DataTypes<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        UserID<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>UUID<span class="token punctuation">,</span>            primaryKey<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            autoIncrement<span class="token punctuation">:</span> <span class="token boolean">true</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>        Gender<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>        Avatar<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>        Openid<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>        Email<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>        Name<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>        FirstLogin<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span>        DefaultAddress<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        tableName<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="如何关闭时间戳"><a href="#如何关闭时间戳" class="headerlink" title="如何关闭时间戳"></a>如何关闭时间戳</h3><p>createdAt和updatedAt<br>两种方法：<br>1.在模型文件里面添加，只对单个模型生效</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> userDetails <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'userDetails'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    userId <span class="token punctuation">:</span>Sequelize<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span>    firstName <span class="token punctuation">:</span> Sequelize<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>    lastName <span class="token punctuation">:</span> Sequelize<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>    birthday <span class="token punctuation">:</span> Sequelize<span class="token punctuation">.</span>DATE<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    timestamps<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.在建立连接的时候添加，对所有模型生效</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用config.json时的写法</span><span class="token comment" spellcheck="true">//在config.json里面添加</span><span class="token string">"define"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"timestamps"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//不使用config.json时的写法</span><span class="token keyword">var</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">'sequelize_test'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    dialect<span class="token punctuation">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>    define<span class="token punctuation">:</span> <span class="token punctuation">{</span>        timestamps<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="工作进度"><a href="#工作进度" class="headerlink" title="工作进度"></a>工作进度</h2><p>建立自定义模型，适配原来的数据库<br>写了前两个接口<br>route.js里面还要很多接口要修改  </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// get user info</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/getUserInfo'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> UserID <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>UserID <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>UserID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> models<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span>UserID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ret_code<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> ret_msg<span class="token punctuation">:</span> <span class="token string">'FAL'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//check // update user info</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/updateUserInfo'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> Name <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Name <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> Gender <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Gender <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> Email <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Email <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> UserID <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>UserID <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">[</span>Name<span class="token punctuation">,</span> Gender<span class="token punctuation">,</span> Email<span class="token punctuation">,</span> UserID<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> models<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span>UserID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ret_code<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> ret_msg<span class="token punctuation">:</span> <span class="token string">'FAL'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Sequelize </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.27 Notes</title>
      <link href="/2019/10/27/2019/10.27/"/>
      <url>/2019/10/27/2019/10.27/</url>
      
        <content type="html"><![CDATA[<h1 id="10-21-10-27-Learning-Notes"><a href="#10-21-10-27-Learning-Notes" class="headerlink" title="10.21-10.27 Learning Notes"></a>10.21-10.27 Learning Notes</h1><h1 id="printf-amp-scanf-in-c"><a href="#printf-amp-scanf-in-c" class="headerlink" title="printf &amp; scanf in c++"></a>printf &amp; scanf in c++</h1><p><a href="https://stackoverflow.com/questions/4264127/correct-format-specifier-for-double-in-printf" target="_blank" rel="noopener">https://stackoverflow.com/questions/4264127/correct-format-specifier-for-double-in-printf</a></p><h2 id="printf-“-f”-printf-“-lf-”"><a href="#printf-“-f”-printf-“-lf-”" class="headerlink" title="printf(“%f”)==printf(“%lf%”)"></a>printf(“%f”)==printf(“%lf%”)</h2><p>Only use %f is OK</p><h2 id="scanf-“-f”-scanf-“-lf”"><a href="#scanf-“-f”-scanf-“-lf”" class="headerlink" title="scanf(“%f”)!=scanf(“%lf”)"></a>scanf(“%f”)!=scanf(“%lf”)</h2><p>“%f” is the (or at least one) correct format for a double. There is no format for a float, because if you attempt to pass a float to printf, it’ll be promoted to double before printf receives it. “%lf” is also acceptable under the current standard – the l is specified as having no effect if followed by the f conversion specifier (among others).</p><p>Note that this is one place that printf format strings differ substantially from scanf (and fscanf, etc.) format strings. For output, you’re passing a value, which will be promoted from float to double when passed as a variadic parameter. For input you’re passing a pointer, which is not promoted, so you have to tell scanf whether you want to read a float or a double, so for scanf, %f means you want to read a float and %lf means you want to read a double (and, for what it’s worth, for a long double, you use %Lf for either printf or scanf).</p><h1 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h1><p><a href="https://gitbook.cn/gitchat/column/5d9efd3feb954a204f3ab13d" target="_blank" rel="noopener">https://gitbook.cn/gitchat/column/5d9efd3feb954a204f3ab13d</a>  </p><h2 id="PDF：probability-density-function-概率密度函数"><a href="#PDF：probability-density-function-概率密度函数" class="headerlink" title="PDF：probability density function 概率密度函数"></a>PDF：probability density function 概率密度函数</h2><p>在数学中，连续型随机变量的概率密度函数（在不至于混淆时可以简称为密度函数）是一个描述这个随机变量的输出值，在某个确定的取值点附近的可能性的函数。</p><h2 id="PMF-probability-mass-function概率质量函数"><a href="#PMF-probability-mass-function概率质量函数" class="headerlink" title="PMF: probability mass function概率质量函数"></a>PMF: probability mass function概率质量函数</h2><p>在概率论中，概率质量函数是离散随机变量在各特定取值上的概率。</p><h2 id="CDF-cumulative-distribution-function累积分布函数"><a href="#CDF-cumulative-distribution-function累积分布函数" class="headerlink" title="CDF :cumulative distribution function累积分布函数"></a>CDF :cumulative distribution function累积分布函数</h2><p>是概率密度函数的积分，能完整描述一个实随机变量X的概率分布。</p><h2 id="Why-use-fig-ax-plt-subplots-3-1"><a href="#Why-use-fig-ax-plt-subplots-3-1" class="headerlink" title="Why use fig, ax = plt.subplots(3, 1)"></a>Why use fig, ax = plt.subplots(3, 1)</h2><p><a href="https://stackoverflow.com/questions/34162443/why-do-many-examples-use-fig-ax-plt-subplots-in-matplotlib-pyplot-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/34162443/why-do-many-examples-use-fig-ax-plt-subplots-in-matplotlib-pyplot-python</a><br>plt.subplots() is a function that returns a tuple containing a figure and axes object(s). Thus when using fig, ax = plt.subplots() you unpack this tuple into the variables fig and ax. Having fig is useful if you want to change figure-level attributes or save the figure as an image file later (e.g. with fig.savefig(‘yourfilename.png’)).</p><h2 id="Binominal-Distribution"><a href="#Binominal-Distribution" class="headerlink" title="Binominal Distribution"></a>Binominal Distribution</h2><p>$$P(X=k)=C_n^kp^k(1-p)^{n-k}$$<br>Draw PMF Graph:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> binom<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seabornseaborn<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>x <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>binom_rv <span class="token operator">=</span> binom<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> binom_rv<span class="token punctuation">.</span>pmf<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'bo'</span><span class="token punctuation">,</span> ms<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>vlines<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> binom_rv<span class="token punctuation">.</span>pmf<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.35</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Simulate:</p><pre class=" language-python"><code class="language-python">binom_rvs <span class="token operator">=</span> binom_rv<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">)</span>E_sim <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>binom_rvs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 期望</span>S_sim <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>binom_rvs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 标准差</span>V_sim <span class="token operator">=</span> S_sim <span class="token operator">*</span> S_sim  <span class="token comment" spellcheck="true"># 方差</span></code></pre><h2 id="Geometric-Distribution"><a href="#Geometric-Distribution" class="headerlink" title="Geometric Distribution"></a>Geometric Distribution</h2><p>$$P(X=k)=(1-p)^{k-1}p$$</p><h2 id="为什么样本方差是除以n-1"><a href="#为什么样本方差是除以n-1" class="headerlink" title="为什么样本方差是除以n-1"></a>为什么样本方差是除以n-1</h2><p>$$S^2=\frac{1}{n-1}\sum_{i=1}^n(X_i-\overline{X})^2$$</p><h3 id="一个好的估计量应具有无偏性"><a href="#一个好的估计量应具有无偏性" class="headerlink" title="一个好的估计量应具有无偏性"></a>一个好的估计量应具有无偏性</h3><p>估计误差的期望为0</p><h3 id="用python模拟"><a href="#用python模拟" class="headerlink" title="用python模拟"></a>用python模拟</h3><p>从均值为 0，标准差为 1的标准正态分布中获取样本，每次获取 100个样本值，我们重复实验 100万次，把 100万次得到的统计量绘制成直方图，看看它们的分布，并与真实的总体方差进行比较。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> norm<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> seabornseaborn<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>norm_rv <span class="token operator">=</span> norm<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>sample_n <span class="token operator">=</span> <span class="token number">100</span>s_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    norm_rvs <span class="token operator">=</span> norm_rv<span class="token punctuation">.</span>rvs<span class="token punctuation">(</span>size<span class="token operator">=</span>sample_n<span class="token punctuation">)</span>    x_bar <span class="token operator">=</span> sum<span class="token punctuation">(</span>norm_rvs<span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>sample_n<span class="token punctuation">)</span>    s <span class="token operator">=</span> sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span><span class="token punctuation">(</span>norm_rvs <span class="token operator">-</span> x_bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>sample_n<span class="token punctuation">)</span>    s_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>s_array<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>s_array<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> normed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_xlim<span class="token punctuation">(</span><span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">1.6</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="数学证明"><a href="#数学证明" class="headerlink" title="数学证明"></a>数学证明</h3><p><a href="https://www.zhihu.com/question/20099757/answer/26586088" target="_blank" rel="noopener">https://www.zhihu.com/question/20099757/answer/26586088</a></p><h1 id="Nodejs-Static-html"><a href="#Nodejs-Static-html" class="headerlink" title="Nodejs Static html"></a>Nodejs Static html</h1><ul><li>设置首页  </li><li>404页面  </li><li>识别文件类型并正确显示</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">.</span><span class="token operator">/</span>model<span class="token operator">/</span>FromFileGetExtname<span class="token punctuation">.</span>js<span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>getMime <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fs<span class="token punctuation">,</span> extname<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//异步程序</span>    <span class="token comment" spellcheck="true">// fs.readFile('./mime.json', (err, data) => {</span>    <span class="token comment" spellcheck="true">//     if (err) {</span>    <span class="token comment" spellcheck="true">//         console.log('not exist');</span>    <span class="token comment" spellcheck="true">//         return false;</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//     let Mime = JSON.parse(data.toString());</span>    <span class="token comment" spellcheck="true">//     return Mime[extname];</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">//改成同步读取</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./mime.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> Mimes <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//convert json into object</span>    <span class="token keyword">return</span> Mimes<span class="token punctuation">[</span>extname<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> extnameModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./model/FromFileGetExtname.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pathname <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取url请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pathname <span class="token operator">=</span> <span class="token string">'/index.html'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置首页</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">!=</span> <span class="token string">'/favicon.ico'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'static/'</span> <span class="token operator">+</span> pathname<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'static/404.html'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> errorData<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//404 page</span>                    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"text/html;charset='utf-8'"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>errorData<span class="token punctuation">)</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> name <span class="token operator">=</span> extnameModel<span class="token punctuation">.</span><span class="token function">getMime</span><span class="token punctuation">(</span>fs<span class="token punctuation">,</span>extname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//识别文件类型</span>                res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">";charset='utf-8'"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="ES6-Style"><a href="#ES6-Style" class="headerlink" title="ES6 Style"></a>ES6 Style</h1><h2 id="let-const-replace-var"><a href="#let-const-replace-var" class="headerlink" title="let+const replace var"></a>let+const replace var</h2><p>不需要改变的量用<code>const</code><br>其余用<code>let</code></p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。  </p><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">,</span> baz<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// 1</span>bar <span class="token comment" spellcheck="true">// 2</span>baz <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">//不完全解构</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">// 1</span>y <span class="token comment" spellcheck="true">// 2</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a <span class="token comment" spellcheck="true">// 1</span>b <span class="token comment" spellcheck="true">// 2</span>d <span class="token comment" spellcheck="true">// 4</span><span class="token comment" spellcheck="true">//默认值</span><span class="token keyword">let</span> <span class="token punctuation">[</span>foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//foo=true</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x='a', y='b'</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x='a', y='b'</span></code></pre><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span> bar<span class="token punctuation">,</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">'bbb'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// "aaa"</span>bar <span class="token comment" spellcheck="true">// "bbb"</span><span class="token keyword">let</span> <span class="token punctuation">{</span> baz <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">'bbb'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>baz <span class="token comment" spellcheck="true">// undefined</span></code></pre><h3 id="优先使用解构赋值"><a href="#优先使用解构赋值" class="headerlink" title="优先使用解构赋值"></a>优先使用解构赋值</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用数组成员对变量赋值时，优先使用解构赋值。</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bad</span><span class="token keyword">const</span> first <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> second <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数的参数如果是对象的成员，优先使用解构赋值。</span><span class="token keyword">let</span> Vip <span class="token operator">=</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">:</span> <span class="token string">"V"</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token string">"ip"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//bad</span><span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> firstName <span class="token operator">=</span> user<span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>    <span class="token keyword">const</span> lastName <span class="token operator">=</span> user<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//good</span><span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getFullName</span><span class="token punctuation">(</span>Vip<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="什么时候使用箭头函数？"><a href="#什么时候使用箭头函数？" class="headerlink" title="什么时候使用箭头函数？"></a>什么时候使用箭头函数？</h2><p><a href="https://jingsam.github.io/2016/12/08/things-you-should-know-about-arrow-functions.html" target="_blank" rel="noopener">https://jingsam.github.io/2016/12/08/things-you-should-know-about-arrow-functions.html</a><br>箭头函数没有this</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//引用了父级作用域中的foo().a</span>    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1</span></code></pre><p><img src="https://i.loli.net/2019/10/27/SPkonK85Y7EqV4N.png" alt="20191027164045.png"></p><h2 id="Module语法"><a href="#Module语法" class="headerlink" title="Module语法"></a>Module语法</h2><p>使用<code>import</code>代替<code>require</code><br>使用<code>export</code>取代<code>module.exports</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// commonJS的写法</span><span class="token keyword">var</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Breadcrumbs <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>nav <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Breadcrumbs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6的写法</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Breadcrumbs</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>nav <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Breadcrumbs<span class="token punctuation">;</span></code></pre><h1 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h1><p><a href="https://www.bilibili.com/video/av59809408" target="_blank" rel="noopener">https://www.bilibili.com/video/av59809408</a><br><a href="https://itbilu.com/nodejs/npm/VyqgRUVf7.html" target="_blank" rel="noopener">https://itbilu.com/nodejs/npm/VyqgRUVf7.html</a></p><h2 id="optional-install-cnpm-国内镜像"><a href="#optional-install-cnpm-国内镜像" class="headerlink" title="(optional) install cnpm(国内镜像)"></a>(optional) install cnpm(国内镜像)</h2><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h2 id="build-environment"><a href="#build-environment" class="headerlink" title="build environment"></a>build environment</h2><pre><code>cnpm i sequelize -scnpm i sequelize-cli -s 命令行工具cnpm i mysql2 -ssequelize init</code></pre><h2 id="create-database"><a href="#create-database" class="headerlink" title="create database"></a>create database</h2><pre><code>sequelize db:create</code></pre><p>按/config/config.json中的配置来建立数据库连接</p><h2 id="create-model-amp-table"><a href="#create-model-amp-table" class="headerlink" title="create model&amp;table"></a>create model&amp;table</h2><h3 id="relation-between-model-and-table"><a href="#relation-between-model-and-table" class="headerlink" title="relation between model and table"></a>relation between model and table</h3><p>ORM框架的作用就是就是可以把关系型数据库表结构映射为javascript对象<br>每一个模型对象表示数据库中的一个表，后续对数据库的操作都是通过对应的模型对象来完成</p><pre><code>sequelize model:generate --name renters --attributes username:string,password:string --force--force            Forcefully re-creates model with the same name</code></pre><p><strong>在sequelize中，模型是单数，表是复数</strong><br>生成了模型文件models\renter.js</p><pre class=" language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>sequelize<span class="token punctuation">,</span> DataTypes<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> renter <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'renter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>    context<span class="token punctuation">:</span> DataTypes<span class="token punctuation">.</span>TEXT  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  renter<span class="token punctuation">.</span>associate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>models<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// associations can be defined here</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> renter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>也生成了迁移文件migrations\20191027094449-create-renter.js  </p><pre class=" language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//sequelize db:migrate</span>  up<span class="token punctuation">:</span> <span class="token punctuation">(</span>queryInterface<span class="token punctuation">,</span> Sequelize<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> queryInterface<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token string">'renters'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token punctuation">{</span>        allowNull<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不允许空值</span>        autoIncrement<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//自增</span>        primaryKey<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//主键</span>        type<span class="token punctuation">:</span> Sequelize<span class="token punctuation">.</span>INTEGER      <span class="token punctuation">}</span><span class="token punctuation">,</span>      title<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Sequelize<span class="token punctuation">.</span>STRING      <span class="token punctuation">}</span><span class="token punctuation">,</span>      context<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Sequelize<span class="token punctuation">.</span>TEXT      <span class="token punctuation">}</span><span class="token punctuation">,</span>      createdAt<span class="token punctuation">:</span> <span class="token punctuation">{</span>        allowNull<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> Sequelize<span class="token punctuation">.</span>DATE      <span class="token punctuation">}</span><span class="token punctuation">,</span>      updatedAt<span class="token punctuation">:</span> <span class="token punctuation">{</span>        allowNull<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> Sequelize<span class="token punctuation">.</span>DATE      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//sequelize db:migrate:undo 迁移记录在就可以撤销迁移操作 </span>  down<span class="token punctuation">:</span> <span class="token punctuation">(</span>queryInterface<span class="token punctuation">,</span> Sequelize<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> queryInterface<span class="token punctuation">.</span><span class="token function">dropTable</span><span class="token punctuation">(</span><span class="token string">'renters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>会迁移/migrations下的<strong>还未执行的</strong>迁移文件<br>数据库中有一个名为SequelizeMeta的表，此表用于记录在当前数据库上运行的迁移</p><pre><code>sequelize db:migrate</code></pre><h2 id="create-seeders"><a href="#create-seeders" class="headerlink" title="create seeders"></a>create seeders</h2><p>种子文件表示数据的一些变化，可用于使用样本数据或测试数据填充数据库表。</p><pre><code>sequelize seed:generate --name demo-renter</code></pre><p>编辑种子文件\seeders\20191027112628-demo-renter.js</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    up<span class="token punctuation">:</span> <span class="token punctuation">(</span>queryInterface<span class="token punctuation">,</span> Sequelize<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> queryInterface<span class="token punctuation">.</span><span class="token function">bulkInsert</span><span class="token punctuation">(</span><span class="token string">'renters'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'Rent'</span><span class="token punctuation">,</span>            context<span class="token punctuation">:</span> <span class="token string">'Whatever you want'</span><span class="token punctuation">,</span>            createdAt<span class="token punctuation">:</span> <span class="token string">'2019.10.27'</span><span class="token punctuation">,</span>            updatedAt<span class="token punctuation">:</span> <span class="token string">'2019.10.27'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    down<span class="token punctuation">:</span> <span class="token punctuation">(</span>queryInterface<span class="token punctuation">,</span> Sequelize<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> queryInterface<span class="token punctuation">.</span><span class="token function">bulkDelete</span><span class="token punctuation">(</span><span class="token string">'renters'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre><code>sequelize db:seed:all</code></pre><h2 id="sequelize-cli"><a href="#sequelize-cli" class="headerlink" title="sequelize-cli"></a>sequelize-cli</h2><pre><code>sequelize [命令]命令：  sequelize db:migrate                        运行待执行的迁移  sequelize db:migrate:schema:timestamps:add  更新迁移表以获取时间戳  sequelize db:migrate:status                 列出所有迁移的状态  sequelize db:migrate:undo                   恢复迁移  sequelize db:migrate:undo:all               恢复所有迁移  sequelize db:seed                           运行指定的种子  sequelize db:seed:undo                      撤消最近执行的种子  sequelize db:seed:all                       运行所有种子  sequelize db:seed:undo:all                  撤消所有已执行的种子  sequelize db:create                         创建配置中指定的数据库  sequelize db:drop                           删除配置中指定的数据库  sequelize init                              初始化项目  sequelize init:config                       初始化配置  sequelize init:migrations                   初始化迁移  sequelize init:models                       初始化模型  sequelize init:seeders                      初始化种子  sequelize migration:generate                生成新的迁移文件                         [aliases: migration:create]  sequelize model:generate                    生成一个模型及迁移文件                 [aliases: model:create]  sequelize seed:generate                     生成一个新的种子文件                      [aliases: seed:create]选项：  --help     显示帮助信息                                                              [布尔]  --version  显示版本号                                                                [布尔]</code></pre><p><img src="https://i.loli.net/2019/10/27/Z1IuR3P7ixG24ep.png" alt="20191027193126.png"></p><h1 id="安利一个VSCODE插件：PicGo"><a href="#安利一个VSCODE插件：PicGo" class="headerlink" title="安利一个VSCODE插件：PicGo"></a>安利一个VSCODE插件：PicGo</h1><p>在Markdown中快速插入图片，自动上传到图床</p>]]></content>
      
      
      
        <tags>
            
            <tag> Sequelize </tag>
            
            <tag> Node.js </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> C++ </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.20 Notes</title>
      <link href="/2019/10/20/2019/10.20/"/>
      <url>/2019/10/20/2019/10.20/</url>
      
        <content type="html"><![CDATA[<h1 id="10-14-10-20-Learning-Notes"><a href="#10-14-10-20-Learning-Notes" class="headerlink" title="10.14-10.20 Learning Notes"></a>10.14-10.20 Learning Notes</h1><h1 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h1><p><a href="https://itfun.tv/courses/12" target="_blank" rel="noopener">https://itfun.tv/courses/12</a>  </p><h2 id="model-amp-tables"><a href="#model-amp-tables" class="headerlink" title="model &amp; tables"></a>model &amp; tables</h2><p>模型是单数<br>表是复数</p><h2 id="migrations"><a href="#migrations" class="headerlink" title="migrations"></a>migrations</h2><h2 id="models"><a href="#models" class="headerlink" title="models"></a>models</h2><h2 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h2><h2 id="seeders"><a href="#seeders" class="headerlink" title="seeders"></a>seeders</h2><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><p><a href="https://www.bilibili.com/video/av38925557" target="_blank" rel="noopener">https://www.bilibili.com/video/av38925557</a></p><h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><p>要让外部访问模块里面的方法</p><h3 id="模块文件中：用exports-amp-module-exports暴露方法"><a href="#模块文件中：用exports-amp-module-exports暴露方法" class="headerlink" title="模块文件中：用exports &amp; module.exports暴露方法"></a>模块文件中：用exports &amp; module.exports暴露方法</h3><p>exports与module.exports的不同:  </p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>nav<span class="token operator">/</span>nav<span class="token punctuation">.</span>js<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'this is /node_modules/nav/nav.js'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>str<span class="token operator">=</span>str<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>useNav<span class="token punctuation">.</span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nav<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// { str: 'this is /node_modules/nav/nav.js' }</span><span class="token number">2</span><span class="token punctuation">.</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>nav<span class="token operator">/</span>nav<span class="token punctuation">.</span>js<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'this is /node_modules/nav/nav.js'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>useNav<span class="token punctuation">.</span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nav<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// this is /node_modules/nav/nav.js'</span></code></pre><h3 id="需要访问模块的文件中：require-‘model’"><a href="#需要访问模块的文件中：require-‘model’" class="headerlink" title="需要访问模块的文件中：require(‘model’);"></a>需要访问模块的文件中：require(‘model’);</h3><h3 id="require"><a href="#require" class="headerlink" title="require"></a>require</h3><pre class=" language-js"><code class="language-js"><span class="token punctuation">.</span>js可省略绝对路径写法<span class="token punctuation">:</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./node_modules/bar/bar.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./node_modules/bar/bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>位于node_modules下的写法<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nav/nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>配置<span class="token keyword">package</span><span class="token punctuation">.</span>json后的写法<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>bar<span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span>json  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"nav.js"</span><span class="token punctuation">.</span><span class="token operator">/</span>useNav<span class="token punctuation">.</span>js<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><p>自动更新代码并运行</p><pre class=" language-js"><code class="language-js">npm i nodemon <span class="token operator">-</span>s<span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token punctuation">:</span><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"nodemon ./yourFile"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>npm start</code></pre><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"text/html;charset='utf-8'"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello nodejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//地址到对象</span>url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对象到地址</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">'news'</span><span class="token punctuation">)</span></code></pre><h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">'httpmodel.js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//文件信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'file:'</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'directory:'</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//make directory</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span><span class="token string">'content'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//会覆盖原来的</span>fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span><span class="token string">'content'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在文件后面加上去</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'t.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">'./app.js'</span><span class="token punctuation">,</span><span class="token string">'app/app.js'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//改名或剪切</span>fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//remove directory</span>fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除文件</span></code></pre><h3 id="find-all-directories-in-one-directory"><a href="#find-all-directories-in-one-directory" class="headerlink" title="find all directories in one directory"></a>find all directories in one directory</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//let filesArr = [];</span>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//let大法好</span>            fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// (function getFile(i) {      //异步+函数+递归</span>        <span class="token comment" spellcheck="true">//     if (i == files.length) {</span>        <span class="token comment" spellcheck="true">//         console.log(filesArr);</span>        <span class="token comment" spellcheck="true">//         return false;</span>        <span class="token comment" spellcheck="true">//     }</span>        <span class="token comment" spellcheck="true">//     fs.stat('html/' + files[i], function (err, stats) {</span>        <span class="token comment" spellcheck="true">//         if (files[i].isDirectory) {</span>        <span class="token comment" spellcheck="true">//             filesArr.push(files[i]);</span>        <span class="token comment" spellcheck="true">//         }</span>        <span class="token comment" spellcheck="true">//         getFile(i + 1);</span>        <span class="token comment" spellcheck="true">//     })</span>        <span class="token comment" spellcheck="true">// })(0)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="let-amp-var"><a href="#let-amp-var" class="headerlink" title="let &amp; var"></a>let &amp; var</h2><p><a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/let</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token number">4</span><span class="token number">4</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span></code></pre><p>上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正常函数写法</span><span class="token keyword">var</span> result <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 箭头函数写法</span><span class="token keyword">var</span> result <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Pygame"><a href="#Pygame" class="headerlink" title="Pygame"></a>Pygame</h2><p><a href="https://mp.weixin.qq.com/s/Or84egkjMzG3YC8Ed6n1kw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Or84egkjMzG3YC8Ed6n1kw</a></p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#窗口大小</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#标题栏</span><span class="token keyword">def</span> <span class="token function">draw_rect</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#绘制矩形</span>    pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>caption<span class="token punctuation">,</span> color<span class="token punctuation">,</span> pygame<span class="token punctuation">.</span>Rect<span class="token punctuation">(</span>position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cell<span class="token punctuation">,</span> cell<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Rect:((x, y), (width, height)) 以(x,y)为左上角，绘制width*height的矩形</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Sequelize </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.13 Notes</title>
      <link href="/2019/10/13/2019/10.13/"/>
      <url>/2019/10/13/2019/10.13/</url>
      
        <content type="html"><![CDATA[<h1 id="10-7-10-13-Learning-Notes"><a href="#10-7-10-13-Learning-Notes" class="headerlink" title="10.7-10.13 Learning Notes"></a>10.7-10.13 Learning Notes</h1><p>by Huang Yongjin</p><h1 id="JS-Learning"><a href="#JS-Learning" class="headerlink" title="JS Learning"></a>JS Learning</h1><p><a href="https://wangdoc.com/javascript/index.html" target="_blank" rel="noopener">https://wangdoc.com/javascript/index.html</a><br><a href="http://es6.ruanyifeng.com/#docs/style#Class" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/style#Class</a>  </p><h2 id="变量提升（hoisting）"><a href="#变量提升（hoisting）" class="headerlink" title="变量提升（hoisting）"></a>变量提升（hoisting）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//先解析代码，获取所有被声明的变量，然后再一行一行地运行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="use-let-instead-of-var"><a href="#use-let-instead-of-var" class="headerlink" title="use let instead of var"></a><strong>use let instead of var</strong></h2><h3 id="let-不会变量提升"><a href="#let-不会变量提升" class="headerlink" title="let 不会变量提升"></a>let 不会变量提升</h3><h3 id="let-只在块级作用域中有效"><a href="#let-只在块级作用域中有效" class="headerlink" title="let 只在块级作用域中有效"></a>let 只在块级作用域中有效</h3><h3 id="let-暂时性死区"><a href="#let-暂时性死区" class="headerlink" title="let 暂时性死区"></a>let 暂时性死区</h3><p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="严格相等运算符-amp-相等运算符"><a href="#严格相等运算符-amp-相等运算符" class="headerlink" title="严格相等运算符 &amp; 相等运算符"></a>严格相等运算符 &amp; 相等运算符</h2><p>相等运算符会自动转换变量类型，造成很多意想不到的情况。<br><strong>因此，建议不要使用相等运算符（==），只使用严格相等运算符（===）。</strong></p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token operator">==</span><span class="token string">'1'</span> <span class="token comment" spellcheck="true">//return true</span><span class="token number">1</span><span class="token operator">===</span><span class="token string">'1'</span> <span class="token comment" spellcheck="true">//return false</span></code></pre><h2 id="check-var"><a href="#check-var" class="headerlink" title="check var"></a>check var</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 错误的写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ReferenceError: v is not defined</span><span class="token comment" spellcheck="true">// 正确的写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><h2 id="int-float64"><a href="#int-float64" class="headerlink" title="int? float64!"></a>int? float64!</h2><p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是相同的，是同一个数。</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1.0</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）</span></code></pre><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>什么是对象？  简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//use , to separate</span>  bar<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//['foo','bar']</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>foo<span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">//遍历对象自身的属性，不包括继承的</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>function命令声明的代码区块，就是一个函数。function命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）</span><span class="token keyword">var</span> print <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>x<span class="token comment" spellcheck="true">// ReferenceError: x is not defined</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// function</span></code></pre><p>函数与其它值（数值、字符串、布尔值等等）地位相同</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x ## y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将函数赋值给一个变量</span><span class="token keyword">var</span> operator <span class="token operator">=</span> add<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将函数作为参数和返回值</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2</span></code></pre><p>函数作用域（scope）<br>函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// return 1</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">y</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">y</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ReferenceError: a is not defined</span></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span></code></pre><p>闭包就是函数f2，即能够读取其他函数内部变量的函数。由于在 JavaScript 语言中，只有函数内部的子函数才能读取内部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如f2记住了它诞生的环境f1，所以从f2可以得到f1的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。  </p><p>闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createIncrementor</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> start<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inc <span class="token operator">=</span> <span class="token function">createIncrementor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 7</span></code></pre><p>闭包的另一个用处，是封装对象的私有属性和私有方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _age<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">setAge</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _age <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> getAge<span class="token punctuation">,</span>    setAge<span class="token punctuation">:</span> setAge  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 25</span></code></pre><h2 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h2><p>throw</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//自定义error</span><span class="token keyword">function</span> <span class="token function">UserError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message <span class="token operator">||</span> <span class="token string">'默认信息'</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'UserError'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserError</span><span class="token punctuation">(</span><span class="token string">'出错了！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught UserError {message: "出错了！", name: "UserError"}</span><span class="token comment" spellcheck="true">//实际上，throw可以抛出任何类型的值</span><span class="token comment" spellcheck="true">// 抛出一个字符串</span><span class="token keyword">throw</span> <span class="token string">'Error！'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught Error！</span><span class="token comment" spellcheck="true">// 抛出一个数值</span><span class="token keyword">throw</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught 42</span><span class="token comment" spellcheck="true">// 抛出一个布尔值</span><span class="token keyword">throw</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught true</span><span class="token comment" spellcheck="true">// 抛出一个对象</span><span class="token keyword">throw</span> <span class="token punctuation">{</span>  toString<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Error!'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught {toString: ƒ}</span></code></pre><p>try…catch<br>如果你不确定某些代码是否会报错，就可以把它们放在try…catch代码块之中，便于进一步对错误进行处理</p><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"catch error"</span><span class="token punctuation">)</span>t  <span class="token comment" spellcheck="true">// 处理错误</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//try代码块抛出的错误，被catch代码块捕获后，程序会继续向下执行。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>try…catch…finally</p><pre class=" language-js"><code class="language-js"><span class="token function">openFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">writeFile</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>  <span class="token function">closeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面代码首先打开一个文件，然后在try代码块中写入文件，如果没有发生错误，则运行finally代码块关闭文件；一旦发生错误，则先使用catch代码块处理错误，再使用finally代码块关闭文件。</p><h2 id="console"><a href="#console" class="headerlink" title="console"></a>console</h2><p>console.log</p><ul><li>%s 字符串</li><li>%d 整数</li><li>%f 浮点数</li><li>%o 对象的链接</li><li>%c CSS 格式字符串<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">' %s + %s = %s'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  1 + 1 = 2</span></code></pre>console.warn() &amp; console.error()<br>特殊图标</li></ul><p>console.count()<br>count方法用于计数，输出它被调用了多少次。</p><p>console.time() &amp; console.timeEnd()<br>计算程序运行时间</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'Array initialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> array<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'Array initialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Array initialize: 1914.481ms</span></code></pre><h1 id="install-mysql"><a href="#install-mysql" class="headerlink" title="install mysql"></a>install mysql</h1><p><a href="https://zhuanlan.zhihu.com/p/42583126" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/42583126</a><br>my.ini中的目录要填对<br>学会看错误信息</p><h1 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h1><p><a href="https://juejin.im/post/5c259cf46fb9a049eb3bff49" target="_blank" rel="noopener">https://juejin.im/post/5c259cf46fb9a049eb3bff49</a><br><a href="https://github.com/demopark/sequelize-docs-Zh-CN" target="_blank" rel="noopener">https://github.com/demopark/sequelize-docs-Zh-CN</a></p><h2 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h2><p>Problem One:<br>Please install mysql2 package manually<br><a href="https://stackoverflow.com/questions/17667368/sequelize-js-you-need-to-install-mysql-package-manually" target="_blank" rel="noopener">https://stackoverflow.com/questions/17667368/sequelize-js-you-need-to-install-mysql-package-manually</a></p><p>Problem Two:<br>Client does not support authentication protocol requested by server<br><a href="https://blog.csdn.net/u013700358/article/details/80306560" target="_blank" rel="noopener">https://blog.csdn.net/u013700358/article/details/80306560</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span>    <span class="token string">'test'</span><span class="token punctuation">,</span>    <span class="token string">'root'</span><span class="token punctuation">,</span>    <span class="token string">'112233asd'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        dialect<span class="token punctuation">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>        pool<span class="token punctuation">:</span> <span class="token punctuation">{</span>            max<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            acquire<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>            idle<span class="token punctuation">:</span> <span class="token number">10000</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试连接</span>sequelize    <span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connection has been established successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Unable to connect to the database:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>一个模型类对应一个表，一个模型实例对象（DAO）就是一条对应的表记录  </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建模型实例对象 public static build(options: Object): Model | Model[]</span><span class="token comment" spellcheck="true">// options：一个对象，对应的就是表中的字段（模型中定义的属性），需要注意的是对该对象的操作不会立即反应到实际的数据库中，需要通过后续的操作进行同步比如save</span>attr<span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span><span class="token string">"test"</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span><span class="token string">"iscontent"</span><span class="token punctuation">,</span>    titile<span class="token punctuation">:</span><span class="token string">"istitle"</span><span class="token punctuation">}</span><span class="token keyword">let</span> projectInstance <span class="token operator">=</span> Project<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建实例对象</span><span class="token comment" spellcheck="true">// 实例方法</span>projectInstance<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 验证该实例，如果通过验证，则持久化到数据库中</span>projectInstance<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updates<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// updates：要更新的字段，调用该方法等同于调用.set()然后.save()</span>projectInstance<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 销毁该实例（假删除或真删除）</span><span class="token comment" spellcheck="true">//  public static create(values: Object, options: Object): Promise&lt;Model></span><span class="token comment" spellcheck="true">// 构建一个新的模型实例，并进行保存。与build()方法不同的是，此方法除创建新实例外，还会将其保存到对应数据库表中。</span><span class="token keyword">await</span> Project<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span></code></pre><h1 id="Use-Latex-to-write-mathematic-formula"><a href="#Use-Latex-to-write-mathematic-formula" class="headerlink" title="Use Latex to write mathematic formula"></a>Use Latex to write mathematic formula</h1><h2 id="install-latex"><a href="#install-latex" class="headerlink" title="install latex"></a>install latex</h2><p><a href="https://zhuanlan.zhihu.com/p/38178015" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38178015</a><br>texlive default installation and use eduroam</p><h2 id="latex-markdown"><a href="#latex-markdown" class="headerlink" title="latex+markdown"></a>latex+markdown</h2><h3 id="single"><a href="#single" class="headerlink" title="single $"></a>single $</h3><h3 id="pi"><a href="#pi" class="headerlink" title="$\pi$"></a>$\pi$</h3><h3 id="double"><a href="#double" class="headerlink" title="double $$"></a>double $$</h3><p>$$x^3+2x=1$$  </p><h2 id="basic-grammar"><a href="#basic-grammar" class="headerlink" title="basic grammar"></a>basic grammar</h2><h3 id="换行"><a href="#换行" class="headerlink" title="\\ 换行"></a>\\ 换行</h3><h3 id="公式"><a href="#公式" class="headerlink" title="$ $ 公式"></a>$ $ 公式</h3><h3 id="begin-equation-end-equation-公式块"><a href="#begin-equation-end-equation-公式块" class="headerlink" title="\begin{equation} \end{equation} 公式块"></a>\begin{equation} \end{equation} 公式块</h3><h3 id="frac-1-x"><a href="#frac-1-x" class="headerlink" title="frac{1}{x}"></a>frac{1}{x}</h3><p>$$\frac{1}{x}$$</p><h3 id="sqrt-3-x"><a href="#sqrt-3-x" class="headerlink" title="sqrt[3]{x}"></a>sqrt[3]{x}</h3><p>$$\sqrt[3]{x}$$</p><h3 id="lim-x-to-infty-frac-1-x"><a href="#lim-x-to-infty-frac-1-x" class="headerlink" title="lim_{x \to \infty}\frac{1}{x}"></a>lim_{x \to \infty}\frac{1}{x}</h3><p>$$lim_{x \to \infty}\frac{1}{x}$$</p><h3 id="x-n"><a href="#x-n" class="headerlink" title="x_n"></a>x_n</h3><p>$$x_n$$</p><h3 id="x-quad-y"><a href="#x-quad-y" class="headerlink" title="x\quad y"></a>x\quad y</h3><p>$$x\quad y$$</p><h3 id="begin-cases-end-cases"><a href="#begin-cases-end-cases" class="headerlink" title="\begin{cases} \end{cases}"></a>\begin{cases} \end{cases}</h3><p>$$f(s)=\begin{cases}<br>\frac{s^3-1}{s^2-1},\quad s\not=\pm1 \<br>\frac{3}{2},\quad s=1<br>\end{cases}$$</p><h2 id="pandoc"><a href="#pandoc" class="headerlink" title="pandoc"></a>pandoc</h2><h3 id="save-as-pdf"><a href="#save-as-pdf" class="headerlink" title="save as .pdf"></a>save as .pdf</h3><p>–pdf-engine=xelatex </p><h3 id="docx-html"><a href="#docx-html" class="headerlink" title=".docx .html"></a>.docx .html</h3><h1 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h1><h2 id="connect-arduino-nano-to-computer"><a href="#connect-arduino-nano-to-computer" class="headerlink" title="connect arduino nano to computer"></a>connect arduino nano to computer</h2><p><a href="https://www.arduino.cc/en/Guide/ArduinoNano" target="_blank" rel="noopener">https://www.arduino.cc/en/Guide/ArduinoNano</a><br>use ATmega328P (Old Bootloader)</p><h2 id="让舵机转起来"><a href="#让舵机转起来" class="headerlink" title="让舵机转起来"></a>让舵机转起来</h2><p><a href="https://blog.csdn.net/xieyan0811/article/details/56012044" target="_blank" rel="noopener">https://blog.csdn.net/xieyan0811/article/details/56012044</a></p><h1 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h1><p>$O(n^c)&lt;O(2^n)$<br>$O(\log^c n)&lt;O(n^\epsilon)$  </p>]]></content>
      
      
      
        <tags>
            
            <tag> Sequelize </tag>
            
            <tag> JS </tag>
            
            <tag> Arduino </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.10 Notes</title>
      <link href="/2019/10/10/2019/10.10/"/>
      <url>/2019/10/10/2019/10.10/</url>
      
        <content type="html"><![CDATA[<h1 id="10-4-10-10-Learning-Notes"><a href="#10-4-10-10-Learning-Notes" class="headerlink" title="10.4-10.10 Learning Notes"></a>10.4-10.10 Learning Notes</h1><h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><p><a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/5690241.html</a><br>git上传时忽略自定义文件</p><h2 id="如果原来没有忽略怎么办？？？"><a href="#如果原来没有忽略怎么办？？？" class="headerlink" title="如果原来没有忽略怎么办？？？"></a>如果原来没有忽略怎么办？？？</h2><p><a href="https://segmentfault.com/q/1010000000430426" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000430426</a><br><a href="https://www.jianshu.com/p/e5b13480479b" target="_blank" rel="noopener">https://www.jianshu.com/p/e5b13480479b</a></p><pre><code>git rm --cashed xxxgit commit -m &quot;delete xxx&quot;</code></pre><p>为什么我增加了 .gitignore 里的规则却没有效果？</p><p>这是因为我们误解了 .gitignore 文件的用途，该文件只能作用于 Untracked Files，也就是那些从来没有被 Git 记录过的文件（自添加以后，从未 add 及 commit 过的文件）。</p><p>之所以你的规则不生效，是因为那些 .log 文件曾经被 Git 记录过，因此 .gitignore 对它们完全无效。这也正是开头那段简短答案所做的事情：</p><p>从 Git 的数据库中删除对于该文件的追踪；<br>把对应的规则写入 .gitignore，让忽略真正生效；<br>提交＋推送。<br>只有这样做，所有的团队成员才会保持一致而不会有后遗症，也只有这样做，其他的团队成员根本不需要做额外的工作来维持对一个文件的改变忽略。</p><p>最后有一点需要注意的，git rm –cached 删除的是追踪状态，而不是物理文件；如果你真的是彻底不想要了，你也可以直接 rm＋忽略＋提交。</p>]]></content>
      
      
      
        <tags>
            
            <tag> gitignore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.6 Notes</title>
      <link href="/2019/10/06/2019/10.6/"/>
      <url>/2019/10/06/2019/10.6/</url>
      
        <content type="html"><![CDATA[<h1 id="9-25-10-6-Learning-Notes"><a href="#9-25-10-6-Learning-Notes" class="headerlink" title="9.25-10.6 Learning Notes"></a>9.25-10.6 Learning Notes</h1><p>by Huang Yongjin</p><h2 id="mysql-basic-grammar"><a href="#mysql-basic-grammar" class="headerlink" title="mysql basic grammar"></a>mysql basic grammar</h2><ul><li>drop &amp; create table</li><li>select insert update</li><li>if where from</li><li><a href="https://www.liaoxuefeng.com/wiki/1177760294764384" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1177760294764384</a><br><a href="https://www.runoob.com/sql/sql-intro.html" target="_blank" rel="noopener">https://www.runoob.com/sql/sql-intro.html</a></li></ul><h2 id="reading-nodejs-program"><a href="#reading-nodejs-program" class="headerlink" title="reading nodejs program"></a>reading nodejs program</h2><ul><li>input &amp; output</li><li>callback</li><li>function</li><li>require</li><li>exports</li><li>nodejs+sql<ul><li>connection &amp; pool</li></ul></li><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-install-setup.html</a><br><a href="https://www.runoob.com/w3cnote/nodejs-callback-func.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/nodejs-callback-func.html</a><br><a href="http://javascript.ruanyifeng.com/nodejs/basic.html#toc3" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/nodejs/basic.html#toc3</a><br><a href="https://gywbd.github.io/posts/2014/11/using-exports-nodejs-interface-design-pattern.html" target="_blank" rel="noopener">https://gywbd.github.io/posts/2014/11/using-exports-nodejs-interface-design-pattern.html</a></li></ul><h2 id="Faker-a-python-package"><a href="#Faker-a-python-package" class="headerlink" title="Faker(a python package)"></a>Faker(a python package)</h2><ul><li>fake.profile()</li><li><a href="https://zhuanlan.zhihu.com/p/37173611" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/37173611</a><br><a href="https://faker.readthedocs.io/en/master/locales/zh_CN.html" target="_blank" rel="noopener">https://faker.readthedocs.io/en/master/locales/zh_CN.html</a></li></ul><h2 id="python-make-data"><a href="#python-make-data" class="headerlink" title="python make data"></a>python make data</h2><ul><li>file input &amp; output</li></ul><h2 id="python-mysql"><a href="#python-mysql" class="headerlink" title="python + mysql"></a>python + mysql</h2><ul><li>cursor.execute()</li><li>generate_person_address.py by Guochao Xie</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
